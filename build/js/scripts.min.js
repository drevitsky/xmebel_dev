!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.Util=e(t.jQuery)}(this,function(t){"use strict";return function(n){var e="transitionend";function t(t){var e=this,i=!1;return n(this).one(l.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=n(t).css("transition-duration");return parseFloat(e)?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){n(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,i){for(var n in i)if(Object.prototype.hasOwnProperty.call(i,n)){var o=i[n],r=e[n],s=r&&l.isElement(r)?"element":(a=r,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(s))throw new Error(t.toUpperCase()+': Option "'+n+'" provided type "'+s+'" but expected type "'+o+'".')}var a}};return n.fn.emulateTransitionEnd=t,n.event.special[l.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(n(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},l}(t=t&&t.hasOwnProperty("default")?t.default:t)}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):t.Button=e(t.jQuery)}(this,function(t){"use strict";function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s,e,a,i,n,o,l,u,h,c,f,d,m,p,g,y;return t=t&&t.hasOwnProperty("default")?t.default:t,e="button",i="."+(a="bs.button"),n=".data-api",o=(s=t).fn[e],l="active",u="btn",c='[data-toggle^="button"]',f='[data-toggle="buttons"]',d="input",m=".active",p=".btn",g={CLICK_DATA_API:"click"+i+n,FOCUS_BLUR_DATA_API:(h="focus")+i+n+" blur"+i+n},y=function(){function i(t){this._element=t}var t,e,n,o=i.prototype;return o.toggle=function(){var t=!0,e=!0,i=s(this._element).closest(f)[0];if(i){var n=this._element.querySelector(d);if(n){if("radio"===n.type)if(n.checked&&this._element.classList.contains(l))t=!1;else{var o=i.querySelector(m);o&&s(o).removeClass(l)}if(t){if(n.hasAttribute("disabled")||i.hasAttribute("disabled")||n.classList.contains("disabled")||i.classList.contains("disabled"))return;n.checked=!this._element.classList.contains(l),s(n).trigger("change")}n.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(l)),t&&s(this._element).toggleClass(l)},o.dispose=function(){s.removeData(this._element,a),this._element=null},i._jQueryInterface=function(e){return this.each(function(){var t=s(this).data(a);t||(t=new i(this),s(this).data(a,t)),"toggle"===e&&t[e]()})},t=i,n=[{key:"VERSION",get:function(){return"4.1.3"}}],(e=null)&&r(t.prototype,e),n&&r(t,n),i}(),s(document).on(g.CLICK_DATA_API,c,function(t){t.preventDefault();var e=t.target;s(e).hasClass(u)||(e=s(e).closest(p)),y._jQueryInterface.call(s(e),"toggle")}).on(g.FOCUS_BLUR_DATA_API,c,function(t){var e=s(t.target).closest(p)[0];s(e).toggleClass(h,/^focus(in)?$/.test(t.type))}),s.fn[e]=y._jQueryInterface,s.fn[e].Constructor=y,s.fn[e].noConflict=function(){return s.fn[e]=o,y._jQueryInterface},y}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],e):t.Carousel=e(t.jQuery,t.Util)}(this,function(t,d){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var m,a,l,u,e,i,h,c,p,f,g,y,v,_,b,E,T,I,C,S,w,O,A,D,x,n,r,j;return t=t&&t.hasOwnProperty("default")?t.default:t,d=d&&d.hasOwnProperty("default")?d.default:d,a="carousel",u="."+(l="bs.carousel"),e=".data-api",i=(m=t).fn[a],h={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},p="next",f="prev",g="left",y="right",v={SLIDE:"slide"+u,SLID:"slid"+u,KEYDOWN:"keydown"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u,TOUCHEND:"touchend"+u,LOAD_DATA_API:"load"+u+e,CLICK_DATA_API:"click"+u+e},_="carousel",b="active",E="slide",T="carousel-item-right",I="carousel-item-left",C="carousel-item-next",S="carousel-item-prev",w=".active",O=".active.carousel-item",A=".carousel-item",D=".carousel-item-next, .carousel-item-prev",x=".carousel-indicators",n="[data-slide], [data-slide-to]",r='[data-ride="carousel"]',j=function(){function r(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=m(t)[0],this._indicatorsElement=this._element.querySelector(x),this._addEventListeners()}var t,e,i,n=r.prototype;return n.next=function(){this._isSliding||this._slide(p)},n.nextWhenVisible=function(){!document.hidden&&m(this._element).is(":visible")&&"hidden"!==m(this._element).css("visibility")&&this.next()},n.prev=function(){this._isSliding||this._slide(f)},n.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(D)&&(d.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var e=this;this._activeElement=this._element.querySelector(O);var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)m(this._element).one(v.SLID,function(){return e.to(t)});else{if(i===t)return this.pause(),void this.cycle();var n=i<t?p:f;this._slide(n,this._items[t])}},n.dispose=function(){m(this._element).off(u),m.removeData(this._element,l),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=s({},h,t),d.typeCheckConfig(a,t,c),t},n._addEventListeners=function(){var e=this;this._config.keyboard&&m(this._element).on(v.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(m(this._element).on(v.MOUSEENTER,function(t){return e.pause(t)}).on(v.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&m(this._element).on(v.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(A)):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var i=t===p,n=t===f,o=this._getItemIndex(e),r=this._items.length-1;if((n&&0===o||i&&o===r)&&!this._config.wrap)return e;var s=(o+(t===f?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},n._triggerSlideEvent=function(t,e){var i=this._getItemIndex(t),n=this._getItemIndex(this._element.querySelector(O)),o=m.Event(v.SLIDE,{relatedTarget:t,direction:e,from:n,to:i});return m(this._element).trigger(o),o},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(w));m(e).removeClass(b);var i=this._indicatorsElement.children[this._getItemIndex(t)];i&&m(i).addClass(b)}},n._slide=function(t,e){var i,n,o,r=this,s=this._element.querySelector(O),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),u=this._getItemIndex(l),h=Boolean(this._interval);if(o=t===p?(i=I,n=C,g):(i=T,n=S,y),l&&m(l).hasClass(b))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).isDefaultPrevented()&&s&&l){this._isSliding=!0,h&&this.pause(),this._setActiveIndicatorElement(l);var c=m.Event(v.SLID,{relatedTarget:l,direction:o,from:a,to:u});if(m(this._element).hasClass(E)){m(l).addClass(n),d.reflow(l),m(s).addClass(i),m(l).addClass(i);var f=d.getTransitionDurationFromElement(s);m(s).one(d.TRANSITION_END,function(){m(l).removeClass(i+" "+n).addClass(b),m(s).removeClass(b+" "+n+" "+i),r._isSliding=!1,setTimeout(function(){return m(r._element).trigger(c)},0)}).emulateTransitionEnd(f)}else m(s).removeClass(b),m(l).addClass(b),this._isSliding=!1,m(this._element).trigger(c);h&&this.cycle()}},r._jQueryInterface=function(n){return this.each(function(){var t=m(this).data(l),e=s({},h,m(this).data());"object"==typeof n&&(e=s({},e,n));var i="string"==typeof n?n:e.slide;if(t||(t=new r(this,e),m(this).data(l,t)),"number"==typeof n)t.to(n);else if("string"==typeof i){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}else e.interval&&(t.pause(),t.cycle())})},r._dataApiClickHandler=function(t){var e=d.getSelectorFromElement(this);if(e){var i=m(e)[0];if(i&&m(i).hasClass(_)){var n=s({},m(i).data(),m(this).data()),o=this.getAttribute("data-slide-to");o&&(n.interval=!1),r._jQueryInterface.call(m(i),n),o&&m(i).data(l).to(o),t.preventDefault()}}},t=r,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return h}}],(e=null)&&o(t.prototype,e),i&&o(t,i),r}(),m(document).on(v.CLICK_DATA_API,n,j._dataApiClickHandler),m(window).on(v.LOAD_DATA_API,function(){for(var t=[].slice.call(document.querySelectorAll(r)),e=0,i=t.length;e<i;e++){var n=m(t[e]);j._jQueryInterface.call(n,n.data())}}),m.fn[a]=j._jQueryInterface,m.fn[a].Constructor=j,m.fn[a].noConflict=function(){return m.fn[a]=i,j._jQueryInterface},j}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],e):t.Collapse=e(t.jQuery,t.Util)}(this,function(t,l){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function r(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var u,s,h,e,i,c,f,d,m,p,g,y,v,_,b,E,a;return t=t&&t.hasOwnProperty("default")?t.default:t,l=l&&l.hasOwnProperty("default")?l.default:l,s="collapse",e="."+(h="bs.collapse"),i=(u=t).fn[s],c={toggle:!0,parent:""},f={toggle:"boolean",parent:"(string|element)"},d={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},m="show",p="collapse",g="collapsing",y="collapsed",v="width",_="height",b=".show, .collapsing",E='[data-toggle="collapse"]',a=function(){function a(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=u.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=[].slice.call(document.querySelectorAll(E)),n=0,o=i.length;n<o;n++){var r=i[n],s=l.getSelectorFromElement(r),a=[].slice.call(document.querySelectorAll(s)).filter(function(t){return t===e});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t,e,i,n=a.prototype;return n.toggle=function(){u(this._element).hasClass(m)?this.hide():this.show()},n.show=function(){var t,e,i=this;if(!this._isTransitioning&&!u(this._element).hasClass(m)&&(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(b)).filter(function(t){return t.getAttribute("data-parent")===i._config.parent})).length&&(t=null),!(t&&(e=u(t).not(this._selector).data(h))&&e._isTransitioning))){var n=u.Event(d.SHOW);if(u(this._element).trigger(n),!n.isDefaultPrevented()){t&&(a._jQueryInterface.call(u(t).not(this._selector),"hide"),e||u(t).data(h,null));var o=this._getDimension();u(this._element).removeClass(p).addClass(g),this._element.style[o]=0,this._triggerArray.length&&u(this._triggerArray).removeClass(y).attr("aria-expanded",!0),this.setTransitioning(!0);var r="scroll"+(o[0].toUpperCase()+o.slice(1)),s=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){u(i._element).removeClass(g).addClass(p).addClass(m),i._element.style[o]="",i.setTransitioning(!1),u(i._element).trigger(d.SHOWN)}).emulateTransitionEnd(s),this._element.style[o]=this._element[r]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&u(this._element).hasClass(m)){var e=u.Event(d.HIDE);if(u(this._element).trigger(e),!e.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",l.reflow(this._element),u(this._element).addClass(g).removeClass(p).removeClass(m);var n=this._triggerArray.length;if(0<n)for(var o=0;o<n;o++){var r=this._triggerArray[o],s=l.getSelectorFromElement(r);if(null!==s)u([].slice.call(document.querySelectorAll(s))).hasClass(m)||u(r).addClass(y).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[i]="";var a=l.getTransitionDurationFromElement(this._element);u(this._element).one(l.TRANSITION_END,function(){t.setTransitioning(!1),u(t._element).removeClass(g).addClass(p).trigger(d.HIDDEN)}).emulateTransitionEnd(a)}}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){u.removeData(this._element,h),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=r({},c,t)).toggle=Boolean(t.toggle),l.typeCheckConfig(s,t,f),t},n._getDimension=function(){return u(this._element).hasClass(v)?v:_},n._getParent=function(){var i=this,t=null;l.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',n=[].slice.call(t.querySelectorAll(e));return u(n).each(function(t,e){i._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},n._addAriaAndCollapsedClass=function(t,e){if(t){var i=u(t).hasClass(m);e.length&&u(e).toggleClass(y,!i).attr("aria-expanded",i)}},a._getTargetFromElement=function(t){var e=l.getSelectorFromElement(t);return e?document.querySelector(e):null},a._jQueryInterface=function(n){return this.each(function(){var t=u(this),e=t.data(h),i=r({},c,t.data(),"object"==typeof n&&n?n:{});if(!e&&i.toggle&&/show|hide/.test(n)&&(i.toggle=!1),e||(e=new a(this,i),t.data(h,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},t=a,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return c}}],(e=null)&&o(t.prototype,e),i&&o(t,i),a}(),u(document).on(d.CLICK_DATA_API,E,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var i=u(this),e=l.getSelectorFromElement(this),n=[].slice.call(document.querySelectorAll(e));u(n).each(function(){var t=u(this),e=t.data(h)?"toggle":i.data();a._jQueryInterface.call(t,e)})}),u.fn[s]=a._jQueryInterface,u.fn[s].Constructor=a,u.fn[s].noConflict=function(){return u.fn[s]=i,a._jQueryInterface},a}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],e):t.Dropdown=e(t.jQuery,t.Popper,t.Util)}(this,function(t,r,s){"use strict";function o(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var h,l,c,f,e,i,d,m,p,g,y,v,_,b,E,T,n,I,C,S,w,O,A,D,x,j,z,P,u;return t=t&&t.hasOwnProperty("default")?t.default:t,r=r&&r.hasOwnProperty("default")?r.default:r,s=s&&s.hasOwnProperty("default")?s.default:s,l="dropdown",f="."+(c="bs.dropdown"),e=".data-api",i=(h=t).fn[l],d=new RegExp("38|40|27"),m={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:"show"+f,SHOWN:"shown"+f,CLICK:"click"+f,CLICK_DATA_API:"click"+f+e,KEYDOWN_DATA_API:"keydown"+f+e,KEYUP_DATA_API:"keyup"+f+e},p="disabled",g="show",y="dropup",v="dropright",_="dropleft",b="dropdown-menu-right",E="position-static",T='[data-toggle="dropdown"]',n=".dropdown form",I=".dropdown-menu",C=".navbar-nav",S=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",w="top-start",O="top-end",A="bottom-start",D="bottom-end",x="right-start",j="left-start",z={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},P={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},u=function(){function u(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t,e,i,n=u.prototype;return n.toggle=function(){if(!this._element.disabled&&!h(this._element).hasClass(p)){var t=u._getParentFromElement(this._element),e=h(this._menu).hasClass(g);if(u._clearMenus(),!e){var i={relatedTarget:this._element},n=h.Event(m.SHOW,i);if(h(t).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar){if(void 0===r)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var o=this._element;"parent"===this._config.reference?o=t:s.isElement(this._config.reference)&&(o=this._config.reference,void 0!==this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&h(t).addClass(E),this._popper=new r(o,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===h(t).closest(C).length&&h(document.body).children().on("mouseover",null,h.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),h(this._menu).toggleClass(g),h(t).toggleClass(g).trigger(h.Event(m.SHOWN,i))}}}},n.dispose=function(){h.removeData(this._element,c),h(this._element).off(f),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},n.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},n._addEventListeners=function(){var e=this;h(this._element).on(m.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},n._getConfig=function(t){return t=a({},this.constructor.Default,h(this._element).data(),t),s.typeCheckConfig(l,t,this.constructor.DefaultType),t},n._getMenuElement=function(){if(!this._menu){var t=u._getParentFromElement(this._element);t&&(this._menu=t.querySelector(I))}return this._menu},n._getPlacement=function(){var t=h(this._element.parentNode),e=A;return t.hasClass(y)?(e=w,h(this._menu).hasClass(b)&&(e=O)):t.hasClass(v)?e=x:t.hasClass(_)?e=j:h(this._menu).hasClass(b)&&(e=D),e},n._detectNavbar=function(){return 0<h(this._element).closest(".navbar").length},n._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=a({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var i={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(i.modifiers.applyStyle={enabled:!1}),i},u._jQueryInterface=function(e){return this.each(function(){var t=h(this).data(c);if(t||(t=new u(this,"object"==typeof e?e:null),h(this).data(c,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},u._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=[].slice.call(document.querySelectorAll(T)),i=0,n=e.length;i<n;i++){var o=u._getParentFromElement(e[i]),r=h(e[i]).data(c),s={relatedTarget:e[i]};if(t&&"click"===t.type&&(s.clickEvent=t),r){var a=r._menu;if(h(o).hasClass(g)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&h.contains(o,t.target))){var l=h.Event(m.HIDE,s);h(o).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&h(document.body).children().off("mouseover",null,h.noop),e[i].setAttribute("aria-expanded","false"),h(a).removeClass(g),h(o).removeClass(g).trigger(h.Event(m.HIDDEN,s)))}}}},u._getParentFromElement=function(t){var e,i=s.getSelectorFromElement(t);return i&&(e=document.querySelector(i)),e||t.parentNode},u._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||h(t.target).closest(I).length)):d.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!h(this).hasClass(p))){var e=u._getParentFromElement(this),i=h(e).hasClass(g);if((i||27===t.which&&32===t.which)&&(!i||27!==t.which&&32!==t.which)){var n=[].slice.call(e.querySelectorAll(S));if(0!==n.length){var o=n.indexOf(t.target);38===t.which&&0<o&&o--,40===t.which&&o<n.length-1&&o++,o<0&&(o=0),n[o].focus()}}else{if(27===t.which){var r=e.querySelector(T);h(r).trigger("focus")}h(this).trigger("click")}}},t=u,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return z}},{key:"DefaultType",get:function(){return P}}],(e=null)&&o(t.prototype,e),i&&o(t,i),u}(),h(document).on(m.KEYDOWN_DATA_API,T,u._dataApiKeydownHandler).on(m.KEYDOWN_DATA_API,I,u._dataApiKeydownHandler).on(m.CLICK_DATA_API+" "+m.KEYUP_DATA_API,u._clearMenus).on(m.CLICK_DATA_API,T,function(t){t.preventDefault(),t.stopPropagation(),u._jQueryInterface.call(h(this),"toggle")}).on(m.CLICK_DATA_API,n,function(t){t.stopPropagation()}),h.fn[l]=u._jQueryInterface,h.fn[l].Constructor=u,h.fn[l].noConflict=function(){return h.fn[l]=i,u._jQueryInterface},u}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],e):t.Tooltip=e(t.jQuery,t.Popper,t.Util)}(this,function(t,h,c){"use strict";function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var f,a,l,u,e,d,m,p,g,y,v,_,b,E,T,I,C,S,w,O,A,i;return t=t&&t.hasOwnProperty("default")?t.default:t,h=h&&h.hasOwnProperty("default")?h.default:h,c=c&&c.hasOwnProperty("default")?c.default:c,a="tooltip",u="."+(l="bs.tooltip"),e=(f=t).fn[a],d="bs-tooltip",m=new RegExp("(^|\\s)"+d+"\\S+","g"),y={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(g={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(p={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},_="out",b={HIDE:"hide"+u,HIDDEN:"hidden"+u,SHOW:(v="show")+u,SHOWN:"shown"+u,INSERTED:"inserted"+u,CLICK:"click"+u,FOCUSIN:"focusin"+u,FOCUSOUT:"focusout"+u,MOUSEENTER:"mouseenter"+u,MOUSELEAVE:"mouseleave"+u},E="fade",T="show",I=".tooltip-inner",C=".arrow",S="hover",w="focus",O="click",A="manual",i=function(){function n(t,e){if(void 0===h)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t,e,i,o=n.prototype;return o.enable=function(){this._isEnabled=!0},o.disable=function(){this._isEnabled=!1},o.toggleEnabled=function(){this._isEnabled=!this._isEnabled},o.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,i=f(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(f(this.getTipElement()).hasClass(T))return void this._leave(null,this);this._enter(null,this)}},o.dispose=function(){clearTimeout(this._timeout),f.removeData(this.element,this.constructor.DATA_KEY),f(this.element).off(this.constructor.EVENT_KEY),f(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&f(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},o.show=function(){var e=this;if("none"===f(this.element).css("display"))throw new Error("Please use show on visible elements");var t=f.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){f(this.element).trigger(t);var i=f.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!i)return;var n=this.getTipElement(),o=c.getUID(this.constructor.NAME);n.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&f(n).addClass(E);var r="function"==typeof this.config.placement?this.config.placement.call(this,n,this.element):this.config.placement,s=this._getAttachment(r);this.addAttachmentClass(s);var a=!1===this.config.container?document.body:f(document).find(this.config.container);f(n).data(this.constructor.DATA_KEY,this),f.contains(this.element.ownerDocument.documentElement,this.tip)||f(n).appendTo(a),f(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new h(this.element,n,{placement:s,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:C},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),f(n).addClass(T),"ontouchstart"in document.documentElement&&f(document.body).children().on("mouseover",null,f.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,f(e.element).trigger(e.constructor.Event.SHOWN),t===_&&e._leave(null,e)};if(f(this.tip).hasClass(E)){var u=c.getTransitionDurationFromElement(this.tip);f(this.tip).one(c.TRANSITION_END,l).emulateTransitionEnd(u)}else l()}},o.hide=function(t){var e=this,i=this.getTipElement(),n=f.Event(this.constructor.Event.HIDE),o=function(){e._hoverState!==v&&i.parentNode&&i.parentNode.removeChild(i),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),f(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(f(this.element).trigger(n),!n.isDefaultPrevented()){if(f(i).removeClass(T),"ontouchstart"in document.documentElement&&f(document.body).children().off("mouseover",null,f.noop),this._activeTrigger[O]=!1,this._activeTrigger[w]=!1,this._activeTrigger[S]=!1,f(this.tip).hasClass(E)){var r=c.getTransitionDurationFromElement(i);f(i).one(c.TRANSITION_END,o).emulateTransitionEnd(r)}else o();this._hoverState=""}},o.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},o.isWithContent=function(){return Boolean(this.getTitle())},o.addAttachmentClass=function(t){f(this.getTipElement()).addClass(d+"-"+t)},o.getTipElement=function(){return this.tip=this.tip||f(this.config.template)[0],this.tip},o.setContent=function(){var t=this.getTipElement();this.setElementContent(f(t.querySelectorAll(I)),this.getTitle()),f(t).removeClass(E+" "+T)},o.setElementContent=function(t,e){var i=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?i?f(e).parent().is(t)||t.empty().append(e):t.text(f(e).text()):t[i?"html":"text"](e)},o.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},o._getAttachment=function(t){return g[t.toUpperCase()]},o._setListeners=function(){var n=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)f(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(t){return n.toggle(t)});else if(t!==A){var e=t===S?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,i=t===S?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT;f(n.element).on(e,n.config.selector,function(t){return n._enter(t)}).on(i,n.config.selector,function(t){return n._leave(t)})}f(n.element).closest(".modal").on("hide.bs.modal",function(){return n.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},o._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},o._enter=function(t,e){var i=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?w:S]=!0),f(e.getTipElement()).hasClass(T)||e._hoverState===v?e._hoverState=v:(clearTimeout(e._timeout),e._hoverState=v,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===v&&e.show()},e.config.delay.show):e.show())},o._leave=function(t,e){var i=this.constructor.DATA_KEY;(e=e||f(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),f(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?w:S]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=_,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===_&&e.hide()},e.config.delay.hide):e.hide())},o._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},o._getConfig=function(t){return"number"==typeof(t=s({},this.constructor.Default,f(this.element).data(),"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),c.typeCheckConfig(a,t,this.constructor.DefaultType),t},o._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},o._cleanTipClass=function(){var t=f(this.getTipElement()),e=t.attr("class").match(m);null!==e&&e.length&&t.removeClass(e.join(""))},o._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},o._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(f(t).removeClass(E),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},n._jQueryInterface=function(i){return this.each(function(){var t=f(this).data(l),e="object"==typeof i&&i;if((t||!/dispose|hide/.test(i))&&(t||(t=new n(this,e),f(this).data(l,t)),"string"==typeof i)){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},t=n,i=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return y}},{key:"NAME",get:function(){return a}},{key:"DATA_KEY",get:function(){return l}},{key:"Event",get:function(){return b}},{key:"EVENT_KEY",get:function(){return u}},{key:"DefaultType",get:function(){return p}}],(e=null)&&r(t.prototype,e),i&&r(t,i),n}(),f.fn[a]=i._jQueryInterface,f.fn[a].Constructor=i,f.fn[a].noConflict=function(){return f.fn[a]=e,i._jQueryInterface},i}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("jquery"),require("./tooltip.js")):"function"==typeof define&&define.amd?define(["jquery","./tooltip.js"],e):t.Popover=e(t.jQuery,t.Tooltip)}(this,function(t,e){"use strict";function l(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function i(o){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},e=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(r).filter(function(t){return Object.getOwnPropertyDescriptor(r,t).enumerable}))),e.forEach(function(t){var e,i,n;e=o,n=r[i=t],i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n})}return o}var u,h,c,f,n,d,m,p,g,y,v,_,b,E,o;return t=t&&t.hasOwnProperty("default")?t.default:t,e=e&&e.hasOwnProperty("default")?e.default:e,h="popover",f="."+(c="bs.popover"),n=(u=t).fn[h],d="bs-popover",m=new RegExp("(^|\\s)"+d+"\\S+","g"),p=i({},e.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),g=i({},e.DefaultType,{content:"(string|element|function)"}),y="fade",_=".popover-header",b=".popover-body",E={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:(v="show")+f,SHOWN:"shown"+f,INSERTED:"inserted"+f,CLICK:"click"+f,FOCUSIN:"focusin"+f,FOCUSOUT:"focusout"+f,MOUSEENTER:"mouseenter"+f,MOUSELEAVE:"mouseleave"+f},o=function(t){var e,i;function n(){return t.apply(this,arguments)||this}i=t,(e=n).prototype=Object.create(i.prototype),(e.prototype.constructor=e).__proto__=i;var o,r,s,a=n.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){u(this.getTipElement()).addClass(d+"-"+t)},a.getTipElement=function(){return this.tip=this.tip||u(this.config.template)[0],this.tip},a.setContent=function(){var t=u(this.getTipElement());this.setElementContent(t.find(_),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(b),e),t.removeClass(y+" "+v)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=u(this.getTipElement()),e=t.attr("class").match(m);null!==e&&0<e.length&&t.removeClass(e.join(""))},n._jQueryInterface=function(i){return this.each(function(){var t=u(this).data(c),e="object"==typeof i?i:null;if((t||!/destroy|hide/.test(i))&&(t||(t=new n(this,e),u(this).data(c,t)),"string"==typeof i)){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},o=n,s=[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return p}},{key:"NAME",get:function(){return h}},{key:"DATA_KEY",get:function(){return c}},{key:"Event",get:function(){return E}},{key:"EVENT_KEY",get:function(){return f}},{key:"DefaultType",get:function(){return g}}],(r=null)&&l(o.prototype,r),s&&l(o,s),n}(e),u.fn[h]=o._jQueryInterface,u.fn[h].Constructor=o,u.fn[h].noConflict=function(){return u.fn[h]=n,o._jQueryInterface},o}),function(e,i){"function"==typeof define&&define.amd?define("jquery-bridget/jquery-bridget",["jquery"],function(t){return i(e,t)}):"object"==typeof module&&module.exports?module.exports=i(e,require("jquery")):e.jQueryBridget=i(e,e.jQuery)}(window,function(t,e){"use strict";function i(u,o,h){(h=h||e||t.jQuery)&&(o.prototype.option||(o.prototype.option=function(t){h.isPlainObject(t)&&(this.options=h.extend(!0,this.options,t))}),h.fn[u]=function(t){if("string"!=typeof t)return n=t,this.each(function(t,e){var i=h.data(e,u);i?(i.option(n),i._init()):(i=new o(e,n),h.data(e,u,i))}),this;var e,r,s,a,l,n,i=c.call(arguments,1);return s=i,l="$()."+u+'("'+(r=t)+'")',(e=this).each(function(t,e){var i=h.data(e,u);if(i){var n=i[r];if(n&&"_"!=r.charAt(0)){var o=n.apply(i,s);a=void 0===a?o:a}else f(l+" is not a valid method")}else f(u+" not initialized. Cannot call methods, i.e. "+l)}),void 0!==a?a:e},n(h))}function n(t){!t||t&&t.bridget||(t.bridget=i)}var c=Array.prototype.slice,o=t.console,f=void 0===o?function(){}:function(t){o.error(t)};return n(e||t.jQuery),i}),function(t,e){"function"==typeof define&&define.amd?define("ev-emitter/ev-emitter",e):"object"==typeof module&&module.exports?module.exports=e():t.EvEmitter=e()}("undefined"!=typeof window?window:this,function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],o=0;o<i.length;o++){var r=i[o];n&&n[r]&&(this.off(t,r),delete n[r]),r.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t}),function(t,e){"function"==typeof define&&define.amd?define("get-size/get-size",e):"object"==typeof module&&module.exports?module.exports=e():t.getSize=e()}(window,function(){"use strict";function y(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}function v(t){var e=getComputedStyle(t);return e||i("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),e}function _(t){if(function(){if(!I){I=!0;var t=document.createElement("div");t.style.width="200px",t.style.padding="1px 2px 3px 4px",t.style.borderStyle="solid",t.style.borderWidth="1px 2px 3px 4px",t.style.boxSizing="border-box";var e=document.body||document.documentElement;e.appendChild(t);var i=v(t);b=200==Math.round(y(i.width)),_.isBoxSizeOuter=b,e.removeChild(t)}}(),"string"==typeof t&&(t=document.querySelector(t)),t&&"object"==typeof t&&t.nodeType){var e=v(t);if("none"==e.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<T;e++)t[E[e]]=0;return t}();var i={};i.width=t.offsetWidth,i.height=t.offsetHeight;for(var n=i.isBorderBox="border-box"==e.boxSizing,o=0;o<T;o++){var r=E[o],s=e[r],a=parseFloat(s);i[r]=isNaN(a)?0:a}var l=i.paddingLeft+i.paddingRight,u=i.paddingTop+i.paddingBottom,h=i.marginLeft+i.marginRight,c=i.marginTop+i.marginBottom,f=i.borderLeftWidth+i.borderRightWidth,d=i.borderTopWidth+i.borderBottomWidth,m=n&&b,p=y(e.width);!1!==p&&(i.width=p+(m?0:l+f));var g=y(e.height);return!1!==g&&(i.height=g+(m?0:u+d)),i.innerWidth=i.width-(l+f),i.innerHeight=i.height-(u+d),i.outerWidth=i.width+h,i.outerHeight=i.height+c,i}}var b,i="undefined"==typeof console?function(){}:function(t){console.error(t)},E=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],T=E.length,I=!1;return _}),function(t,e){"use strict";"function"==typeof define&&define.amd?define("desandro-matches-selector/matches-selector",e):"object"==typeof module&&module.exports?module.exports=e():t.matchesSelector=e()}(window,function(){"use strict";var i=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(t,e){return t[i](e)}}),function(e,i){"function"==typeof define&&define.amd?define("fizzy-ui-utils/utils",["desandro-matches-selector/matches-selector"],function(t){return i(e,t)}):"object"==typeof module&&module.exports?module.exports=i(e,require("desandro-matches-selector")):e.fizzyUIUtils=i(e,e.matchesSelector)}(window,function(u,r){var h={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},e=Array.prototype.slice;h.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?e.call(t):[t]},h.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},h.getParent=function(t,e){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,r(t,e))return t},h.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},h.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},h.filterFindElements=function(t,n){t=h.makeArray(t);var o=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!n)return void o.push(t);r(t,n)&&o.push(t);for(var e=t.querySelectorAll(n),i=0;i<e.length;i++)o.push(e[i])}}),o},h.debounceMethod=function(t,e,n){n=n||100;var o=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];clearTimeout(t);var e=arguments,i=this;this[r]=setTimeout(function(){o.apply(i,e),delete i[r]},n)}},h.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},h.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,i){return e+"-"+i}).toLowerCase()};var c=u.console;return h.htmlInit=function(a,l){h.docReady(function(){var t=h.toDashed(l),o="data-"+t,e=document.querySelectorAll("["+o+"]"),i=document.querySelectorAll(".js-"+t),n=h.makeArray(e).concat(h.makeArray(i)),r=o+"-options",s=u.jQuery;n.forEach(function(e){var t,i=e.getAttribute(o)||e.getAttribute(r);try{t=i&&JSON.parse(i)}catch(t){return void(c&&c.error("Error parsing "+o+" on "+e.className+": "+t))}var n=new a(e,t);s&&s.data(e,l,n)})})},h}),function(t,e){"function"==typeof define&&define.amd?define("outlayer/item",["ev-emitter/ev-emitter","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("ev-emitter"),require("get-size")):(t.Outlayer={},t.Outlayer.Item=e(t.EvEmitter,t.getSize))}(window,function(t,e){"use strict";function i(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var n=document.documentElement.style,o="string"==typeof n.transition?"transition":"WebkitTransition",r="string"==typeof n.transform?"transform":"WebkitTransform",s={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[o],a={transform:r,transition:o,transitionDuration:o+"Duration",transitionProperty:o+"Property",transitionDelay:o+"Delay"},l=i.prototype=Object.create(t.prototype);l.constructor=i,l._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},l.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},l.getSize=function(){this.size=e(this.element)},l.css=function(t){var e=this.element.style;for(var i in t){e[a[i]||i]=t[i]}},l.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],o=t[i?"top":"bottom"],r=parseFloat(n),s=parseFloat(o),a=this.layout.size;-1!=n.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=e?a.paddingLeft:a.paddingRight,s-=i?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},l.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",r=i?"left":"right",s=i?"right":"left",a=this.position.x+t[o];e[r]=this.getXValue(a),e[s]="";var l=n?"paddingTop":"paddingBottom",u=n?"top":"bottom",h=n?"bottom":"top",c=this.position.y+t[l];e[u]=this.getYValue(c),e[h]="",this.css(e),this.emitEvent("layout",[this])},l.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},l.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},l._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var r=t-i,s=e-n,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},l.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},l.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},l.moveTo=l._transitionTo,l.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},l._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},l.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);this.element.offsetHeight;null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var u="opacity,"+r.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()});l.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:u,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(s,this,!1)}},l.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},l.onotransitionend=function(t){this.ontransitionend(t)};var h={"-webkit-transform":"transform"};l.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=h[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd)e.onEnd[i].call(this),delete e.onEnd[i];this.emitEvent("transitionEnd",[this])}},l.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(s,this,!1),this.isTransitioning=!1},l._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var c={transitionProperty:"",transitionDuration:"",transitionDelay:""};return l.removeTransitionStyles=function(){this.css(c)},l.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},l.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},l.remove=function(){return o&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",function(){this.removeElem()}),void this.hide()):void this.removeElem()},l.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},l.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},l.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},l.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},l.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},l.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},i}),function(o,r){"use strict";"function"==typeof define&&define.amd?define("outlayer/outlayer",["ev-emitter/ev-emitter","get-size/get-size","fizzy-ui-utils/utils","./item"],function(t,e,i,n){return r(o,t,e,i,n)}):"object"==typeof module&&module.exports?module.exports=r(o,require("ev-emitter"),require("get-size"),require("fizzy-ui-utils"),require("./item")):o.Outlayer=r(o,o.EvEmitter,o.getSize,o.fizzyUIUtils,o.Outlayer.Item)}(window,function(t,e,o,r,n){"use strict";function s(t,e){var i=r.getQueryElement(t);if(i){this.element=i,u&&(this.$element=u(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var n=++h;this.element.outlayerGUID=n,(c[n]=this)._create(),this._getOption("initLayout")&&this.layout()}else l&&l.error("Bad element for "+this.constructor.namespace+": "+(i||t))}function a(t){function e(){t.apply(this,arguments)}return(e.prototype=Object.create(t.prototype)).constructor=e}var l=t.console,u=t.jQuery,i=function(){},h=0,c={};s.namespace="outlayer",s.Item=n,s.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var f=s.prototype;r.extend(f,e.prototype),f.option=function(t){r.extend(this.options,t)},f._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},s.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},f._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},f.reloadItems=function(){this.items=this._itemize(this.element.children)},f._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],o=0;o<e.length;o++){var r=new i(e[o],this);n.push(r)}return n},f._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},f.getItemElements=function(){return this.items.map(function(t){return t.element})},f.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},f._init=f.layout,f._resetLayout=function(){this.getSize()},f.getSize=function(){this.size=o(this.element)},f._getMeasurement=function(t,e){var i,n=this.options[t];this[t]=n?("string"==typeof n?i=this.element.querySelector(n):n instanceof HTMLElement&&(i=n),i?o(i)[e]:n):0},f.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},f._getItemsForLayout=function(t){return t.filter(function(t){return!t.isIgnored})},f._layoutItems=function(t,i){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach(function(t){var e=this._getItemLayoutPosition(t);e.item=t,e.isInstant=i||t.isLayoutInstant,n.push(e)},this),this._processLayoutQueue(n)}},f._getItemLayoutPosition=function(){return{x:0,y:0}},f._processLayoutQueue=function(t){this.updateStagger(),t.forEach(function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)},this)},f.updateStagger=function(){var t=this.options.stagger;return null==t?void(this.stagger=0):(this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];return i.length?(i=parseFloat(i))*(d[n]||1):0}(t),this.stagger)},f._positionItem=function(t,e,i,n,o){n?t.goTo(e,i):(t.stagger(o*this.stagger),t.moveTo(e,i))},f._postLayout=function(){this.resizeContainer()},f.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},f._getContainerSize=i,f._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},f._emitCompleteOnItems=function(e,t){function i(){o.dispatchEvent(e+"Complete",null,[t])}function n(){++s==r&&i()}var o=this,r=t.length;if(t&&r){var s=0;t.forEach(function(t){t.once(e,n)})}else i()},f.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),u)if(this.$element=this.$element||u(this.element),e){var o=u.Event(e);o.type=t,this.$element.trigger(o,i)}else this.$element.trigger(t,i)},f.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},f.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},f.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},f.unstamp=function(t){(t=this._find(t))&&t.forEach(function(t){r.removeFrom(this.stamps,t),this.unignore(t)},this)},f._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),r.makeArray(t)},f._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},f._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},f._manageStamp=i,f._getElementOffset=function(t){var e=t.getBoundingClientRect(),i=this._boundingRect,n=o(t);return{left:e.left-i.left-n.marginLeft,top:e.top-i.top-n.marginTop,right:i.right-e.right-n.marginRight,bottom:i.bottom-e.bottom-n.marginBottom}},f.handleEvent=r.handleEvent,f.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},f.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},f.onresize=function(){this.resize()},r.debounceMethod(s,"onresize",100),f.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},f.needsResizeLayout=function(){var t=o(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},f.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},f.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},f.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},f.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var i=this.updateStagger();t.forEach(function(t,e){t.stagger(e*i),t.reveal()})}},f.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var i=this.updateStagger();t.forEach(function(t,e){t.stagger(e*i),t.hide()})}},f.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},f.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},f.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},f.getItems=function(t){t=r.makeArray(t);var i=[];return t.forEach(function(t){var e=this.getItem(t);e&&i.push(e)},this),i},f.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach(function(t){t.remove(),r.removeFrom(this.items,t)},this)},f.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach(function(t){t.destroy()}),this.unbindResize();var e=this.element.outlayerGUID;delete c[e],delete this.element.outlayerGUID,u&&u.removeData(this.element,this.constructor.namespace)},s.data=function(t){var e=(t=r.getQueryElement(t))&&t.outlayerGUID;return e&&c[e]},s.create=function(t,e){var i=a(s);return i.defaults=r.extend({},s.defaults),r.extend(i.defaults,e),i.compatOptions=r.extend({},s.compatOptions),i.namespace=t,i.data=s.data,i.Item=a(n),r.htmlInit(i,t),u&&u.bridget&&u.bridget(t,i),i};var d={ms:1,s:1e3};return s.Item=n,s}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/item",["outlayer/outlayer"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.Item=e(t.Outlayer))}(window,function(t){"use strict";function e(){t.Item.apply(this,arguments)}var i=e.prototype=Object.create(t.Item.prototype),n=i._create;i._create=function(){this.id=this.layout.itemGUID++,n.call(this),this.sortData={}},i.updateSortData=function(){if(!this.isIgnored){this.sortData.id=this.id,this.sortData["original-order"]=this.id,this.sortData.random=Math.random();var t=this.layout.options.getSortData,e=this.layout._sorters;for(var i in t){var n=e[i];this.sortData[i]=n(this.element,this)}}};var o=i.destroy;return i.destroy=function(){o.apply(this,arguments),this.css({display:""})},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-mode",["get-size/get-size","outlayer/outlayer"],e):"object"==typeof module&&module.exports?module.exports=e(require("get-size"),require("outlayer")):(t.Isotope=t.Isotope||{},t.Isotope.LayoutMode=e(t.getSize,t.Outlayer))}(window,function(e,i){"use strict";function n(t){(this.isotope=t)&&(this.options=t.options[this.namespace],this.element=t.element,this.items=t.filteredItems,this.size=t.size)}var o=n.prototype;return["_resetLayout","_getItemLayoutPosition","_manageStamp","_getContainerSize","_getElementOffset","needsResizeLayout","_getOption"].forEach(function(t){o[t]=function(){return i.prototype[t].apply(this.isotope,arguments)}}),o.needsVerticalResizeLayout=function(){var t=e(this.isotope.element);return this.isotope.size&&t&&t.innerHeight!=this.isotope.size.innerHeight},o._getMeasurement=function(){this.isotope._getMeasurement.apply(this,arguments)},o.getColumnWidth=function(){this.getSegmentSize("column","Width")},o.getRowHeight=function(){this.getSegmentSize("row","Height")},o.getSegmentSize=function(t,e){var i=t+e,n="outer"+e;if(this._getMeasurement(i,n),!this[i]){var o=this.getFirstItemSize();this[i]=o&&o[n]||this.isotope.size["inner"+e]}},o.getFirstItemSize=function(){var t=this.isotope.filteredItems[0];return t&&t.element&&e(t.element)},o.layout=function(){this.isotope.layout.apply(this.isotope,arguments)},o.getSize=function(){this.isotope.getSize(),this.size=this.isotope.size},n.modes={},n.create=function(t,e){function i(){n.apply(this,arguments)}return(i.prototype=Object.create(o)).constructor=i,e&&(i.options=e),n.modes[i.prototype.namespace=t]=i},n}),function(t,e){"function"==typeof define&&define.amd?define("masonry-layout/masonry",["outlayer/outlayer","get-size/get-size"],e):"object"==typeof module&&module.exports?module.exports=e(require("outlayer"),require("get-size")):t.Masonry=e(t.Outlayer,t.getSize)}(window,function(t,u){var e=t.create("masonry");e.compatOptions.fitWidth="isFitWidth";var i=e.prototype;return i._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},i.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],e=t&&t.element;this.columnWidth=e&&u(e).outerWidth||this.containerWidth}var i=this.columnWidth+=this.gutter,n=this.containerWidth+this.gutter,o=n/i,r=i-n%i;o=Math[r&&r<1?"round":"floor"](o),this.cols=Math.max(o,1)},i.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,e=u(t);this.containerWidth=e&&e.innerWidth},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),o={x:this.columnWidth*n.col,y:n.y},r=n.y+t.size.outerHeight,s=i+n.col,a=n.col;a<s;a++)this.colYs[a]=r;return o},i._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},i._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},i._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},i._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=1<t&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},i._manageStamp=function(t){var e=u(t),i=this._getElementOffset(t),n=this._getOption("originLeft")?i.left:i.right,o=n+e.outerWidth,r=Math.floor(n/this.columnWidth);r=Math.max(0,r);var s=Math.floor(o/this.columnWidth);s-=o%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var a=(this._getOption("originTop")?i.top:i.bottom)+e.outerHeight,l=r;l<=s;l++)this.colYs[l]=Math.max(a,this.colYs[l])},i._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},i._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},i.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/masonry",["../layout-mode","masonry-layout/masonry"],e):"object"==typeof module&&module.exports?module.exports=e(require("../layout-mode"),require("masonry-layout")):e(t.Isotope.LayoutMode,t.Masonry)}(window,function(t,e){"use strict";var i=t.create("masonry"),n=i.prototype,o={_getElementOffset:!0,layout:!0,_getMeasurement:!0};for(var r in e.prototype)o[r]||(n[r]=e.prototype[r]);var s=n.measureColumns;n.measureColumns=function(){this.items=this.isotope.filteredItems,s.call(this)};var a=n._getOption;return n._getOption=function(t){return"fitWidth"==t?void 0!==this.options.isFitWidth?this.options.isFitWidth:this.options.fitWidth:a.apply(this.isotope,arguments)},i}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/fit-rows",["../layout-mode"],e):"object"==typeof exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("fitRows"),i=e.prototype;return i._resetLayout=function(){this.x=0,this.y=0,this.maxY=0,this._getMeasurement("gutter","outerWidth")},i._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth+this.gutter,i=this.isotope.size.innerWidth+this.gutter;0!==this.x&&e+this.x>i&&(this.x=0,this.y=this.maxY);var n={x:this.x,y:this.y};return this.maxY=Math.max(this.maxY,this.y+t.size.outerHeight),this.x+=e,n},i._getContainerSize=function(){return{height:this.maxY}},e}),function(t,e){"function"==typeof define&&define.amd?define("isotope-layout/js/layout-modes/vertical",["../layout-mode"],e):"object"==typeof module&&module.exports?module.exports=e(require("../layout-mode")):e(t.Isotope.LayoutMode)}(window,function(t){"use strict";var e=t.create("vertical",{horizontalAlignment:0}),i=e.prototype;return i._resetLayout=function(){this.y=0},i._getItemLayoutPosition=function(t){t.getSize();var e=(this.isotope.size.innerWidth-t.size.outerWidth)*this.options.horizontalAlignment,i=this.y;return this.y+=t.size.outerHeight,{x:e,y:i}},i._getContainerSize=function(){return{height:this.y}},e}),function(s,a){"function"==typeof define&&define.amd?define(["outlayer/outlayer","get-size/get-size","desandro-matches-selector/matches-selector","fizzy-ui-utils/utils","isotope-layout/js/item","isotope-layout/js/layout-mode","isotope-layout/js/layout-modes/masonry","isotope-layout/js/layout-modes/fit-rows","isotope-layout/js/layout-modes/vertical"],function(t,e,i,n,o,r){return a(s,t,e,i,n,o,r)}):"object"==typeof module&&module.exports?module.exports=a(s,require("outlayer"),require("get-size"),require("desandro-matches-selector"),require("fizzy-ui-utils"),require("isotope-layout/js/item"),require("isotope-layout/js/layout-mode"),require("isotope-layout/js/layout-modes/masonry"),require("isotope-layout/js/layout-modes/fit-rows"),require("isotope-layout/js/layout-modes/vertical")):s.Isotope=a(s,s.Outlayer,s.getSize,s.matchesSelector,s.fizzyUIUtils,s.Isotope.Item,s.Isotope.LayoutMode)}(window,function(t,i,e,n,r,o,s){var a=t.jQuery,u=String.prototype.trim?function(t){return t.trim()}:function(t){return t.replace(/^\s+|\s+$/g,"")},h=i.create("isotope",{layoutMode:"masonry",isJQueryFiltering:!0,sortAscending:!0});h.Item=o,h.LayoutMode=s;var l=h.prototype;l._create=function(){for(var t in this.itemGUID=0,this._sorters={},this._getSorters(),i.prototype._create.call(this),this.modes={},this.filteredItems=this.items,this.sortHistory=["original-order"],s.modes)this._initLayoutMode(t)},l.reloadItems=function(){this.itemGUID=0,i.prototype.reloadItems.call(this)},l._itemize=function(){for(var t=i.prototype._itemize.apply(this,arguments),e=0;e<t.length;e++){t[e].id=this.itemGUID++}return this._updateItemsSortData(t),t},l._initLayoutMode=function(t){var e=s.modes[t],i=this.options[t]||{};this.options[t]=e.options?r.extend(e.options,i):i,this.modes[t]=new e(this)},l.layout=function(){return!this._isLayoutInited&&this._getOption("initLayout")?void this.arrange():void this._layout()},l._layout=function(){var t=this._getIsInstant();this._resetLayout(),this._manageStamps(),this.layoutItems(this.filteredItems,t),this._isLayoutInited=!0},l.arrange=function(t){this.option(t),this._getIsInstant();var e=this._filter(this.items);this.filteredItems=e.matches,this._bindArrangeComplete(),this._isInstant?this._noTransition(this._hideReveal,[e]):this._hideReveal(e),this._sort(),this._layout()},l._init=l.arrange,l._hideReveal=function(t){this.reveal(t.needReveal),this.hide(t.needHide)},l._getIsInstant=function(){var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;return this._isInstant=e},l._bindArrangeComplete=function(){function t(){e&&i&&n&&o.dispatchEvent("arrangeComplete",null,[o.filteredItems])}var e,i,n,o=this;this.once("layoutComplete",function(){e=!0,t()}),this.once("hideComplete",function(){i=!0,t()}),this.once("revealComplete",function(){n=!0,t()})},l._filter=function(t){var e=this.options.filter;e=e||"*";for(var i=[],n=[],o=[],r=this._getFilterTest(e),s=0;s<t.length;s++){var a=t[s];if(!a.isIgnored){var l=r(a);l&&i.push(a),l&&a.isHidden?n.push(a):l||a.isHidden||o.push(a)}}return{matches:i,needReveal:n,needHide:o}},l._getFilterTest=function(e){return a&&this.options.isJQueryFiltering?function(t){return a(t.element).is(e)}:"function"==typeof e?function(t){return e(t.element)}:function(t){return n(t.element,e)}},l.updateSortData=function(t){var e;e=t?(t=r.makeArray(t),this.getItems(t)):this.items,this._getSorters(),this._updateItemsSortData(e)},l._getSorters=function(){var t=this.options.getSortData;for(var e in t){var i=t[e];this._sorters[e]=c(i)}},l._updateItemsSortData=function(t){for(var e=t&&t.length,i=0;e&&i<e;i++){t[i].updateSortData()}};var c=function(t){if("string"!=typeof t)return t;var e,i,n=u(t).split(" "),o=n[0],r=o.match(/^\[(.+)\]$/),s=r&&r[1],a=(i=o,(e=s)?function(t){return t.getAttribute(e)}:function(t){var e=t.querySelector(i);return e&&e.textContent}),l=h.sortDataParsers[n[1]];return l?function(t){return t&&l(a(t))}:function(t){return t&&a(t)}};h.sortDataParsers={parseInt:function(t){return parseInt(t,10)},parseFloat:function(t){return parseFloat(t)}},l._sort=function(){if(this.options.sortBy){var t=r.makeArray(this.options.sortBy);this._getIsSameSortBy(t)||(this.sortHistory=t.concat(this.sortHistory));var e=(s=this.sortHistory,a=this.options.sortAscending,function(t,e){for(var i=0;i<s.length;i++){var n=s[i],o=t.sortData[n],r=e.sortData[n];if(r<o||o<r)return(r<o?1:-1)*((void 0!==a[n]?a[n]:a)?1:-1)}return 0});this.filteredItems.sort(e)}var s,a},l._getIsSameSortBy=function(t){for(var e=0;e<t.length;e++)if(t[e]!=this.sortHistory[e])return!1;return!0},l._mode=function(){var t=this.options.layoutMode,e=this.modes[t];if(!e)throw new Error("No layout mode: "+t);return e.options=this.options[t],e},l._resetLayout=function(){i.prototype._resetLayout.call(this),this._mode()._resetLayout()},l._getItemLayoutPosition=function(t){return this._mode()._getItemLayoutPosition(t)},l._manageStamp=function(t){this._mode()._manageStamp(t)},l._getContainerSize=function(){return this._mode()._getContainerSize()},l.needsResizeLayout=function(){return this._mode().needsResizeLayout()},l.appended=function(t){var e=this.addItems(t);if(e.length){var i=this._filterRevealAdded(e);this.filteredItems=this.filteredItems.concat(i)}},l.prepended=function(t){var e=this._itemize(t);if(e.length){this._resetLayout(),this._manageStamps();var i=this._filterRevealAdded(e);this.layoutItems(this.filteredItems),this.filteredItems=i.concat(this.filteredItems),this.items=e.concat(this.items)}},l._filterRevealAdded=function(t){var e=this._filter(t);return this.hide(e.needHide),this.reveal(e.matches),this.layoutItems(e.matches,!0),e.matches},l.insert=function(t){var e=this.addItems(t);if(e.length){var i,n,o=e.length;for(i=0;i<o;i++)n=e[i],this.element.appendChild(n.element);var r=this._filter(e).matches;for(i=0;i<o;i++)e[i].isLayoutInstant=!0;for(this.arrange(),i=0;i<o;i++)delete e[i].isLayoutInstant;this.reveal(r)}};var f=l.remove;return l.remove=function(t){t=r.makeArray(t);var e=this.getItems(t);f.call(this,t);for(var i=e&&e.length,n=0;i&&n<i;n++){var o=e[n];r.removeFrom(this.filteredItems,o)}},l.shuffle=function(){for(var t=0;t<this.items.length;t++){this.items[t].sortData.random=Math.random()}this.options.sortBy="random",this._sort(),this._layout()},l._noTransition=function(t,e){var i=this.options.transitionDuration;this.options.transitionDuration=0;var n=t.apply(this,e);return this.options.transitionDuration=i,n},l.getFilteredItemElements=function(){return this.filteredItems.map(function(t){return t.element})},h}),$(document).ready(function(){var i=$(".images, masonry").isotope({itemSelector:".image, masonry-item",percentPosition:!0,masonry:{columnWidth:".col-lg-4"}}),e=$(".masonry").isotope({itemSelector:".masonry-item",percentPosition:!0,masonry:{columnWidth:".col-lg-6"}});$(".switchers a").on("click",function(t){$(".switchers li").removeClass("active"),$(this).parent().addClass("active"),t.preventDefault();var e=$(this).attr("data-filter");e="*"==e?e:"."+e,i.isotope({filter:e})}),$(".image-box").fancybox();$(".lazy-load.not-load").slice(0,10).removeClass("not-load");i.isotope(),$("#btn-load").on("click",function(t){t.preventDefault(),$(".lazy-load.not-load").slice(0,4).removeClass("not-load"),i.isotope()}),$("#btn-load-blog").on("click",function(t){t.preventDefault(),$(".lazy-load-blog.not-load").slice(0,4).removeClass("not-load"),e.isotope()}),$("#fa-search").click(function(){$(".wrap, .input").toggleClass("active"),$("input[type='text']").focus()})});var map,marker,infoWindow,center={lat:47.125244,lng:37.515187};function initMap(){map=new google.maps.Map(document.getElementById("map"),{center:center,zoom:16,styles:[{elementType:"geometry",stylers:[{color:"#f5f5f5"}]},{elementType:"labels.icon",stylers:[{visibility:"off"}]},{elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{elementType:"labels.text.stroke",stylers:[{color:"#f5f5f5"}]},{featureType:"administrative.land_parcel",elementType:"labels.text.fill",stylers:[{color:"#bdbdbd"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#ffffff"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#757575"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#dadada"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#616161"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#e5e5e5"}]},{featureType:"transit.station",elementType:"geometry",stylers:[{color:"#eeeeee"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#c9c9c9"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#9e9e9e"}]}]}),marker=new google.maps.Marker({position:center,map:map,title:"Магазин МебельОпт",icon:"favicon.png"}),infoWindow=new google.maps.InfoWindow({content:'<h3 slyle="color:#000">Ждём вас!</h3><br><span>Грушевського, 31</span><br><br><span>Мариуполь, Украина</span>'}),marker.addListener("click",function(){infoWindow.open(map,marker)})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJVdGlsIiwialF1ZXJ5IiwidGhpcyIsIiQiLCIkJCQxIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJkdXJhdGlvbiIsIl90aGlzIiwiY2FsbGVkIiwib25lIiwic2V0VGltZW91dCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiZ2V0VUlEIiwicHJlZml4IiwiTWF0aCIsInJhbmRvbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiZWxlbWVudCIsInNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsImVyciIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiY3NzIiwicGFyc2VGbG9hdCIsInNwbGl0IiwicmVmbG93Iiwib2Zmc2V0SGVpZ2h0IiwidHJpZ2dlciIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJvYmoiLCJub2RlVHlwZSIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsInByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlIiwidmFsdWVUeXBlIiwidG9TdHJpbmciLCJtYXRjaCIsInRvTG93ZXJDYXNlIiwiUmVnRXhwIiwidGVzdCIsIkVycm9yIiwidG9VcHBlckNhc2UiLCJmbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZXZlbnQiLCJzcGVjaWFsIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJ0YXJnZXQiLCJpcyIsImhhbmRsZU9iaiIsImhhbmRsZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsIkJ1dHRvbiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiTkFNRSIsIkRBVEFfS0VZIiwiRVZFTlRfS0VZIiwiREFUQV9BUElfS0VZIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ2xhc3NOYW1lIiwiU2VsZWN0b3IiLCJFdmVudCIsIkNMSUNLX0RBVEFfQVBJIiwiRk9DVVNfQkxVUl9EQVRBX0FQSSIsIl9lbGVtZW50IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcHJvdG8iLCJ0b2dnbGUiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsInJvb3RFbGVtZW50IiwiY2xvc2VzdCIsImlucHV0IiwidHlwZSIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImFjdGl2ZUVsZW1lbnQiLCJyZW1vdmVDbGFzcyIsImhhc0F0dHJpYnV0ZSIsImZvY3VzIiwic2V0QXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJkaXNwb3NlIiwicmVtb3ZlRGF0YSIsIl9qUXVlcnlJbnRlcmZhY2UiLCJlYWNoIiwiZGF0YSIsImdldCIsIm9uIiwicHJldmVudERlZmF1bHQiLCJidXR0b24iLCJoYXNDbGFzcyIsIm5vQ29uZmxpY3QiLCJDYXJvdXNlbCIsIl9vYmplY3RTcHJlYWQiLCJzb3VyY2UiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNvbmNhdCIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCJEZWZhdWx0IiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSEVORCIsIkxPQURfREFUQV9BUEkiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIm5leHQiLCJfc2xpZGUiLCJuZXh0V2hlblZpc2libGUiLCJoaWRkZW4iLCJwcmV2IiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJiaW5kIiwidG8iLCJpbmRleCIsImFjdGl2ZUluZGV4IiwiX2dldEl0ZW1JbmRleCIsImRpcmVjdGlvbiIsIm9mZiIsIl90aGlzMiIsIl9rZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xlYXJUaW1lb3V0IiwidGFnTmFtZSIsIndoaWNoIiwicGFyZW50Tm9kZSIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImluZGV4T2YiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiaXNOZXh0RGlyZWN0aW9uIiwiaXNQcmV2RGlyZWN0aW9uIiwibGFzdEl0ZW1JbmRleCIsIml0ZW1JbmRleCIsIl90cmlnZ2VyU2xpZGVFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsInNsaWRlRXZlbnQiLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJpbmRpY2F0b3JzIiwibmV4dEluZGljYXRvciIsImNoaWxkcmVuIiwiYWRkQ2xhc3MiLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiX3RoaXMzIiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwiaXNEZWZhdWx0UHJldmVudGVkIiwic2xpZEV2ZW50IiwiYWN0aW9uIiwiVHlwZUVycm9yIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJzbGlkZUluZGV4Iiwid2luZG93IiwiY2Fyb3VzZWxzIiwibGVuIiwiJGNhcm91c2VsIiwiQ29sbGFwc2UiLCJEaW1lbnNpb24iLCJwYXJlbnQiLCJTSE9XIiwiU0hPV04iLCJISURFIiwiSElEREVOIiwiX2lzVHJhbnNpdGlvbmluZyIsIl90cmlnZ2VyQXJyYXkiLCJtYWtlQXJyYXkiLCJpZCIsInRvZ2dsZUxpc3QiLCJlbGVtIiwiZmlsdGVyRWxlbWVudCIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsInB1c2giLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJoaWRlIiwic2hvdyIsImFjdGl2ZXMiLCJhY3RpdmVzRGF0YSIsIm5vdCIsInN0YXJ0RXZlbnQiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic3R5bGUiLCJhdHRyIiwic2V0VHJhbnNpdGlvbmluZyIsInNjcm9sbFNpemUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJqcXVlcnkiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdGhpcyIsImN1cnJlbnRUYXJnZXQiLCIkdHJpZ2dlciIsInNlbGVjdG9ycyIsIiR0YXJnZXQiLCJEcm9wZG93biIsIlBvcHBlciIsIlJFR0VYUF9LRVlET1dOIiwiQXR0YWNobWVudE1hcCIsIkFSUk9XX1VQX0tFWUNPREUiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIm9mZnNldCIsImZsaXAiLCJib3VuZGFyeSIsInJlZmVyZW5jZSIsImRpc3BsYXkiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJib2R5Iiwibm9vcCIsImRlc3Ryb3kiLCJ1cGRhdGUiLCJzY2hlZHVsZVVwZGF0ZSIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnN0cnVjdG9yIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIm9mZnNldENvbmYiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwiZW5hYmxlZCIsInByZXZlbnRPdmVyZmxvdyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYXBwbHlTdHlsZSIsInRvZ2dsZXMiLCJjb250ZXh0IiwiY2xpY2tFdmVudCIsImRyb3Bkb3duTWVudSIsImhpZGVFdmVudCIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpdGVtcyIsImUiLCJUb29sdGlwIiwiQ0xBU1NfUFJFRklYIiwiQlNDTFNfUFJFRklYX1JFR0VYIiwiSG92ZXJTdGF0ZSIsIlRyaWdnZXIiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsImNvbnRhaW5lciIsImZhbGxiYWNrUGxhY2VtZW50IiwiSU5TRVJURUQiLCJGT0NVU0lOIiwiRk9DVVNPVVQiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwicmVtb3ZlIiwiaXNXaXRoQ29udGVudCIsImlzSW5UaGVEb20iLCJvd25lckRvY3VtZW50IiwidGlwSWQiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiZmluZCIsImFwcGVuZFRvIiwiYmVoYXZpb3IiLCJhcnJvdyIsIm9uQ3JlYXRlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwib25VcGRhdGUiLCJjb21wbGV0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJjYWxsYmFjayIsInJlbW92ZUNoaWxkIiwiX2NsZWFuVGlwQ2xhc3MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiJGVsZW1lbnQiLCJjb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0ZXh0IiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwidGl0bGVUeXBlIiwiJHRpcCIsInRhYkNsYXNzIiwiam9pbiIsInBvcHBlckRhdGEiLCJwb3BwZXJJbnN0YW5jZSIsImluc3RhbmNlIiwicG9wcGVyIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwidCIsImpRdWVyeUJyaWRnZXQiLCJzIiwiYSIsIm9wdGlvbiIsImlzUGxhaW5PYmplY3QiLCJvcHRpb25zIiwiZXh0ZW5kIiwibyIsIm4iLCJfaW5pdCIsInUiLCJoIiwiZCIsImNoYXJBdCIsImwiLCJyIiwiYnJpZGdldCIsIkFycmF5IiwiY29uc29sZSIsImVycm9yIiwiRXZFbWl0dGVyIiwiX2V2ZW50cyIsIm9uY2UiLCJfb25jZUV2ZW50cyIsInNwbGljZSIsImVtaXRFdmVudCIsImFsbE9mZiIsImdldFNpemUiLCJpc05hTiIsImdldENvbXB1dGVkU3R5bGUiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJwYWRkaW5nIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImJveFNpemluZyIsImFwcGVuZENoaWxkIiwicm91bmQiLCJpc0JveFNpemVPdXRlciIsImhlaWdodCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm9mZnNldFdpZHRoIiwiaXNCb3JkZXJCb3giLCJmIiwiYyIsIm0iLCJwIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJnIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwidiIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsIl8iLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJSaWdodFdpZHRoIiwieiIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJJIiwieCIsIlMiLCJtYXRjaGVzU2VsZWN0b3IiLCJFbGVtZW50IiwibWF0Y2hlcyIsImZpenp5VUlVdGlscyIsIm1vZHVsbyIsImlzQXJyYXkiLCJyZW1vdmVGcm9tIiwiZ2V0UGFyZW50IiwiZ2V0UXVlcnlFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJmaWx0ZXJGaW5kRWxlbWVudHMiLCJIVE1MRWxlbWVudCIsImRlYm91bmNlTWV0aG9kIiwiZG9jUmVhZHkiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvRGFzaGVkIiwicmVwbGFjZSIsImh0bWxJbml0IiwiSlNPTiIsInBhcnNlIiwiY2xhc3NOYW1lIiwiT3V0bGF5ZXIiLCJJdGVtIiwibGF5b3V0IiwicG9zaXRpb24iLCJfY3JlYXRlIiwidHJhbnNpdGlvbiIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uRGVsYXkiLCJfdHJhbnNuIiwiaW5nUHJvcGVydGllcyIsImNsZWFuIiwib25FbmQiLCJzaXplIiwiZ2V0UG9zaXRpb24iLCJfZ2V0T3B0aW9uIiwibGF5b3V0UG9zaXRpb24iLCJnZXRYVmFsdWUiLCJnZXRZVmFsdWUiLCJwZXJjZW50UG9zaXRpb24iLCJfdHJhbnNpdGlvblRvIiwic2V0UG9zaXRpb24iLCJnZXRUcmFuc2xhdGUiLCJvblRyYW5zaXRpb25FbmQiLCJpc0NsZWFuaW5nIiwiZ29UbyIsIm1vdmVUbyIsIl9ub25UcmFuc2l0aW9uIiwiX3JlbW92ZVN0eWxlcyIsImVuYWJsZVRyYW5zaXRpb24iLCJzdGFnZ2VyRGVsYXkiLCJvbndlYmtpdFRyYW5zaXRpb25FbmQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbm90cmFuc2l0aW9uZW5kIiwiLXdlYmtpdC10cmFuc2Zvcm0iLCJwcm9wZXJ0eU5hbWUiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3RhZ2dlciIsInJlbW92ZUVsZW0iLCJyZXZlYWwiLCJpc0hpZGRlbiIsImdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkiLCJvblJldmVhbFRyYW5zaXRpb25FbmQiLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsIm9wYWNpdHkiLCJvbkhpZGVUcmFuc2l0aW9uRW5kIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwiZGVmYXVsdHMiLCJvdXRsYXllckdVSUQiLCJuYW1lc3BhY2UiLCJjb250YWluZXJTdHlsZSIsImluaXRMYXlvdXQiLCJvcmlnaW5MZWZ0Iiwib3JpZ2luVG9wIiwicmVzaXplIiwicmVzaXplQ29udGFpbmVyIiwiY29tcGF0T3B0aW9ucyIsImhvcml6b250YWwiLCJsYXlvdXRJbnN0YW50IiwicmVsb2FkSXRlbXMiLCJzdGFtcHMiLCJzdGFtcCIsImJpbmRSZXNpemUiLCJfaXRlbWl6ZSIsIl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzIiwiaXRlbVNlbGVjdG9yIiwiZ2V0SXRlbUVsZW1lbnRzIiwibWFwIiwiX3Jlc2V0TGF5b3V0IiwiX21hbmFnZVN0YW1wcyIsIl9pc0xheW91dEluaXRlZCIsImxheW91dEl0ZW1zIiwiX2dldE1lYXN1cmVtZW50IiwiX2dldEl0ZW1zRm9yTGF5b3V0IiwiX2xheW91dEl0ZW1zIiwiX3Bvc3RMYXlvdXQiLCJpc0lnbm9yZWQiLCJfZW1pdENvbXBsZXRlT25JdGVtcyIsIl9nZXRJdGVtTGF5b3V0UG9zaXRpb24iLCJpdGVtIiwiaXNJbnN0YW50IiwiaXNMYXlvdXRJbnN0YW50IiwiX3Byb2Nlc3NMYXlvdXRRdWV1ZSIsInVwZGF0ZVN0YWdnZXIiLCJfcG9zaXRpb25JdGVtIiwiX2dldENvbnRhaW5lclNpemUiLCJfc2V0Q29udGFpbmVyTWVhc3VyZSIsIm1heCIsImRpc3BhdGNoRXZlbnQiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwiaXNSZXNpemVCb3VuZCIsInVuYmluZFJlc2l6ZSIsIm9ucmVzaXplIiwibmVlZHNSZXNpemVMYXlvdXQiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwicmV2ZWFsSXRlbUVsZW1lbnRzIiwiZ2V0SXRlbXMiLCJoaWRlSXRlbUVsZW1lbnRzIiwibXMiLCJJc290b3BlIiwiaXRlbUdVSUQiLCJzb3J0RGF0YSIsInVwZGF0ZVNvcnREYXRhIiwiZ2V0U29ydERhdGEiLCJfc29ydGVycyIsIkxheW91dE1vZGUiLCJpc290b3BlIiwiZmlsdGVyZWRJdGVtcyIsIm5lZWRzVmVydGljYWxSZXNpemVMYXlvdXQiLCJnZXRDb2x1bW5XaWR0aCIsImdldFNlZ21lbnRTaXplIiwiZ2V0Um93SGVpZ2h0IiwiZ2V0Rmlyc3RJdGVtU2l6ZSIsIm1vZGVzIiwiTWFzb25yeSIsImZpdFdpZHRoIiwibWVhc3VyZUNvbHVtbnMiLCJjb2xZcyIsImNvbHMiLCJtYXhZIiwiaG9yaXpvbnRhbENvbEluZGV4IiwiZ2V0Q29udGFpbmVyV2lkdGgiLCJjb2x1bW5XaWR0aCIsImNvbnRhaW5lcldpZHRoIiwiZ3V0dGVyIiwibWluIiwiaG9yaXpvbnRhbE9yZGVyIiwiY29sIiwiX2dldFRvcENvbFBvc2l0aW9uIiwiX2dldFRvcENvbEdyb3VwIiwiX2dldENvbEdyb3VwWSIsIl9nZXRIb3Jpem9udGFsQ29sUG9zaXRpb24iLCJmbG9vciIsIl9nZXRDb250YWluZXJGaXRXaWR0aCIsImlzRml0V2lkdGgiLCJob3Jpem9udGFsQWxpZ25tZW50IiwiU3RyaW5nIiwidHJpbSIsImxheW91dE1vZGUiLCJpc0pRdWVyeUZpbHRlcmluZyIsInNvcnRBc2NlbmRpbmciLCJfZ2V0U29ydGVycyIsInNvcnRIaXN0b3J5IiwiX2luaXRMYXlvdXRNb2RlIiwiX3VwZGF0ZUl0ZW1zU29ydERhdGEiLCJhcnJhbmdlIiwiX2xheW91dCIsIl9nZXRJc0luc3RhbnQiLCJfZmlsdGVyIiwiX2JpbmRBcnJhbmdlQ29tcGxldGUiLCJfaXNJbnN0YW50IiwiX25vVHJhbnNpdGlvbiIsIl9oaWRlUmV2ZWFsIiwiX3NvcnQiLCJuZWVkUmV2ZWFsIiwibmVlZEhpZGUiLCJfZ2V0RmlsdGVyVGVzdCIsInRleHRDb250ZW50Iiwic29ydERhdGFQYXJzZXJzIiwicGFyc2VJbnQiLCJzb3J0QnkiLCJfZ2V0SXNTYW1lU29ydEJ5Iiwic29ydCIsIl9tb2RlIiwiX2ZpbHRlclJldmVhbEFkZGVkIiwiaW5zZXJ0Iiwic2h1ZmZsZSIsImdldEZpbHRlcmVkSXRlbUVsZW1lbnRzIiwicmVhZHkiLCJtYXNvbnJ5IiwiaXNvdG9wZTIiLCJmYW5jeWJveCIsIm1hcmtlciIsImluZm9XaW5kb3ciLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJpbml0TWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsInpvb20iLCJzdHlsZXMiLCJlbGVtZW50VHlwZSIsInN0eWxlcnMiLCJjb2xvciIsInZpc2liaWxpdHkiLCJmZWF0dXJlVHlwZSIsIk1hcmtlciIsImljb24iLCJJbmZvV2luZG93IiwiYWRkTGlzdGVuZXIiLCJvcGVuIl0sIm1hcHBpbmdzIjoiQ0FBQyxTQUFVQSxFQUFRQyxHQUNFLGlCQUFaQyxTQUEwQyxvQkFBWEMsT0FBeUJBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsV0FDOUUsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUFNRCxPQUFPLENBQUMsVUFBV0osR0FDL0RELEVBQU9PLEtBQU9OLEVBQVFELEVBQU9RLFFBSGhDLENBSUVDLEtBQU0sU0FBV0MsR0FBSyxhQXdJdEIsT0E3SFcsU0FBVUMsR0FNbkIsSUFBSUMsRUFBaUIsZ0JBc0JyQixTQUFTQyxFQUFzQkMsR0FDN0IsSUFBSUMsRUFBUU4sS0FFUk8sR0FBUyxFQVNiLE9BUkFMLEVBQUtGLE1BQU1RLElBQUlWLEVBQUtLLGVBQWdCLFdBQ2xDSSxHQUFTLElBRVhFLFdBQVcsV0FDSkYsR0FDSFQsRUFBS1kscUJBQXFCSixJQUUzQkQsR0FDSUwsS0FjVCxJQUFJRixFQUFPLENBQ1RLLGVBQWdCLGtCQUNoQlEsT0FBUSxTQUFnQkMsR0FDdEIsS0FFRUEsTUFwRFEsSUFvREtDLEtBQUtDLFVBQ1hDLFNBQVNDLGVBQWVKLEtBRWpDLE9BQU9BLEdBRVRLLHVCQUF3QixTQUFnQ0MsR0FDdEQsSUFBSUMsRUFBV0QsRUFBUUUsYUFBYSxlQUUvQkQsR0FBeUIsTUFBYkEsSUFDZkEsRUFBV0QsRUFBUUUsYUFBYSxTQUFXLElBRzdDLElBQ0UsT0FBT0wsU0FBU00sY0FBY0YsR0FBWUEsRUFBVyxLQUNyRCxNQUFPRyxHQUNQLE9BQU8sT0FHWEMsaUNBQWtDLFNBQTBDTCxHQUMxRSxJQUFLQSxFQUNILE9BQU8sRUFJVCxJQUFJTSxFQUFxQnRCLEVBQUtnQixHQUFTTyxJQUFJLHVCQUczQyxPQUY4QkMsV0FBV0YsSUFPekNBLEVBQXFCQSxFQUFtQkcsTUFBTSxLQUFLLEdBbkZ6QixJQW9GbkJELFdBQVdGLElBTFQsR0FPWEksT0FBUSxTQUFnQlYsR0FDdEIsT0FBT0EsRUFBUVcsY0FFakJuQixxQkFBc0IsU0FBOEJRLEdBQ2xEaEIsRUFBS2dCLEdBQVNZLFFBQVEzQixJQUd4QjRCLHNCQUF1QixXQUNyQixPQUFPQyxRQUFRN0IsSUFFakI4QixVQUFXLFNBQW1CQyxHQUM1QixPQUFRQSxFQUFJLElBQU1BLEdBQUtDLFVBRXpCQyxnQkFBaUIsU0FBeUJDLEVBQWVDLEVBQVFDLEdBQy9ELElBQUssSUFBSUMsS0FBWUQsRUFDbkIsR0FBSUUsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0wsRUFBYUMsR0FBVyxDQUMvRCxJQUFJSyxFQUFnQk4sRUFBWUMsR0FDNUJNLEVBQVFSLEVBQU9FLEdBQ2ZPLEVBQVlELEdBQVNoRCxFQUFLbUMsVUFBVWEsR0FBUyxXQXRHekNaLEVBc0c0RFksRUFyR25FLEdBQUdFLFNBQVNKLEtBQUtWLEdBQUtlLE1BQU0sZUFBZSxHQUFHQyxlQXVHL0MsSUFBSyxJQUFJQyxPQUFPTixHQUFlTyxLQUFLTCxHQUNsQyxNQUFNLElBQUlNLE1BQU1oQixFQUFjaUIsY0FBZ0IsYUFBc0JkLEVBQVcsb0JBQXdCTyxFQUFZLHdCQUFtQ0YsRUFBZ0IsTUF6R2hMLElBQWdCWCxJQWdIaEIsT0E5RUVoQyxFQUFLcUQsR0FBR0MscUJBQXVCcEQsRUFDL0JGLEVBQUt1RCxNQUFNQyxRQUFRNUQsRUFBS0ssZ0JBOUJqQixDQUNMd0QsU0FBVXhELEVBQ1Z5RCxhQUFjekQsRUFDZDBELE9BQVEsU0FBZ0JKLEdBQ3RCLEdBQUl2RCxFQUFLdUQsRUFBTUssUUFBUUMsR0FBRy9ELE1BQ3hCLE9BQU95RCxFQUFNTyxVQUFVQyxRQUFRQyxNQUFNbEUsS0FBTW1FLGFBc0c1Q3JFLEVBMUhFLENBVFhHLEVBQUlBLEdBQUtBLEVBQUUwQyxlQUFlLFdBQWExQyxFQUFXLFFBQUlBLEtBMkl2RCxTQUFVVixFQUFRQyxHQUNFLGlCQUFaQyxTQUEwQyxvQkFBWEMsT0FBeUJBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsV0FDOUUsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUFNRCxPQUFPLENBQUMsVUFBV0osR0FDL0RELEVBQU82RSxPQUFTNUUsRUFBUUQsRUFBT1EsUUFIbEMsQ0FJRUMsS0FBTSxTQUFXQyxHQUFLLGFBSXRCLFNBQVNvRSxFQUFrQlAsRUFBUVEsR0FDakMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUssQ0FDckMsSUFBSUUsRUFBYUgsRUFBTUMsR0FDdkJFLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqRG5DLE9BQU9vQyxlQUFlZixFQUFRVyxFQUFXSyxJQUFLTCxJQWlCbEQsSUFBdUJ2RSxFQU1qQjZFLEVBRUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQUFBLEVBQUFBLEVBS0FDLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEVBT0FDLEVBV0FsQixFQTBITixPQXRMQW5FLEVBQUlBLEdBQUtBLEVBQUUwQyxlQUFlLFdBQWExQyxFQUFXLFFBQUlBLEVBK0JoRDhFLEVBQU8sU0FHUEUsRUFBWSxLQURaRCxFQUFXLGFBRVhFLEVBQWUsWUFDZkMsR0FYaUJqRixFQTJKckJELEdBaEo4QnNELEdBQUd3QixHQUM3QkssRUFDTSxTQUROQSxFQUVNLE1BR05DLEVBQ2tCLDBCQURsQkEsRUFFVywwQkFGWEEsRUFHSyxRQUhMQSxFQUlNLFVBSk5BLEVBS00sT0FFTkMsRUFBUSxDQUNWQyxlQUFnQixRQUFVTixFQUFZQyxFQUN0Q00scUJBZEVKLEVBR0ssU0FXd0JILEVBQVlDLEVBQWUsUUFBZ0JELEVBQVlDLEdBU3BGZCxFQUVKLFdBQ0UsU0FBU0EsRUFBT2xELEdBQ2RsQixLQUFLeUYsU0FBV3ZFLEVBSWxCLElBeERrQndFLEVBQWFDLEVBQVlDLEVBd0R2Q0MsRUFBU3pCLEVBQU8xQixVQTJFcEIsT0F4RUFtRCxFQUFPQyxPQUFTLFdBQ2QsSUFBSUMsR0FBcUIsRUFDckJDLEdBQWlCLEVBQ2pCQyxFQUFjL0YsRUFBS0YsS0FBS3lGLFVBQVVTLFFBQVFiLEdBQXNCLEdBRXBFLEdBQUlZLEVBQWEsQ0FDZixJQUFJRSxFQUFRbkcsS0FBS3lGLFNBQVNwRSxjQUFjZ0UsR0FFeEMsR0FBSWMsRUFBTyxDQUNULEdBQW1CLFVBQWZBLEVBQU1DLEtBQ1IsR0FBSUQsRUFBTUUsU0FBV3JHLEtBQUt5RixTQUFTYSxVQUFVQyxTQUFTbkIsR0FDcERXLEdBQXFCLE1BQ2hCLENBQ0wsSUFBSVMsRUFBZ0JQLEVBQVk1RSxjQUFjZ0UsR0FFMUNtQixHQUNGdEcsRUFBS3NHLEdBQWVDLFlBQVlyQixHQUt0QyxHQUFJVyxFQUFvQixDQUN0QixHQUFJSSxFQUFNTyxhQUFhLGFBQWVULEVBQVlTLGFBQWEsYUFBZVAsRUFBTUcsVUFBVUMsU0FBUyxhQUFlTixFQUFZSyxVQUFVQyxTQUFTLFlBQ25KLE9BR0ZKLEVBQU1FLFNBQVdyRyxLQUFLeUYsU0FBU2EsVUFBVUMsU0FBU25CLEdBQ2xEbEYsRUFBS2lHLEdBQU9yRSxRQUFRLFVBR3RCcUUsRUFBTVEsUUFDTlgsR0FBaUIsR0FJakJBLEdBQ0ZoRyxLQUFLeUYsU0FBU21CLGFBQWEsZ0JBQWlCNUcsS0FBS3lGLFNBQVNhLFVBQVVDLFNBQVNuQixJQUczRVcsR0FDRjdGLEVBQUtGLEtBQUt5RixVQUFVb0IsWUFBWXpCLElBSXBDUyxFQUFPaUIsUUFBVSxXQUNmNUcsRUFBSzZHLFdBQVcvRyxLQUFLeUYsU0FBVVQsR0FDL0JoRixLQUFLeUYsU0FBVyxNQUlsQnJCLEVBQU80QyxpQkFBbUIsU0FBMEIxRSxHQUNsRCxPQUFPdEMsS0FBS2lILEtBQUssV0FDZixJQUFJQyxFQUFPaEgsRUFBS0YsTUFBTWtILEtBQUtsQyxHQUV0QmtDLElBQ0hBLEVBQU8sSUFBSTlDLEVBQU9wRSxNQUNsQkUsRUFBS0YsTUFBTWtILEtBQUtsQyxFQUFVa0MsSUFHYixXQUFYNUUsR0FDRjRFLEVBQUs1RSxRQXZIT29ELEVBNEhMdEIsRUE1SDhCd0IsRUE0SGhCLENBQUMsQ0FDMUJkLElBQUssVUFDTHFDLElBQUssV0FDSCxNQTNHUSxZQXBCbUJ4QixFQTRIVixPQTNIUHRCLEVBQWtCcUIsRUFBWWhELFVBQVdpRCxHQUNyREMsR0FBYXZCLEVBQWtCcUIsRUFBYUUsR0FpSXZDeEIsRUFqRlQsR0EwRkFsRSxFQUFLYSxVQUFVcUcsR0FBRzlCLEVBQU1DLGVBQWdCRixFQUE2QixTQUFVNUIsR0FDN0VBLEVBQU00RCxpQkFDTixJQUFJQyxFQUFTN0QsRUFBTUssT0FFZDVELEVBQUtvSCxHQUFRQyxTQUFTbkMsS0FDekJrQyxFQUFTcEgsRUFBS29ILEdBQVFwQixRQUFRYixJQUdoQ2pCLEVBQU80QyxpQkFBaUJwRSxLQUFLMUMsRUFBS29ILEdBQVMsWUFDMUNGLEdBQUc5QixFQUFNRSxvQkFBcUJILEVBQTZCLFNBQVU1QixHQUN0RSxJQUFJNkQsRUFBU3BILEVBQUt1RCxFQUFNSyxRQUFRb0MsUUFBUWIsR0FBaUIsR0FDekRuRixFQUFLb0gsR0FBUVQsWUFBWXpCLEVBQWlCLGVBQWVoQyxLQUFLSyxFQUFNMkMsU0FRdEVsRyxFQUFLcUQsR0FBR3dCLEdBQVFYLEVBQU80QyxpQkFDdkI5RyxFQUFLcUQsR0FBR3dCLEdBQU1XLFlBQWN0QixFQUU1QmxFLEVBQUtxRCxHQUFHd0IsR0FBTXlDLFdBQWEsV0FFekIsT0FEQXRILEVBQUtxRCxHQUFHd0IsR0FBUUksRUFDVGYsRUFBTzRDLGtCQUdUNUMsSUFPVixTQUFVN0UsRUFBUUMsR0FDRSxpQkFBWkMsU0FBMEMsb0JBQVhDLE9BQXlCQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQVdBLFFBQVEsY0FDakcsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUFNRCxPQUFPLENBQUMsU0FBVSxhQUFjSixHQUM1RUQsRUFBT2tJLFNBQVdqSSxFQUFRRCxFQUFPUSxPQUFPUixFQUFPTyxNQUhsRCxDQUlFRSxLQUFNLFNBQVdDLEVBQUVILEdBQVEsYUFLM0IsU0FBU3VFLEVBQWtCUCxFQUFRUSxHQUNqQyxJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUNyQyxJQUFJRSxFQUFhSCxFQUFNQyxHQUN2QkUsRUFBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUNqREQsRUFBV0UsY0FBZSxFQUN0QixVQUFXRixJQUFZQSxFQUFXRyxVQUFXLEdBQ2pEbkMsT0FBT29DLGVBQWVmLEVBQVFXLEVBQVdLLElBQUtMLElBeUJsRCxTQUFTaUQsRUFBYzVELEdBQ3JCLElBQUssSUFBSVMsRUFBSSxFQUFHQSxFQUFJSixVQUFVSyxPQUFRRCxJQUFLLENBQ3pDLElBQUlvRCxFQUF5QixNQUFoQnhELFVBQVVJLEdBQWFKLFVBQVVJLEdBQUssR0FDL0NxRCxFQUFVbkYsT0FBT29GLEtBQUtGLEdBRWtCLG1CQUFqQ2xGLE9BQU9xRix3QkFDaEJGLEVBQVVBLEVBQVFHLE9BQU90RixPQUFPcUYsc0JBQXNCSCxHQUFRSyxPQUFPLFNBQVVDLEdBQzdFLE9BQU94RixPQUFPeUYseUJBQXlCUCxFQUFRTSxHQUFLdkQsZUFJeERrRCxFQUFRTyxRQUFRLFNBQVVyRCxHQTFCOUIsSUFBeUI1QyxFQUFLNEMsRUFBS2hDLEVBQVZaLEVBMkJINEIsRUEzQmFoQixFQTJCQTZFLEVBM0JMN0MsRUEyQkFBLEdBMUJ4QkEsS0FBTzVDLEVBQ1RPLE9BQU9vQyxlQUFlM0MsRUFBSzRDLEVBQUssQ0FDOUJoQyxNQUFPQSxFQUNQNEIsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLFVBQVUsSUFHWjFDLEVBQUk0QyxHQUFPaEMsSUFzQmIsT0FBT2dCLEVBVVQsSUFBeUI1RCxFQU1uQjZFLEVBRUFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBT0FpRCxFQU9BQyxFQU9BQyxFQUFBQSxFQUFBQSxFQUFBQSxFQU1BaEQsRUFVQUYsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFVQUMsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFnQkFvQyxFQXVhTixPQTdpQkF4SCxFQUFJQSxHQUFLQSxFQUFFMEMsZUFBZSxXQUFhMUMsRUFBVyxRQUFJQSxFQUN0REgsRUFBT0EsR0FBUUEsRUFBSzZDLGVBQWUsV0FBYTdDLEVBQWMsUUFBSUEsRUFpRTVEaUYsRUFBTyxXQUdQRSxFQUFZLEtBRFpELEVBQVcsZUFFWEUsRUFBZSxZQUNmQyxHQVhtQmpGLEVBK2V2QkQsR0FwZThCc0QsR0FBR3dCLEdBTzdCcUQsRUFBVSxDQUNaRyxTQUFVLElBQ1ZDLFVBQVUsRUFDVkMsT0FBTyxFQUNQQyxNQUFPLFFBQ1BDLE1BQU0sR0FFSk4sRUFBYyxDQUNoQkUsU0FBVSxtQkFDVkMsU0FBVSxVQUNWQyxNQUFPLG1CQUNQQyxNQUFPLG1CQUNQQyxLQUFNLFdBRUpMLEVBQ0ksT0FESkEsRUFFSSxPQUZKQSxFQUdJLE9BSEpBLEVBSUssUUFFTGhELEVBQVEsQ0FDVnNELE1BQU8sUUFBVTNELEVBQ2pCNEQsS0FBTSxPQUFTNUQsRUFDZjZELFFBQVMsVUFBWTdELEVBQ3JCOEQsV0FBWSxhQUFlOUQsRUFDM0IrRCxXQUFZLGFBQWUvRCxFQUMzQmdFLFNBQVUsV0FBYWhFLEVBQ3ZCaUUsY0FBZSxPQUFTakUsRUFBWUMsRUFDcENLLGVBQWdCLFFBQVVOLEVBQVlDLEdBRXBDRSxFQUNRLFdBRFJBLEVBRU0sU0FGTkEsRUFHSyxRQUhMQSxFQUlLLHNCQUpMQSxFQUtJLHFCQUxKQSxFQU1JLHFCQU5KQSxFQU9JLHFCQUdKQyxFQUNNLFVBRE5BLEVBRVcsd0JBRlhBLEVBR0ksaUJBSEpBLEVBSVMsMkNBSlRBLEVBS1UsdUJBTFZBLEVBTVUsZ0NBTlZBLEVBT1MseUJBU1RvQyxFQUVKLFdBQ0UsU0FBU0EsRUFBU3ZHLEVBQVNvQixHQUN6QnRDLEtBQUttSixPQUFTLEtBQ2RuSixLQUFLb0osVUFBWSxLQUNqQnBKLEtBQUtxSixlQUFpQixLQUN0QnJKLEtBQUtzSixXQUFZLEVBQ2pCdEosS0FBS3VKLFlBQWEsRUFDbEJ2SixLQUFLd0osYUFBZSxLQUNwQnhKLEtBQUt5SixRQUFVekosS0FBSzBKLFdBQVdwSCxHQUMvQnRDLEtBQUt5RixTQUFXdkYsRUFBS2dCLEdBQVMsR0FDOUJsQixLQUFLMkosbUJBQXFCM0osS0FBS3lGLFNBQVNwRSxjQUFjZ0UsR0FFdERyRixLQUFLNEoscUJBSVAsSUEzSWtCbEUsRUFBYUMsRUFBWUMsRUEySXZDQyxFQUFTNEIsRUFBUy9FLFVBaVh0QixPQTlXQW1ELEVBQU9nRSxLQUFPLFdBQ1A3SixLQUFLdUosWUFDUnZKLEtBQUs4SixPQUFPeEIsSUFJaEJ6QyxFQUFPa0UsZ0JBQWtCLFlBR2xCaEosU0FBU2lKLFFBQVU5SixFQUFLRixLQUFLeUYsVUFBVTFCLEdBQUcsYUFBeUQsV0FBMUM3RCxFQUFLRixLQUFLeUYsVUFBVWhFLElBQUksZUFDcEZ6QixLQUFLNkosUUFJVGhFLEVBQU9vRSxLQUFPLFdBQ1BqSyxLQUFLdUosWUFDUnZKLEtBQUs4SixPQUFPeEIsSUFJaEJ6QyxFQUFPNkMsTUFBUSxTQUFlakYsR0FDdkJBLElBQ0h6RCxLQUFLc0osV0FBWSxHQUdmdEosS0FBS3lGLFNBQVNwRSxjQUFjZ0UsS0FDOUJ2RixFQUFLWSxxQkFBcUJWLEtBQUt5RixVQUMvQnpGLEtBQUtrSyxPQUFNLElBR2JDLGNBQWNuSyxLQUFLb0osV0FDbkJwSixLQUFLb0osVUFBWSxNQUduQnZELEVBQU9xRSxNQUFRLFNBQWV6RyxHQUN2QkEsSUFDSHpELEtBQUtzSixXQUFZLEdBR2Z0SixLQUFLb0osWUFDUGUsY0FBY25LLEtBQUtvSixXQUNuQnBKLEtBQUtvSixVQUFZLE1BR2ZwSixLQUFLeUosUUFBUWxCLFdBQWF2SSxLQUFLc0osWUFDakN0SixLQUFLb0osVUFBWWdCLGFBQWFySixTQUFTc0osZ0JBQWtCckssS0FBSytKLGdCQUFrQi9KLEtBQUs2SixNQUFNUyxLQUFLdEssTUFBT0EsS0FBS3lKLFFBQVFsQixZQUl4SDFDLEVBQU8wRSxHQUFLLFNBQVlDLEdBQ3RCLElBQUlsSyxFQUFRTixLQUVaQSxLQUFLcUosZUFBaUJySixLQUFLeUYsU0FBU3BFLGNBQWNnRSxHQUVsRCxJQUFJb0YsRUFBY3pLLEtBQUswSyxjQUFjMUssS0FBS3FKLGdCQUUxQyxLQUFJbUIsRUFBUXhLLEtBQUttSixPQUFPM0UsT0FBUyxHQUFLZ0csRUFBUSxHQUk5QyxHQUFJeEssS0FBS3VKLFdBQ1BySixFQUFLRixLQUFLeUYsVUFBVWpGLElBQUk4RSxFQUFNdUQsS0FBTSxXQUNsQyxPQUFPdkksRUFBTWlLLEdBQUdDLFNBRnBCLENBT0EsR0FBSUMsSUFBZ0JELEVBR2xCLE9BRkF4SyxLQUFLMEksYUFDTDFJLEtBQUtrSyxRQUlQLElBQUlTLEVBQW9CRixFQUFSRCxFQUFzQmxDLEVBQWlCQSxFQUV2RHRJLEtBQUs4SixPQUFPYSxFQUFXM0ssS0FBS21KLE9BQU9xQixNQUdyQzNFLEVBQU9pQixRQUFVLFdBQ2Y1RyxFQUFLRixLQUFLeUYsVUFBVW1GLElBQUkzRixHQUN4Qi9FLEVBQUs2RyxXQUFXL0csS0FBS3lGLFNBQVVULEdBQy9CaEYsS0FBS21KLE9BQVMsS0FDZG5KLEtBQUt5SixRQUFVLEtBQ2Z6SixLQUFLeUYsU0FBVyxLQUNoQnpGLEtBQUtvSixVQUFZLEtBQ2pCcEosS0FBS3NKLFVBQVksS0FDakJ0SixLQUFLdUosV0FBYSxLQUNsQnZKLEtBQUtxSixlQUFpQixLQUN0QnJKLEtBQUsySixtQkFBcUIsTUFJNUI5RCxFQUFPNkQsV0FBYSxTQUFvQnBILEdBR3RDLE9BRkFBLEVBQVNvRixFQUFjLEdBQUlVLEVBQVM5RixHQUNwQ3hDLEVBQUtzQyxnQkFBZ0IyQyxFQUFNekMsRUFBUStGLEdBQzVCL0YsR0FHVHVELEVBQU8rRCxtQkFBcUIsV0FDMUIsSUFBSWlCLEVBQVM3SyxLQUVUQSxLQUFLeUosUUFBUWpCLFVBQ2Z0SSxFQUFLRixLQUFLeUYsVUFBVTJCLEdBQUc5QixFQUFNd0QsUUFBUyxTQUFVckYsR0FDOUMsT0FBT29ILEVBQU9DLFNBQVNySCxLQUlBLFVBQXZCekQsS0FBS3lKLFFBQVFmLFFBQ2Z4SSxFQUFLRixLQUFLeUYsVUFBVTJCLEdBQUc5QixFQUFNeUQsV0FBWSxTQUFVdEYsR0FDakQsT0FBT29ILEVBQU9uQyxNQUFNakYsS0FDbkIyRCxHQUFHOUIsRUFBTTBELFdBQVksU0FBVXZGLEdBQ2hDLE9BQU9vSCxFQUFPWCxNQUFNekcsS0FHbEIsaUJBQWtCMUMsU0FBU2dLLGlCQVE3QjdLLEVBQUtGLEtBQUt5RixVQUFVMkIsR0FBRzlCLEVBQU0yRCxTQUFVLFdBQ3JDNEIsRUFBT25DLFFBRUhtQyxFQUFPckIsY0FDVHdCLGFBQWFILEVBQU9yQixjQUd0QnFCLEVBQU9yQixhQUFlL0ksV0FBVyxTQUFVZ0QsR0FDekMsT0FBT29ILEVBQU9YLE1BQU16RyxJQWpOSCxJQWtOU29ILEVBQU9wQixRQUFRbEIsY0FNbkQxQyxFQUFPaUYsU0FBVyxTQUFrQnJILEdBQ2xDLElBQUksa0JBQWtCTCxLQUFLSyxFQUFNSyxPQUFPbUgsU0FJeEMsT0FBUXhILEVBQU15SCxPQUNaLEtBbE9tQixHQW1PakJ6SCxFQUFNNEQsaUJBQ05ySCxLQUFLaUssT0FDTCxNQUVGLEtBck9vQixHQXNPbEJ4RyxFQUFNNEQsaUJBQ05ySCxLQUFLNkosU0FPWGhFLEVBQU82RSxjQUFnQixTQUF1QnhKLEdBRTVDLE9BREFsQixLQUFLbUosT0FBU2pJLEdBQVdBLEVBQVFpSyxXQUFhLEdBQUdDLE1BQU14SSxLQUFLMUIsRUFBUWlLLFdBQVdFLGlCQUFpQmhHLElBQWtCLEdBQzNHckYsS0FBS21KLE9BQU9tQyxRQUFRcEssSUFHN0IyRSxFQUFPMEYsb0JBQXNCLFNBQTZCWixFQUFXbkUsR0FDbkUsSUFBSWdGLEVBQWtCYixJQUFjckMsRUFDaENtRCxFQUFrQmQsSUFBY3JDLEVBRWhDbUMsRUFBY3pLLEtBQUswSyxjQUFjbEUsR0FFakNrRixFQUFnQjFMLEtBQUttSixPQUFPM0UsT0FBUyxFQUd6QyxJQUZvQmlILEdBQW1DLElBQWhCaEIsR0FBcUJlLEdBQW1CZixJQUFnQmlCLEtBRXpFMUwsS0FBS3lKLFFBQVFkLEtBQ2pDLE9BQU9uQyxFQUdULElBQ0ltRixHQUFhbEIsR0FETEUsSUFBY3JDLEdBQWtCLEVBQUksSUFDUnRJLEtBQUttSixPQUFPM0UsT0FDcEQsT0FBc0IsSUFBZm1ILEVBQW1CM0wsS0FBS21KLE9BQU9uSixLQUFLbUosT0FBTzNFLE9BQVMsR0FBS3hFLEtBQUttSixPQUFPd0MsSUFHOUU5RixFQUFPK0YsbUJBQXFCLFNBQTRCQyxFQUFlQyxHQUNyRSxJQUFJQyxFQUFjL0wsS0FBSzBLLGNBQWNtQixHQUVqQ0csRUFBWWhNLEtBQUswSyxjQUFjMUssS0FBS3lGLFNBQVNwRSxjQUFjZ0UsSUFFM0Q0RyxFQUFhL0wsRUFBS29GLE1BQU1BLEVBQU1zRCxNQUFPLENBQ3ZDaUQsY0FBZUEsRUFDZmxCLFVBQVdtQixFQUNYSSxLQUFNRixFQUNOekIsR0FBSXdCLElBR04sT0FEQTdMLEVBQUtGLEtBQUt5RixVQUFVM0QsUUFBUW1LLEdBQ3JCQSxHQUdUcEcsRUFBT3NHLDJCQUE2QixTQUFvQ2pMLEdBQ3RFLEdBQUlsQixLQUFLMkosbUJBQW9CLENBQzNCLElBQUl5QyxFQUFhLEdBQUdoQixNQUFNeEksS0FBSzVDLEtBQUsySixtQkFBbUIwQixpQkFBaUJoRyxJQUN4RW5GLEVBQUtrTSxHQUFZM0YsWUFBWXJCLEdBRTdCLElBQUlpSCxFQUFnQnJNLEtBQUsySixtQkFBbUIyQyxTQUFTdE0sS0FBSzBLLGNBQWN4SixJQUVwRW1MLEdBQ0ZuTSxFQUFLbU0sR0FBZUUsU0FBU25ILEtBS25DUyxFQUFPaUUsT0FBUyxTQUFnQmEsRUFBV3pKLEdBQ3pDLElBV0lzTCxFQUNBQyxFQUNBWCxFQWJBWSxFQUFTMU0sS0FFVHdHLEVBQWdCeEcsS0FBS3lGLFNBQVNwRSxjQUFjZ0UsR0FFNUNzSCxFQUFxQjNNLEtBQUswSyxjQUFjbEUsR0FFeENvRyxFQUFjMUwsR0FBV3NGLEdBQWlCeEcsS0FBS3VMLG9CQUFvQlosRUFBV25FLEdBRTlFcUcsRUFBbUI3TSxLQUFLMEssY0FBY2tDLEdBRXRDRSxFQUFZOUssUUFBUWhDLEtBQUtvSixXQWU3QixHQVBFMEMsRUFIRW5CLElBQWNyQyxHQUNoQmtFLEVBQXVCcEgsRUFDdkJxSCxFQUFpQnJILEVBQ0lrRCxJQUVyQmtFLEVBQXVCcEgsRUFDdkJxSCxFQUFpQnJILEVBQ0lrRCxHQUduQnNFLEdBQWUxTSxFQUFLME0sR0FBYXJGLFNBQVNuQyxHQUM1Q3BGLEtBQUt1SixZQUFhLE9BTXBCLElBRmlCdkosS0FBSzRMLG1CQUFtQmdCLEVBQWFkLEdBRXZDaUIsc0JBSVZ2RyxHQUFrQm9HLEVBQXZCLENBS0E1TSxLQUFLdUosWUFBYSxFQUVkdUQsR0FDRjlNLEtBQUswSSxRQUdQMUksS0FBS21NLDJCQUEyQlMsR0FFaEMsSUFBSUksRUFBWTlNLEVBQUtvRixNQUFNQSxFQUFNdUQsS0FBTSxDQUNyQ2dELGNBQWVlLEVBQ2ZqQyxVQUFXbUIsRUFDWEksS0FBTVMsRUFDTnBDLEdBQUlzQyxJQUdOLEdBQUkzTSxFQUFLRixLQUFLeUYsVUFBVThCLFNBQVNuQyxHQUFrQixDQUNqRGxGLEVBQUswTSxHQUFhTCxTQUFTRSxHQUMzQjNNLEVBQUs4QixPQUFPZ0wsR0FDWjFNLEVBQUtzRyxHQUFlK0YsU0FBU0MsR0FDN0J0TSxFQUFLME0sR0FBYUwsU0FBU0MsR0FDM0IsSUFBSWhMLEVBQXFCMUIsRUFBS3lCLGlDQUFpQ2lGLEdBQy9EdEcsRUFBS3NHLEdBQWVoRyxJQUFJVixFQUFLSyxlQUFnQixXQUMzQ0QsRUFBSzBNLEdBQWFuRyxZQUFZK0YsRUFBdUIsSUFBTUMsR0FBZ0JGLFNBQVNuSCxHQUNwRmxGLEVBQUtzRyxHQUFlQyxZQUFZckIsRUFBbUIsSUFBTXFILEVBQWlCLElBQU1ELEdBQ2hGRSxFQUFPbkQsWUFBYSxFQUNwQjlJLFdBQVcsV0FDVCxPQUFPUCxFQUFLd00sRUFBT2pILFVBQVUzRCxRQUFRa0wsSUFDcEMsS0FDRnhKLHFCQUFxQmhDLFFBRXhCdEIsRUFBS3NHLEdBQWVDLFlBQVlyQixHQUNoQ2xGLEVBQUswTSxHQUFhTCxTQUFTbkgsR0FDM0JwRixLQUFLdUosWUFBYSxFQUNsQnJKLEVBQUtGLEtBQUt5RixVQUFVM0QsUUFBUWtMLEdBRzFCRixHQUNGOU0sS0FBS2tLLFVBS1R6QyxFQUFTVCxpQkFBbUIsU0FBMEIxRSxHQUNwRCxPQUFPdEMsS0FBS2lILEtBQUssV0FDZixJQUFJQyxFQUFPaEgsRUFBS0YsTUFBTWtILEtBQUtsQyxHQUV2QnlFLEVBQVUvQixFQUFjLEdBQUlVLEVBQVNsSSxFQUFLRixNQUFNa0gsUUFFOUIsaUJBQVg1RSxJQUNUbUgsRUFBVS9CLEVBQWMsR0FBSStCLEVBQVNuSCxJQUd2QyxJQUFJMkssRUFBMkIsaUJBQVgzSyxFQUFzQkEsRUFBU21ILEVBQVFoQixNQU8zRCxHQUxLdkIsSUFDSEEsRUFBTyxJQUFJTyxFQUFTekgsS0FBTXlKLEdBQzFCdkosRUFBS0YsTUFBTWtILEtBQUtsQyxFQUFVa0MsSUFHTixpQkFBWDVFLEVBQ1Q0RSxFQUFLcUQsR0FBR2pJLFFBQ0gsR0FBc0IsaUJBQVgySyxFQUFxQixDQUNyQyxRQUE0QixJQUFqQi9GLEVBQUsrRixHQUNkLE1BQU0sSUFBSUMsVUFBVSxvQkFBdUJELEVBQVMsS0FHdEQvRixFQUFLK0YsVUFDSXhELEVBQVFsQixXQUNqQnJCLEVBQUt3QixRQUNMeEIsRUFBS2dELFlBS1h6QyxFQUFTMEYscUJBQXVCLFNBQThCMUosR0FDNUQsSUFBSXRDLEVBQVdyQixFQUFLbUIsdUJBQXVCakIsTUFFM0MsR0FBS21CLEVBQUwsQ0FJQSxJQUFJMkMsRUFBUzVELEVBQUtpQixHQUFVLEdBRTVCLEdBQUsyQyxHQUFXNUQsRUFBSzRELEdBQVF5RCxTQUFTbkMsR0FBdEMsQ0FJQSxJQUFJOUMsRUFBU29GLEVBQWMsR0FBSXhILEVBQUs0RCxHQUFRb0QsT0FBUWhILEVBQUtGLE1BQU1rSCxRQUUzRGtHLEVBQWFwTixLQUFLb0IsYUFBYSxpQkFFL0JnTSxJQUNGOUssRUFBT2lHLFVBQVcsR0FHcEJkLEVBQVNULGlCQUFpQnBFLEtBQUsxQyxFQUFLNEQsR0FBU3hCLEdBRXpDOEssR0FDRmxOLEVBQUs0RCxHQUFRb0QsS0FBS2xDLEdBQVV1RixHQUFHNkMsR0FHakMzSixFQUFNNEQsb0JBN2VVM0IsRUFnZkwrQixFQWhmOEI3QixFQWdmZCxDQUFDLENBQzVCZCxJQUFLLFVBQ0xxQyxJQUFLLFdBQ0gsTUE3YlEsVUErYlQsQ0FDRHJDLElBQUssVUFDTHFDLElBQUssV0FDSCxPQUFPaUIsTUF4Zm9CekMsRUFnZlIsT0EvZVR0QixFQUFrQnFCLEVBQVloRCxVQUFXaUQsR0FDckRDLEdBQWF2QixFQUFrQnFCLEVBQWFFLEdBMGZ2QzZCLEVBallULEdBMFlBdkgsRUFBS2EsVUFBVXFHLEdBQUc5QixFQUFNQyxlQUFnQkYsRUFBcUJvQyxFQUFTMEYsc0JBQ3RFak4sRUFBS21OLFFBQVFqRyxHQUFHOUIsRUFBTTRELGNBQWUsV0FHbkMsSUFGQSxJQUFJb0UsRUFBWSxHQUFHbEMsTUFBTXhJLEtBQUs3QixTQUFTc0ssaUJBQWlCaEcsSUFFL0NkLEVBQUksRUFBR2dKLEVBQU1ELEVBQVU5SSxPQUFRRCxFQUFJZ0osRUFBS2hKLElBQUssQ0FDcEQsSUFBSWlKLEVBQVl0TixFQUFLb04sRUFBVS9JLElBRS9Ca0QsRUFBU1QsaUJBQWlCcEUsS0FBSzRLLEVBQVdBLEVBQVV0RyxXQVN4RGhILEVBQUtxRCxHQUFHd0IsR0FBUTBDLEVBQVNULGlCQUN6QjlHLEVBQUtxRCxHQUFHd0IsR0FBTVcsWUFBYytCLEVBRTVCdkgsRUFBS3FELEdBQUd3QixHQUFNeUMsV0FBYSxXQUV6QixPQURBdEgsRUFBS3FELEdBQUd3QixHQUFRSSxFQUNUc0MsRUFBU1Qsa0JBR1hTLElBT1YsU0FBVWxJLEVBQVFDLEdBQ0UsaUJBQVpDLFNBQTBDLG9CQUFYQyxPQUF5QkEsT0FBT0QsUUFBVUQsRUFBUUcsUUFBUSxVQUFXQSxRQUFRLGNBQ2pHLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFBTUQsT0FBTyxDQUFDLFNBQVUsYUFBY0osR0FDNUVELEVBQU9rTyxTQUFXak8sRUFBUUQsRUFBT1EsT0FBT1IsRUFBT08sTUFIbEQsQ0FJRUUsS0FBTSxTQUFXQyxFQUFFSCxHQUFRLGFBSzNCLFNBQVN1RSxFQUFrQlAsRUFBUVEsR0FDakMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUssQ0FDckMsSUFBSUUsRUFBYUgsRUFBTUMsR0FDdkJFLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqRG5DLE9BQU9vQyxlQUFlZixFQUFRVyxFQUFXSyxJQUFLTCxJQXlCbEQsU0FBU2lELEVBQWM1RCxHQUNyQixJQUFLLElBQUlTLEVBQUksRUFBR0EsRUFBSUosVUFBVUssT0FBUUQsSUFBSyxDQUN6QyxJQUFJb0QsRUFBeUIsTUFBaEJ4RCxVQUFVSSxHQUFhSixVQUFVSSxHQUFLLEdBQy9DcUQsRUFBVW5GLE9BQU9vRixLQUFLRixHQUVrQixtQkFBakNsRixPQUFPcUYsd0JBQ2hCRixFQUFVQSxFQUFRRyxPQUFPdEYsT0FBT3FGLHNCQUFzQkgsR0FBUUssT0FBTyxTQUFVQyxHQUM3RSxPQUFPeEYsT0FBT3lGLHlCQUF5QlAsRUFBUU0sR0FBS3ZELGVBSXhEa0QsRUFBUU8sUUFBUSxTQUFVckQsR0ExQjlCLElBQXlCNUMsRUFBSzRDLEVBQUtoQyxFQUFWWixFQTJCSDRCLEVBM0JhaEIsRUEyQkE2RSxFQTNCTDdDLEVBMkJBQSxHQTFCeEJBLEtBQU81QyxFQUNUTyxPQUFPb0MsZUFBZTNDLEVBQUs0QyxFQUFLLENBQzlCaEMsTUFBT0EsRUFDUDRCLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBR1oxQyxFQUFJNEMsR0FBT2hDLElBc0JiLE9BQU9nQixFQVVULElBQXlCNUQsRUFNbkI2RSxFQUVBQyxFQUNBQyxFQUVBRSxFQUNBaUQsRUFJQUMsRUFJQS9DLEVBT0FGLEVBQUFBLEVBQUFBLEVBQUFBLEVBTUFzSSxFQUFBQSxFQUlBckksRUFBQUEsRUFXQW9JLEVBeVROLE9BcmFBeE4sRUFBSUEsR0FBS0EsRUFBRTBDLGVBQWUsV0FBYTFDLEVBQVcsUUFBSUEsRUFDdERILEVBQU9BLEdBQVFBLEVBQUs2QyxlQUFlLFdBQWE3QyxFQUFjLFFBQUlBLEVBaUU1RGlGLEVBQU8sV0FHUEUsRUFBWSxLQURaRCxFQUFXLGVBR1hHLEdBWG1CakYsRUF1V3ZCRCxHQTVWOEJzRCxHQUFHd0IsR0FDN0JxRCxFQUFVLENBQ1p0QyxRQUFRLEVBQ1I2SCxPQUFRLElBRU50RixFQUFjLENBQ2hCdkMsT0FBUSxVQUNSNkgsT0FBUSxvQkFFTnJJLEVBQVEsQ0FDVnNJLEtBQU0sT0FBUzNJLEVBQ2Y0SSxNQUFPLFFBQVU1SSxFQUNqQjZJLEtBQU0sT0FBUzdJLEVBQ2Y4SSxPQUFRLFNBQVc5SSxFQUNuQk0sZUFBZ0IsUUFBVU4sRUFmVCxhQWlCZkcsRUFDSSxPQURKQSxFQUVRLFdBRlJBLEVBR1UsYUFIVkEsRUFJUyxZQUVUc0ksRUFDSyxRQURMQSxFQUVNLFNBRU5ySSxFQUNPLHFCQURQQSxFQUVXLDJCQVNYb0ksRUFFSixXQUNFLFNBQVNBLEVBQVN2TSxFQUFTb0IsR0FDekJ0QyxLQUFLZ08sa0JBQW1CLEVBQ3hCaE8sS0FBS3lGLFNBQVd2RSxFQUNoQmxCLEtBQUt5SixRQUFVekosS0FBSzBKLFdBQVdwSCxHQUMvQnRDLEtBQUtpTyxjQUFnQi9OLEVBQUtnTyxVQUFVbk4sU0FBU3NLLGlCQUFpQixtQ0FBd0NuSyxFQUFRaU4sR0FBSyw2Q0FBeURqTixFQUFRaU4sR0FBSyxPQUd6TCxJQUZBLElBQUlDLEVBQWEsR0FBR2hELE1BQU14SSxLQUFLN0IsU0FBU3NLLGlCQUFpQmhHLElBRWhEZCxFQUFJLEVBQUdnSixFQUFNYSxFQUFXNUosT0FBUUQsRUFBSWdKLEVBQUtoSixJQUFLLENBQ3JELElBQUk4SixFQUFPRCxFQUFXN0osR0FDbEJwRCxFQUFXckIsRUFBS21CLHVCQUF1Qm9OLEdBQ3ZDQyxFQUFnQixHQUFHbEQsTUFBTXhJLEtBQUs3QixTQUFTc0ssaUJBQWlCbEssSUFBVzZHLE9BQU8sU0FBVXVHLEdBQ3RGLE9BQU9BLElBQWNyTixJQUdOLE9BQWJDLEdBQTRDLEVBQXZCbU4sRUFBYzlKLFNBQ3JDeEUsS0FBS3dPLFVBQVlyTixFQUVqQm5CLEtBQUtpTyxjQUFjUSxLQUFLSixJQUk1QnJPLEtBQUswTyxRQUFVMU8sS0FBS3lKLFFBQVFrRSxPQUFTM04sS0FBSzJPLGFBQWUsS0FFcEQzTyxLQUFLeUosUUFBUWtFLFFBQ2hCM04sS0FBSzRPLDBCQUEwQjVPLEtBQUt5RixTQUFVekYsS0FBS2lPLGVBR2pEak8sS0FBS3lKLFFBQVEzRCxRQUNmOUYsS0FBSzhGLFNBS1QsSUFuSWtCSixFQUFhQyxFQUFZQyxFQW1JdkNDLEVBQVM0SCxFQUFTL0ssVUEwT3RCLE9Bdk9BbUQsRUFBT0MsT0FBUyxXQUNWNUYsRUFBS0YsS0FBS3lGLFVBQVU4QixTQUFTbkMsR0FDL0JwRixLQUFLNk8sT0FFTDdPLEtBQUs4TyxRQUlUakosRUFBT2lKLEtBQU8sV0FDWixJQU1JQyxFQUNBQyxFQVBBMU8sRUFBUU4sS0FFWixJQUFJQSxLQUFLZ08sbUJBQW9COU4sRUFBS0YsS0FBS3lGLFVBQVU4QixTQUFTbkMsS0FPdERwRixLQUFLME8sU0FLZ0IsS0FKdkJLLEVBQVUsR0FBRzNELE1BQU14SSxLQUFLNUMsS0FBSzBPLFFBQVFyRCxpQkFBaUJoRyxJQUFtQjJDLE9BQU8sU0FBVXFHLEdBQ3hGLE9BQU9BLEVBQUtqTixhQUFhLGlCQUFtQmQsRUFBTW1KLFFBQVFrRSxVQUdoRG5KLFNBQ1Z1SyxFQUFVLFFBSVZBLElBQ0ZDLEVBQWM5TyxFQUFLNk8sR0FBU0UsSUFBSWpQLEtBQUt3TyxXQUFXdEgsS0FBS2xDLEtBRWxDZ0ssRUFBWWhCLG1CQUhqQyxDQVFBLElBQUlrQixFQUFhaFAsRUFBS29GLE1BQU1BLEVBQU1zSSxNQUdsQyxHQUZBMU4sRUFBS0YsS0FBS3lGLFVBQVUzRCxRQUFRb04sSUFFeEJBLEVBQVduQyxxQkFBZixDQUlJZ0MsSUFDRnRCLEVBQVN6RyxpQkFBaUJwRSxLQUFLMUMsRUFBSzZPLEdBQVNFLElBQUlqUCxLQUFLd08sV0FBWSxRQUU3RFEsR0FDSDlPLEVBQUs2TyxHQUFTN0gsS0FBS2xDLEVBQVUsT0FJakMsSUFBSW1LLEVBQVluUCxLQUFLb1AsZ0JBRXJCbFAsRUFBS0YsS0FBS3lGLFVBQVVnQixZQUFZckIsR0FBb0JtSCxTQUFTbkgsR0FDN0RwRixLQUFLeUYsU0FBUzRKLE1BQU1GLEdBQWEsRUFFN0JuUCxLQUFLaU8sY0FBY3pKLFFBQ3JCdEUsRUFBS0YsS0FBS2lPLGVBQWV4SCxZQUFZckIsR0FBcUJrSyxLQUFLLGlCQUFpQixHQUdsRnRQLEtBQUt1UCxrQkFBaUIsR0FFdEIsSUFVSUMsRUFBYSxVQURVTCxFQUFVLEdBQUc3TCxjQUFnQjZMLEVBQVUvRCxNQUFNLElBRXBFNUosRUFBcUIxQixFQUFLeUIsaUNBQWlDdkIsS0FBS3lGLFVBQ3BFdkYsRUFBS0YsS0FBS3lGLFVBQVVqRixJQUFJVixFQUFLSyxlQVpkLFdBQ2JELEVBQUtJLEVBQU1tRixVQUFVZ0IsWUFBWXJCLEdBQXNCbUgsU0FBU25ILEdBQW9CbUgsU0FBU25ILEdBQzdGOUUsRUFBTW1GLFNBQVM0SixNQUFNRixHQUFhLEdBRWxDN08sRUFBTWlQLGtCQUFpQixHQUV2QnJQLEVBQUtJLEVBQU1tRixVQUFVM0QsUUFBUXdELEVBQU11SSxTQU1rQnJLLHFCQUFxQmhDLEdBQzVFeEIsS0FBS3lGLFNBQVM0SixNQUFNRixHQUFhblAsS0FBS3lGLFNBQVMrSixHQUFjLFFBRy9EM0osRUFBT2dKLEtBQU8sV0FDWixJQUFJaEUsRUFBUzdLLEtBRWIsSUFBSUEsS0FBS2dPLGtCQUFxQjlOLEVBQUtGLEtBQUt5RixVQUFVOEIsU0FBU25DLEdBQTNELENBSUEsSUFBSThKLEVBQWFoUCxFQUFLb0YsTUFBTUEsRUFBTXdJLE1BR2xDLEdBRkE1TixFQUFLRixLQUFLeUYsVUFBVTNELFFBQVFvTixJQUV4QkEsRUFBV25DLHFCQUFmLENBSUEsSUFBSW9DLEVBQVluUCxLQUFLb1AsZ0JBRXJCcFAsS0FBS3lGLFNBQVM0SixNQUFNRixHQUFhblAsS0FBS3lGLFNBQVNnSyx3QkFBd0JOLEdBQWEsS0FDcEZyUCxFQUFLOEIsT0FBTzVCLEtBQUt5RixVQUNqQnZGLEVBQUtGLEtBQUt5RixVQUFVOEcsU0FBU25ILEdBQXNCcUIsWUFBWXJCLEdBQW9CcUIsWUFBWXJCLEdBQy9GLElBQUlzSyxFQUFxQjFQLEtBQUtpTyxjQUFjekosT0FFNUMsR0FBeUIsRUFBckJrTCxFQUNGLElBQUssSUFBSW5MLEVBQUksRUFBR0EsRUFBSW1MLEVBQW9CbkwsSUFBSyxDQUMzQyxJQUFJekMsRUFBVTlCLEtBQUtpTyxjQUFjMUosR0FDN0JwRCxFQUFXckIsRUFBS21CLHVCQUF1QmEsR0FFM0MsR0FBaUIsT0FBYlgsRUFDVWpCLEVBQUssR0FBR2tMLE1BQU14SSxLQUFLN0IsU0FBU3NLLGlCQUFpQmxLLEtBRTlDb0csU0FBU25DLElBQ2xCbEYsRUFBSzRCLEdBQVN5SyxTQUFTbkgsR0FBcUJrSyxLQUFLLGlCQUFpQixHQU0xRXRQLEtBQUt1UCxrQkFBaUIsR0FRdEJ2UCxLQUFLeUYsU0FBUzRKLE1BQU1GLEdBQWEsR0FDakMsSUFBSTNOLEVBQXFCMUIsRUFBS3lCLGlDQUFpQ3ZCLEtBQUt5RixVQUNwRXZGLEVBQUtGLEtBQUt5RixVQUFVakYsSUFBSVYsRUFBS0ssZUFSZCxXQUNiMEssRUFBTzBFLGtCQUFpQixHQUV4QnJQLEVBQUsySyxFQUFPcEYsVUFBVWdCLFlBQVlyQixHQUFzQm1ILFNBQVNuSCxHQUFvQnRELFFBQVF3RCxFQUFNeUksVUFLOUN2SyxxQkFBcUJoQyxNQUc5RXFFLEVBQU8wSixpQkFBbUIsU0FBMEJJLEdBQ2xEM1AsS0FBS2dPLGlCQUFtQjJCLEdBRzFCOUosRUFBT2lCLFFBQVUsV0FDZjVHLEVBQUs2RyxXQUFXL0csS0FBS3lGLFNBQVVULEdBQy9CaEYsS0FBS3lKLFFBQVUsS0FDZnpKLEtBQUswTyxRQUFVLEtBQ2YxTyxLQUFLeUYsU0FBVyxLQUNoQnpGLEtBQUtpTyxjQUFnQixLQUNyQmpPLEtBQUtnTyxpQkFBbUIsTUFJMUJuSSxFQUFPNkQsV0FBYSxTQUFvQnBILEdBS3RDLE9BSkFBLEVBQVNvRixFQUFjLEdBQUlVLEVBQVM5RixJQUM3QndELE9BQVM5RCxRQUFRTSxFQUFPd0QsUUFFL0JoRyxFQUFLc0MsZ0JBQWdCMkMsRUFBTXpDLEVBQVErRixHQUM1Qi9GLEdBR1R1RCxFQUFPdUosY0FBZ0IsV0FFckIsT0FEZWxQLEVBQUtGLEtBQUt5RixVQUFVOEIsU0FBU21HLEdBQzFCQSxFQUFrQkEsR0FHdEM3SCxFQUFPOEksV0FBYSxXQUNsQixJQUFJakMsRUFBUzFNLEtBRVQyTixFQUFTLEtBRVQ3TixFQUFLbUMsVUFBVWpDLEtBQUt5SixRQUFRa0UsU0FDOUJBLEVBQVMzTixLQUFLeUosUUFBUWtFLFlBRW9CLElBQS9CM04sS0FBS3lKLFFBQVFrRSxPQUFPaUMsU0FDN0JqQyxFQUFTM04sS0FBS3lKLFFBQVFrRSxPQUFPLEtBRy9CQSxFQUFTNU0sU0FBU00sY0FBY3JCLEtBQUt5SixRQUFRa0UsUUFHL0MsSUFBSXhNLEVBQVcseUNBQThDbkIsS0FBS3lKLFFBQVFrRSxPQUFTLEtBQy9FckIsRUFBVyxHQUFHbEIsTUFBTXhJLEtBQUsrSyxFQUFPdEMsaUJBQWlCbEssSUFJckQsT0FIQWpCLEVBQUtvTSxHQUFVckYsS0FBSyxTQUFVMUMsRUFBR3JELEdBQy9Cd0wsRUFBT2tDLDBCQUEwQm5CLEVBQVNvQyxzQkFBc0IzTyxHQUFVLENBQUNBLE1BRXRFeU0sR0FHVDlILEVBQU8rSSwwQkFBNEIsU0FBbUMxTixFQUFTNE8sR0FDN0UsR0FBSTVPLEVBQVMsQ0FDWCxJQUFJNk8sRUFBUzdQLEVBQUtnQixHQUFTcUcsU0FBU25DLEdBRWhDMEssRUFBYXRMLFFBQ2Z0RSxFQUFLNFAsR0FBY2pKLFlBQVl6QixHQUFzQjJLLEdBQVFULEtBQUssZ0JBQWlCUyxLQU16RnRDLEVBQVNvQyxzQkFBd0IsU0FBK0IzTyxHQUM5RCxJQUFJQyxFQUFXckIsRUFBS21CLHVCQUF1QkMsR0FDM0MsT0FBT0MsRUFBV0osU0FBU00sY0FBY0YsR0FBWSxNQUd2RHNNLEVBQVN6RyxpQkFBbUIsU0FBMEIxRSxHQUNwRCxPQUFPdEMsS0FBS2lILEtBQUssV0FDZixJQUFJK0ksRUFBUTlQLEVBQUtGLE1BQ2JrSCxFQUFPOEksRUFBTTlJLEtBQUtsQyxHQUVsQnlFLEVBQVUvQixFQUFjLEdBQUlVLEVBQVM0SCxFQUFNOUksT0FBMEIsaUJBQVg1RSxHQUF1QkEsRUFBU0EsRUFBUyxJQVd2RyxJQVRLNEUsR0FBUXVDLEVBQVEzRCxRQUFVLFlBQVkxQyxLQUFLZCxLQUM5Q21ILEVBQVEzRCxRQUFTLEdBR2RvQixJQUNIQSxFQUFPLElBQUl1RyxFQUFTek4sS0FBTXlKLEdBQzFCdUcsRUFBTTlJLEtBQUtsQyxFQUFVa0MsSUFHRCxpQkFBWDVFLEVBQXFCLENBQzlCLFFBQTRCLElBQWpCNEUsRUFBSzVFLEdBQ2QsTUFBTSxJQUFJNEssVUFBVSxvQkFBdUI1SyxFQUFTLEtBR3RENEUsRUFBSzVFLFNBNVZPb0QsRUFpV0wrSCxFQWpXOEI3SCxFQWlXZCxDQUFDLENBQzVCZCxJQUFLLFVBQ0xxQyxJQUFLLFdBQ0gsTUE5U1EsVUFnVFQsQ0FDRHJDLElBQUssVUFDTHFDLElBQUssV0FDSCxPQUFPaUIsTUF6V29CekMsRUFpV1IsT0FoV1R0QixFQUFrQnFCLEVBQVloRCxVQUFXaUQsR0FDckRDLEdBQWF2QixFQUFrQnFCLEVBQWFFLEdBMld2QzZILEVBNVFULEdBcVJBdk4sRUFBS2EsVUFBVXFHLEdBQUc5QixFQUFNQyxlQUFnQkYsRUFBc0IsU0FBVTVCLEdBRWxDLE1BQWhDQSxFQUFNd00sY0FBY2hGLFNBQ3RCeEgsRUFBTTRELGlCQUdSLElBQUk2SSxFQUFXaFEsRUFBS0YsTUFDaEJtQixFQUFXckIsRUFBS21CLHVCQUF1QmpCLE1BQ3ZDbVEsRUFBWSxHQUFHL0UsTUFBTXhJLEtBQUs3QixTQUFTc0ssaUJBQWlCbEssSUFDeERqQixFQUFLaVEsR0FBV2xKLEtBQUssV0FDbkIsSUFBSW1KLEVBQVVsUSxFQUFLRixNQUVmc0MsRUFETzhOLEVBQVFsSixLQUFLbEMsR0FDSixTQUFXa0wsRUFBU2hKLE9BRXhDdUcsRUFBU3pHLGlCQUFpQnBFLEtBQUt3TixFQUFTOU4sT0FTNUNwQyxFQUFLcUQsR0FBR3dCLEdBQVEwSSxFQUFTekcsaUJBQ3pCOUcsRUFBS3FELEdBQUd3QixHQUFNVyxZQUFjK0gsRUFFNUJ2TixFQUFLcUQsR0FBR3dCLEdBQU15QyxXQUFhLFdBRXpCLE9BREF0SCxFQUFLcUQsR0FBR3dCLEdBQVFJLEVBQ1RzSSxFQUFTekcsa0JBR1h5RyxJQU9WLFNBQVVsTyxFQUFRQyxHQUNFLGlCQUFaQyxTQUEwQyxvQkFBWEMsT0FBeUJBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsVUFBV0EsUUFBUSxhQUFjQSxRQUFRLGNBQ3ZILG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFBTUQsT0FBTyxDQUFDLFNBQVUsWUFBYSxhQUFjSixHQUN6RkQsRUFBTzhRLFNBQVc3USxFQUFRRCxFQUFPUSxPQUFPUixFQUFPK1EsT0FBTy9RLEVBQU9PLE1BSGhFLENBSUVFLEtBQU0sU0FBV0MsRUFBRXFRLEVBQU94USxHQUFRLGFBTWxDLFNBQVN1RSxFQUFrQlAsRUFBUVEsR0FDakMsSUFBSyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlELEVBQU1FLE9BQVFELElBQUssQ0FDckMsSUFBSUUsRUFBYUgsRUFBTUMsR0FDdkJFLEVBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFDakRELEVBQVdFLGNBQWUsRUFDdEIsVUFBV0YsSUFBWUEsRUFBV0csVUFBVyxHQUNqRG5DLE9BQU9vQyxlQUFlZixFQUFRVyxFQUFXSyxJQUFLTCxJQXlCbEQsU0FBU2lELEVBQWM1RCxHQUNyQixJQUFLLElBQUlTLEVBQUksRUFBR0EsRUFBSUosVUFBVUssT0FBUUQsSUFBSyxDQUN6QyxJQUFJb0QsRUFBeUIsTUFBaEJ4RCxVQUFVSSxHQUFhSixVQUFVSSxHQUFLLEdBQy9DcUQsRUFBVW5GLE9BQU9vRixLQUFLRixHQUVrQixtQkFBakNsRixPQUFPcUYsd0JBQ2hCRixFQUFVQSxFQUFRRyxPQUFPdEYsT0FBT3FGLHNCQUFzQkgsR0FBUUssT0FBTyxTQUFVQyxHQUM3RSxPQUFPeEYsT0FBT3lGLHlCQUF5QlAsRUFBUU0sR0FBS3ZELGVBSXhEa0QsRUFBUU8sUUFBUSxTQUFVckQsR0ExQjlCLElBQXlCNUMsRUFBSzRDLEVBQUtoQyxFQUFWWixFQTJCSDRCLEVBM0JhaEIsRUEyQkE2RSxFQTNCTDdDLEVBMkJBQSxHQTFCeEJBLEtBQU81QyxFQUNUTyxPQUFPb0MsZUFBZTNDLEVBQUs0QyxFQUFLLENBQzlCaEMsTUFBT0EsRUFDUDRCLFlBQVksRUFDWkMsY0FBYyxFQUNkQyxVQUFVLElBR1oxQyxFQUFJNEMsR0FBT2hDLElBc0JiLE9BQU9nQixFQVVULElBQXlCNUQsRUFNbkI2RSxFQUVBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQWFBb0wsRUFDQWpMLEVBVUFGLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEVBVUFDLEVBQUFBLEVBQUFBLEVBQUFBLEVBQUFBLEVBT0FtTCxFQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxFQUFBQSxFQVVBcEksRUFPQUMsRUFjQWdJLEVBOFlOLE9BOWhCQXBRLEVBQUlBLEdBQUtBLEVBQUUwQyxlQUFlLFdBQWExQyxFQUFXLFFBQUlBLEVBQ3REcVEsRUFBU0EsR0FBVUEsRUFBTzNOLGVBQWUsV0FBYTJOLEVBQWdCLFFBQUlBLEVBQzFFeFEsRUFBT0EsR0FBUUEsRUFBSzZDLGVBQWUsV0FBYTdDLEVBQWMsUUFBSUEsRUFpRTVEaUYsRUFBTyxXQUdQRSxFQUFZLEtBRFpELEVBQVcsZUFFWEUsRUFBZSxZQUNmQyxHQVhtQmpGLEVBK2R2QkQsR0FwZDhCc0QsR0FBR3dCLEdBYTdCd0wsRUFBaUIsSUFBSXBOLE9BQU9zTixZQUM1Qm5MLEVBQVEsQ0FDVndJLEtBQU0sT0FBUzdJLEVBQ2Y4SSxPQUFRLFNBQVc5SSxFQUNuQjJJLEtBQU0sT0FBUzNJLEVBQ2Y0SSxNQUFPLFFBQVU1SSxFQUNqQnlMLE1BQU8sUUFBVXpMLEVBQ2pCTSxlQUFnQixRQUFVTixFQUFZQyxFQUN0Q3lMLGlCQUFrQixVQUFZMUwsRUFBWUMsRUFDMUMwTCxlQUFnQixRQUFVM0wsRUFBWUMsR0FFcENFLEVBQ1EsV0FEUkEsRUFFSSxPQUZKQSxFQUdNLFNBSE5BLEVBSVMsWUFKVEEsRUFLUSxXQUxSQSxFQU1TLHNCQU5UQSxFQVFlLGtCQUVmQyxFQUNXLDJCQURYQSxFQUVVLGlCQUZWQSxFQUdJLGlCQUhKQSxFQUlVLGNBSlZBLEVBS2EsOERBRWJtTCxFQUNHLFlBREhBLEVBRU0sVUFGTkEsRUFHTSxlQUhOQSxFQUlTLGFBSlRBLEVBS0ssY0FMTEEsRUFPSSxhQUdKcEksRUFBVSxDQUNaeUksT0FBUSxFQUNSQyxNQUFNLEVBQ05DLFNBQVUsZUFDVkMsVUFBVyxTQUNYQyxRQUFTLFdBRVA1SSxFQUFjLENBQ2hCd0ksT0FBUSwyQkFDUkMsS0FBTSxVQUNOQyxTQUFVLG1CQUNWQyxVQUFXLG1CQUNYQyxRQUFTLFVBU1BaLEVBRUosV0FDRSxTQUFTQSxFQUFTblAsRUFBU29CLEdBQ3pCdEMsS0FBS3lGLFNBQVd2RSxFQUNoQmxCLEtBQUtrUixRQUFVLEtBQ2ZsUixLQUFLeUosUUFBVXpKLEtBQUswSixXQUFXcEgsR0FDL0J0QyxLQUFLbVIsTUFBUW5SLEtBQUtvUixrQkFDbEJwUixLQUFLcVIsVUFBWXJSLEtBQUtzUixnQkFFdEJ0UixLQUFLNEoscUJBSVAsSUFoSmtCbEUsRUFBYUMsRUFBWUMsRUFnSnZDQyxFQUFTd0ssRUFBUzNOLFVBOFZ0QixPQTNWQW1ELEVBQU9DLE9BQVMsV0FDZCxJQUFJOUYsS0FBS3lGLFNBQVM4TCxXQUFZclIsRUFBS0YsS0FBS3lGLFVBQVU4QixTQUFTbkMsR0FBM0QsQ0FJQSxJQUFJdUksRUFBUzBDLEVBQVNtQixzQkFBc0J4UixLQUFLeUYsVUFFN0NnTSxFQUFXdlIsRUFBS0YsS0FBS21SLE9BQU81SixTQUFTbkMsR0FJekMsR0FGQWlMLEVBQVNxQixlQUVMRCxFQUFKLENBSUEsSUFBSTVGLEVBQWdCLENBQ2xCQSxjQUFlN0wsS0FBS3lGLFVBRWxCa00sRUFBWXpSLEVBQUtvRixNQUFNQSxFQUFNc0ksS0FBTS9CLEdBR3ZDLEdBRkEzTCxFQUFLeU4sR0FBUTdMLFFBQVE2UCxJQUVqQkEsRUFBVTVFLHFCQUFkLENBS0EsSUFBSy9NLEtBQUtxUixVQUFXLENBS25CLFFBQXNCLElBQVhmLEVBQ1QsTUFBTSxJQUFJcEQsVUFBVSxnRUFHdEIsSUFBSTBFLEVBQW1CNVIsS0FBS3lGLFNBRUcsV0FBM0J6RixLQUFLeUosUUFBUXVILFVBQ2ZZLEVBQW1CakUsRUFDVjdOLEVBQUttQyxVQUFVakMsS0FBS3lKLFFBQVF1SCxhQUNyQ1ksRUFBbUI1UixLQUFLeUosUUFBUXVILGVBRWEsSUFBbENoUixLQUFLeUosUUFBUXVILFVBQVVwQixTQUNoQ2dDLEVBQW1CNVIsS0FBS3lKLFFBQVF1SCxVQUFVLEtBT2hCLGlCQUExQmhSLEtBQUt5SixRQUFRc0gsVUFDZjdRLEVBQUt5TixHQUFRcEIsU0FBU25ILEdBR3hCcEYsS0FBS2tSLFFBQVUsSUFBSVosRUFBT3NCLEVBQWtCNVIsS0FBS21SLE1BQU9uUixLQUFLNlIsb0JBTzNELGlCQUFrQjlRLFNBQVNnSyxpQkFBd0UsSUFBckQ3SyxFQUFLeU4sR0FBUXpILFFBQVFiLEdBQXFCYixRQUMxRnRFLEVBQUthLFNBQVMrUSxNQUFNeEYsV0FBV2xGLEdBQUcsWUFBYSxLQUFNbEgsRUFBSzZSLE1BRzVEL1IsS0FBS3lGLFNBQVNrQixRQUVkM0csS0FBS3lGLFNBQVNtQixhQUFhLGlCQUFpQixHQUU1QzFHLEVBQUtGLEtBQUttUixPQUFPdEssWUFBWXpCLEdBQzdCbEYsRUFBS3lOLEdBQVE5RyxZQUFZekIsR0FBZ0J0RCxRQUFRNUIsRUFBS29GLE1BQU1BLEVBQU11SSxNQUFPaEMsUUFHM0VoRyxFQUFPaUIsUUFBVSxXQUNmNUcsRUFBSzZHLFdBQVcvRyxLQUFLeUYsU0FBVVQsR0FDL0I5RSxFQUFLRixLQUFLeUYsVUFBVW1GLElBQUkzRixHQUN4QmpGLEtBQUt5RixTQUFXLE1BQ2hCekYsS0FBS21SLE1BQVEsUUFFVG5SLEtBQUtrUixVQUNQbFIsS0FBS2tSLFFBQVFjLFVBRWJoUyxLQUFLa1IsUUFBVSxPQUluQnJMLEVBQU9vTSxPQUFTLFdBQ2RqUyxLQUFLcVIsVUFBWXJSLEtBQUtzUixnQkFFRCxPQUFqQnRSLEtBQUtrUixTQUNQbFIsS0FBS2tSLFFBQVFnQixrQkFLakJyTSxFQUFPK0QsbUJBQXFCLFdBQzFCLElBQUl0SixFQUFRTixLQUVaRSxFQUFLRixLQUFLeUYsVUFBVTJCLEdBQUc5QixFQUFNb0wsTUFBTyxTQUFVak4sR0FDNUNBLEVBQU00RCxpQkFDTjVELEVBQU0wTyxrQkFFTjdSLEVBQU13RixZQUlWRCxFQUFPNkQsV0FBYSxTQUFvQnBILEdBR3RDLE9BRkFBLEVBQVNvRixFQUFjLEdBQUkxSCxLQUFLb1MsWUFBWWhLLFFBQVNsSSxFQUFLRixLQUFLeUYsVUFBVXlCLE9BQVE1RSxHQUNqRnhDLEVBQUtzQyxnQkFBZ0IyQyxFQUFNekMsRUFBUXRDLEtBQUtvUyxZQUFZL0osYUFDN0MvRixHQUdUdUQsRUFBT3VMLGdCQUFrQixXQUN2QixJQUFLcFIsS0FBS21SLE1BQU8sQ0FDZixJQUFJeEQsRUFBUzBDLEVBQVNtQixzQkFBc0J4UixLQUFLeUYsVUFFN0NrSSxJQUNGM04sS0FBS21SLE1BQVF4RCxFQUFPdE0sY0FBY2dFLElBSXRDLE9BQU9yRixLQUFLbVIsT0FHZHRMLEVBQU93TSxjQUFnQixXQUNyQixJQUFJQyxFQUFrQnBTLEVBQUtGLEtBQUt5RixTQUFTMEYsWUFDckNvSCxFQUFZL0IsRUFnQmhCLE9BZEk4QixFQUFnQi9LLFNBQVNuQyxJQUMzQm1OLEVBQVkvQixFQUVSdFEsRUFBS0YsS0FBS21SLE9BQU81SixTQUFTbkMsS0FDNUJtTixFQUFZL0IsSUFFTDhCLEVBQWdCL0ssU0FBU25DLEdBQ2xDbU4sRUFBWS9CLEVBQ0g4QixFQUFnQi9LLFNBQVNuQyxHQUNsQ21OLEVBQVkvQixFQUNIdFEsRUFBS0YsS0FBS21SLE9BQU81SixTQUFTbkMsS0FDbkNtTixFQUFZL0IsR0FHUCtCLEdBR1QxTSxFQUFPeUwsY0FBZ0IsV0FDckIsT0FBdUQsRUFBaERwUixFQUFLRixLQUFLeUYsVUFBVVMsUUFBUSxXQUFXMUIsUUFHaERxQixFQUFPZ00saUJBQW1CLFdBQ3hCLElBQUloSCxFQUFTN0ssS0FFVHdTLEVBQWEsR0FFa0IsbUJBQXhCeFMsS0FBS3lKLFFBQVFvSCxPQUN0QjJCLEVBQVdqUCxHQUFLLFNBQVUyRCxHQUV4QixPQURBQSxFQUFLdUwsUUFBVS9LLEVBQWMsR0FBSVIsRUFBS3VMLFFBQVM1SCxFQUFPcEIsUUFBUW9ILE9BQU8zSixFQUFLdUwsVUFBWSxJQUMvRXZMLEdBR1RzTCxFQUFXM0IsT0FBUzdRLEtBQUt5SixRQUFRb0gsT0FHbkMsSUFBSTZCLEVBQWUsQ0FDakJILFVBQVd2UyxLQUFLcVMsZ0JBQ2hCTSxVQUFXLENBQ1Q5QixPQUFRMkIsRUFDUjFCLEtBQU0sQ0FDSjhCLFFBQVM1UyxLQUFLeUosUUFBUXFILE1BRXhCK0IsZ0JBQWlCLENBQ2ZDLGtCQUFtQjlTLEtBQUt5SixRQUFRc0gsWUFZdEMsTUFONkIsV0FBekIvUSxLQUFLeUosUUFBUXdILFVBQ2Z5QixFQUFhQyxVQUFVSSxXQUFhLENBQ2xDSCxTQUFTLElBSU5GLEdBSVRyQyxFQUFTckosaUJBQW1CLFNBQTBCMUUsR0FDcEQsT0FBT3RDLEtBQUtpSCxLQUFLLFdBQ2YsSUFBSUMsRUFBT2hILEVBQUtGLE1BQU1rSCxLQUFLbEMsR0FTM0IsR0FMS2tDLElBQ0hBLEVBQU8sSUFBSW1KLEVBQVNyUSxLQUhVLGlCQUFYc0MsRUFBc0JBLEVBQVMsTUFJbERwQyxFQUFLRixNQUFNa0gsS0FBS2xDLEVBQVVrQyxJQUdOLGlCQUFYNUUsRUFBcUIsQ0FDOUIsUUFBNEIsSUFBakI0RSxFQUFLNUUsR0FDZCxNQUFNLElBQUk0SyxVQUFVLG9CQUF1QjVLLEVBQVMsS0FHdEQ0RSxFQUFLNUUsU0FLWCtOLEVBQVNxQixZQUFjLFNBQXFCak8sR0FDMUMsSUFBSUEsR0EvUnVCLElBK1JiQSxFQUFNeUgsUUFBcUQsVUFBZnpILEVBQU0yQyxNQXJTbEQsSUFxU3NFM0MsRUFBTXlILE9BTTFGLElBRkEsSUFBSThILEVBQVUsR0FBRzVILE1BQU14SSxLQUFLN0IsU0FBU3NLLGlCQUFpQmhHLElBRTdDZCxFQUFJLEVBQUdnSixFQUFNeUYsRUFBUXhPLE9BQVFELEVBQUlnSixFQUFLaEosSUFBSyxDQUNsRCxJQUFJb0osRUFBUzBDLEVBQVNtQixzQkFBc0J3QixFQUFRek8sSUFFaEQwTyxFQUFVL1MsRUFBSzhTLEVBQVF6TyxJQUFJMkMsS0FBS2xDLEdBQ2hDNkcsRUFBZ0IsQ0FDbEJBLGNBQWVtSCxFQUFRek8sSUFPekIsR0FKSWQsR0FBd0IsVUFBZkEsRUFBTTJDLE9BQ2pCeUYsRUFBY3FILFdBQWF6UCxHQUd4QndQLEVBQUwsQ0FJQSxJQUFJRSxFQUFlRixFQUFROUIsTUFFM0IsR0FBS2pSLEVBQUt5TixHQUFRcEcsU0FBU25DLE1BSXZCM0IsSUFBeUIsVUFBZkEsRUFBTTJDLE1BQW9CLGtCQUFrQmhELEtBQUtLLEVBQU1LLE9BQU9tSCxVQUEyQixVQUFmeEgsRUFBTTJDLE1BalVsRixJQWlVc0czQyxFQUFNeUgsUUFBMEJoTCxFQUFLcUcsU0FBU29ILEVBQVFsSyxFQUFNSyxTQUE5SyxDQUlBLElBQUlzUCxFQUFZbFQsRUFBS29GLE1BQU1BLEVBQU13SSxLQUFNakMsR0FDdkMzTCxFQUFLeU4sR0FBUTdMLFFBQVFzUixHQUVqQkEsRUFBVXJHLHVCQU1WLGlCQUFrQmhNLFNBQVNnSyxpQkFDN0I3SyxFQUFLYSxTQUFTK1EsTUFBTXhGLFdBQVcxQixJQUFJLFlBQWEsS0FBTTFLLEVBQUs2UixNQUc3RGlCLEVBQVF6TyxHQUFHcUMsYUFBYSxnQkFBaUIsU0FDekMxRyxFQUFLaVQsR0FBYzFNLFlBQVlyQixHQUMvQmxGLEVBQUt5TixHQUFRbEgsWUFBWXJCLEdBQWdCdEQsUUFBUTVCLEVBQUtvRixNQUFNQSxFQUFNeUksT0FBUWxDLFNBSTlFd0UsRUFBU21CLHNCQUF3QixTQUErQnRRLEdBQzlELElBQUl5TSxFQUNBeE0sRUFBV3JCLEVBQUttQix1QkFBdUJDLEdBTTNDLE9BSklDLElBQ0Z3TSxFQUFTNU0sU0FBU00sY0FBY0YsSUFHM0J3TSxHQUFVek0sRUFBUWlLLFlBSTNCa0YsRUFBU2dELHVCQUF5QixTQUFnQzVQLEdBUWhFLElBQUksa0JBQWtCTCxLQUFLSyxFQUFNSyxPQUFPbUgsV0E5V3hCLEtBOFdtQ3hILEVBQU15SCxPQWhYeEMsS0FnWG1FekgsRUFBTXlILFFBeFdyRSxLQXdXa0d6SCxFQUFNeUgsT0ExVzFHLEtBMFcwSXpILEVBQU15SCxPQUE4QmhMLEVBQUt1RCxFQUFNSyxRQUFRb0MsUUFBUWIsR0FBZWIsU0FBVytMLEVBQWVuTixLQUFLSyxFQUFNeUgsVUFJaFJ6SCxFQUFNNEQsaUJBQ041RCxFQUFNME8sbUJBRUZuUyxLQUFLdVIsV0FBWXJSLEVBQUtGLE1BQU11SCxTQUFTbkMsSUFBekMsQ0FJQSxJQUFJdUksRUFBUzBDLEVBQVNtQixzQkFBc0J4UixNQUV4Q3lSLEVBQVd2UixFQUFLeU4sR0FBUXBHLFNBQVNuQyxHQUVyQyxJQUFLcU0sR0EvWFksS0ErWENoTyxFQUFNeUgsT0E3WFIsS0E2WG9DekgsRUFBTXlILFVBQTRCdUcsR0EvWHJFLEtBK1hrRmhPLEVBQU15SCxPQTdYekYsS0E2WHFIekgsRUFBTXlILE9BQTNJLENBVUEsSUFBSW9JLEVBQVEsR0FBR2xJLE1BQU14SSxLQUFLK0ssRUFBT3RDLGlCQUFpQmhHLElBRWxELEdBQXFCLElBQWpCaU8sRUFBTTlPLE9BQVYsQ0FJQSxJQUFJZ0csRUFBUThJLEVBQU1oSSxRQUFRN0gsRUFBTUssUUF6WWIsS0EyWWZMLEVBQU15SCxPQUFzQyxFQUFSVixHQUV0Q0EsSUEzWW1CLEtBOFlqQi9HLEVBQU15SCxPQUFnQ1YsRUFBUThJLEVBQU05TyxPQUFTLEdBRS9EZ0csSUFHRUEsRUFBUSxJQUNWQSxFQUFRLEdBR1Y4SSxFQUFNOUksR0FBTzdELGFBaENiLENBQ0UsR0FoWWUsS0FnWVhsRCxFQUFNeUgsTUFBMEIsQ0FDbEMsSUFBSXBGLEVBQVM2SCxFQUFPdE0sY0FBY2dFLEdBQ2xDbkYsRUFBSzRGLEdBQVFoRSxRQUFRLFNBR3ZCNUIsRUFBS0YsTUFBTThCLFFBQVEsWUFoY0w0RCxFQTZkTDJLLEVBN2Q4QnpLLEVBNmRkLENBQUMsQ0FDNUJkLElBQUssVUFDTHFDLElBQUssV0FDSCxNQTFhUSxVQTRhVCxDQUNEckMsSUFBSyxVQUNMcUMsSUFBSyxXQUNILE9BQU9pQixJQUVSLENBQ0R0RCxJQUFLLGNBQ0xxQyxJQUFLLFdBQ0gsT0FBT2tCLE1BMWVvQjFDLEVBNmRSLE9BNWRUdEIsRUFBa0JxQixFQUFZaEQsVUFBV2lELEdBQ3JEQyxHQUFhdkIsRUFBa0JxQixFQUFhRSxHQTRldkN5SyxFQTFXVCxHQW1YQW5RLEVBQUthLFVBQVVxRyxHQUFHOUIsRUFBTXFMLGlCQUFrQnRMLEVBQXNCZ0wsRUFBU2dELHdCQUF3QmpNLEdBQUc5QixFQUFNcUwsaUJBQWtCdEwsRUFBZWdMLEVBQVNnRCx3QkFBd0JqTSxHQUFHOUIsRUFBTUMsZUFBaUIsSUFBTUQsRUFBTXNMLGVBQWdCUCxFQUFTcUIsYUFBYXRLLEdBQUc5QixFQUFNQyxlQUFnQkYsRUFBc0IsU0FBVTVCLEdBQy9TQSxFQUFNNEQsaUJBQ041RCxFQUFNME8sa0JBRU45QixFQUFTckosaUJBQWlCcEUsS0FBSzFDLEVBQUtGLE1BQU8sWUFDMUNvSCxHQUFHOUIsRUFBTUMsZUFBZ0JGLEVBQXFCLFNBQVVrTyxHQUN6REEsRUFBRXBCLG9CQVFKalMsRUFBS3FELEdBQUd3QixHQUFRc0wsRUFBU3JKLGlCQUN6QjlHLEVBQUtxRCxHQUFHd0IsR0FBTVcsWUFBYzJLLEVBRTVCblEsRUFBS3FELEdBQUd3QixHQUFNeUMsV0FBYSxXQUV6QixPQURBdEgsRUFBS3FELEdBQUd3QixHQUFRSSxFQUNUa0wsRUFBU3JKLGtCQUdYcUosSUFTVixTQUFVOVEsRUFBUUMsR0FDRSxpQkFBWkMsU0FBMEMsb0JBQVhDLE9BQXlCQSxPQUFPRCxRQUFVRCxFQUFRRyxRQUFRLFVBQVdBLFFBQVEsYUFBY0EsUUFBUSxjQUN2SCxtQkFBWEMsUUFBeUJBLE9BQU9DLElBQU1ELE9BQU8sQ0FBQyxTQUFVLFlBQWEsYUFBY0osR0FDekZELEVBQU9pVSxRQUFVaFUsRUFBUUQsRUFBT1EsT0FBT1IsRUFBTytRLE9BQU8vUSxFQUFPTyxNQUgvRCxDQUlFRSxLQUFNLFNBQVdDLEVBQUVxUSxFQUFPeFEsR0FBUSxhQU1sQyxTQUFTdUUsRUFBa0JQLEVBQVFRLEdBQ2pDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQ3JDLElBQUlFLEVBQWFILEVBQU1DLEdBQ3ZCRSxFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQ2pERCxFQUFXRSxjQUFlLEVBQ3RCLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FDakRuQyxPQUFPb0MsZUFBZWYsRUFBUVcsRUFBV0ssSUFBS0wsSUF5QmxELFNBQVNpRCxFQUFjNUQsR0FDckIsSUFBSyxJQUFJUyxFQUFJLEVBQUdBLEVBQUlKLFVBQVVLLE9BQVFELElBQUssQ0FDekMsSUFBSW9ELEVBQXlCLE1BQWhCeEQsVUFBVUksR0FBYUosVUFBVUksR0FBSyxHQUMvQ3FELEVBQVVuRixPQUFPb0YsS0FBS0YsR0FFa0IsbUJBQWpDbEYsT0FBT3FGLHdCQUNoQkYsRUFBVUEsRUFBUUcsT0FBT3RGLE9BQU9xRixzQkFBc0JILEdBQVFLLE9BQU8sU0FBVUMsR0FDN0UsT0FBT3hGLE9BQU95Rix5QkFBeUJQLEVBQVFNLEdBQUt2RCxlQUl4RGtELEVBQVFPLFFBQVEsU0FBVXJELEdBMUI5QixJQUF5QjVDLEVBQUs0QyxFQUFLaEMsRUFBVlosRUEyQkg0QixFQTNCYWhCLEVBMkJBNkUsRUEzQkw3QyxFQTJCQUEsR0ExQnhCQSxLQUFPNUMsRUFDVE8sT0FBT29DLGVBQWUzQyxFQUFLNEMsRUFBSyxDQUM5QmhDLE1BQU9BLEVBQ1A0QixZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsVUFBVSxJQUdaMUMsRUFBSTRDLEdBQU9oQyxJQXNCYixPQUFPZ0IsRUFVVCxJQUF3QjVELEVBTWxCNkUsRUFFQUMsRUFDQUMsRUFDQUUsRUFDQXNPLEVBQ0FDLEVBQ0FyTCxFQWNBbUksRUFPQXBJLEVBY0F1TCxFQUFBQSxFQUlBck8sRUFZQUYsRUFBQUEsRUFJQUMsRUFBQUEsRUFLQXVPLEVBQUFBLEVBQUFBLEVBQUFBLEVBYUFKLEVBaWtCTixPQXB0QkF2VCxFQUFJQSxHQUFLQSxFQUFFMEMsZUFBZSxXQUFhMUMsRUFBVyxRQUFJQSxFQUN0RHFRLEVBQVNBLEdBQVVBLEVBQU8zTixlQUFlLFdBQWEyTixFQUFnQixRQUFJQSxFQUMxRXhRLEVBQU9BLEdBQVFBLEVBQUs2QyxlQUFlLFdBQWE3QyxFQUFjLFFBQUlBLEVBaUU1RGlGLEVBQU8sVUFHUEUsRUFBWSxLQURaRCxFQUFXLGNBRVhHLEdBVmtCakYsRUFxcEJ0QkQsR0Ezb0I4QnNELEdBQUd3QixHQUM3QjBPLEVBQWUsYUFDZkMsRUFBcUIsSUFBSXZRLE9BQU8sVUFBWXNRLEVBQWUsT0FBUSxLQXNCbkVyTCxFQUFVLENBQ1p5TCxXQUFXLEVBQ1hDLFNBQVUsdUdBQ1ZoUyxRQUFTLGNBQ1RpUyxNQUFPLEdBQ1BDLE1BQU8sRUFDUEMsT0FiRXpELEVBQWdCLENBQ2xCMEQsS0FBTSxPQUNOQyxJQUFLLE1BQ0xDLE1BQU8sUUFDUEMsT0FBUSxTQUNSQyxLQUFNLFNBU05uVCxXQTVCRWtILEVBQWMsQ0FDaEJ3TCxVQUFXLFVBQ1hDLFNBQVUsU0FDVkMsTUFBTyw0QkFDUGpTLFFBQVMsU0FDVGtTLE1BQU8sa0JBQ1BDLEtBQU0sVUFDTjlTLFNBQVUsbUJBQ1ZvUixVQUFXLG9CQUNYMUIsT0FBUSxrQkFDUjBELFVBQVcsMkJBQ1hDLGtCQUFtQixpQkFDbkJ6RCxTQUFVLHFCQWlCVndCLFVBQVcsTUFDWDFCLE9BQVEsRUFDUjBELFdBQVcsRUFDWEMsa0JBQW1CLE9BQ25CekQsU0FBVSxnQkFFUjRDLEVBRUcsTUFFSHJPLEVBQVEsQ0FDVndJLEtBQU0sT0FBUzdJLEVBQ2Y4SSxPQUFRLFNBQVc5SSxFQUNuQjJJLE1BUEUrRixFQUNJLFFBTVMxTyxFQUNmNEksTUFBTyxRQUFVNUksRUFDakJ3UCxTQUFVLFdBQWF4UCxFQUN2QnlMLE1BQU8sUUFBVXpMLEVBQ2pCeVAsUUFBUyxVQUFZelAsRUFDckIwUCxTQUFVLFdBQWExUCxFQUN2QjhELFdBQVksYUFBZTlELEVBQzNCK0QsV0FBWSxhQUFlL0QsR0FFekJHLEVBQ0ksT0FESkEsRUFFSSxPQUVKQyxFQUVhLGlCQUZiQSxFQUdLLFNBRUx1TyxFQUNLLFFBRExBLEVBRUssUUFGTEEsRUFHSyxRQUhMQSxFQUlNLFNBU05KLEVBRUosV0FDRSxTQUFTQSxFQUFRdFMsRUFBU29CLEdBS3hCLFFBQXNCLElBQVhnTyxFQUNULE1BQU0sSUFBSXBELFVBQVUsZ0VBSXRCbE4sS0FBSzRVLFlBQWEsRUFDbEI1VSxLQUFLNlUsU0FBVyxFQUNoQjdVLEtBQUs4VSxZQUFjLEdBQ25COVUsS0FBSytVLGVBQWlCLEdBQ3RCL1UsS0FBS2tSLFFBQVUsS0FFZmxSLEtBQUtrQixRQUFVQSxFQUNmbEIsS0FBS3NDLE9BQVN0QyxLQUFLMEosV0FBV3BILEdBQzlCdEMsS0FBS2dWLElBQU0sS0FFWGhWLEtBQUtpVixnQkFJUCxJQWhLa0J2UCxFQUFhQyxFQUFZQyxFQWdLdkNDLEVBQVMyTixFQUFROVEsVUFraEJyQixPQS9nQkFtRCxFQUFPcVAsT0FBUyxXQUNkbFYsS0FBSzRVLFlBQWEsR0FHcEIvTyxFQUFPc1AsUUFBVSxXQUNmblYsS0FBSzRVLFlBQWEsR0FHcEIvTyxFQUFPdVAsY0FBZ0IsV0FDckJwVixLQUFLNFUsWUFBYzVVLEtBQUs0VSxZQUcxQi9PLEVBQU9DLE9BQVMsU0FBZ0JyQyxHQUM5QixHQUFLekQsS0FBSzRVLFdBSVYsR0FBSW5SLEVBQU8sQ0FDVCxJQUFJNFIsRUFBVXJWLEtBQUtvUyxZQUFZcE4sU0FDM0JpTyxFQUFVL1MsRUFBS3VELEVBQU13TSxlQUFlL0ksS0FBS21PLEdBRXhDcEMsSUFDSEEsRUFBVSxJQUFJalQsS0FBS29TLFlBQVkzTyxFQUFNd00sY0FBZWpRLEtBQUtzVixzQkFDekRwVixFQUFLdUQsRUFBTXdNLGVBQWUvSSxLQUFLbU8sRUFBU3BDLElBRzFDQSxFQUFROEIsZUFBZVEsT0FBU3RDLEVBQVE4QixlQUFlUSxNQUVuRHRDLEVBQVF1Qyx1QkFDVnZDLEVBQVF3QyxPQUFPLEtBQU14QyxHQUVyQkEsRUFBUXlDLE9BQU8sS0FBTXpDLE9BRWxCLENBQ0wsR0FBSS9TLEVBQUtGLEtBQUsyVixpQkFBaUJwTyxTQUFTbkMsR0FHdEMsWUFGQXBGLEtBQUswVixPQUFPLEtBQU0xVixNQUtwQkEsS0FBS3lWLE9BQU8sS0FBTXpWLFFBSXRCNkYsRUFBT2lCLFFBQVUsV0FDZmtFLGFBQWFoTCxLQUFLNlUsVUFDbEIzVSxFQUFLNkcsV0FBVy9HLEtBQUtrQixRQUFTbEIsS0FBS29TLFlBQVlwTixVQUMvQzlFLEVBQUtGLEtBQUtrQixTQUFTMEosSUFBSTVLLEtBQUtvUyxZQUFZbk4sV0FDeEMvRSxFQUFLRixLQUFLa0IsU0FBU2dGLFFBQVEsVUFBVTBFLElBQUksaUJBRXJDNUssS0FBS2dWLEtBQ1A5VSxFQUFLRixLQUFLZ1YsS0FBS1ksU0FHakI1VixLQUFLNFUsV0FBYSxLQUNsQjVVLEtBQUs2VSxTQUFXLEtBQ2hCN1UsS0FBSzhVLFlBQWMsTUFDbkI5VSxLQUFLK1UsZUFBaUIsUUFFbEIvVSxLQUFLa1IsU0FDUGxSLEtBQUtrUixRQUFRYyxVQUdmaFMsS0FBS2tSLFFBQVUsS0FDZmxSLEtBQUtrQixRQUFVLEtBQ2ZsQixLQUFLc0MsT0FBUyxLQUNkdEMsS0FBS2dWLElBQU0sTUFHYm5QLEVBQU9pSixLQUFPLFdBQ1osSUFBSXhPLEVBQVFOLEtBRVosR0FBMEMsU0FBdENFLEVBQUtGLEtBQUtrQixTQUFTTyxJQUFJLFdBQ3pCLE1BQU0sSUFBSTRCLE1BQU0sdUNBR2xCLElBQUlzTyxFQUFZelIsRUFBS29GLE1BQU10RixLQUFLb1MsWUFBWTlNLE1BQU1zSSxNQUVsRCxHQUFJNU4sS0FBSzZWLGlCQUFtQjdWLEtBQUs0VSxXQUFZLENBQzNDMVUsRUFBS0YsS0FBS2tCLFNBQVNZLFFBQVE2UCxHQUMzQixJQUFJbUUsRUFBYTVWLEVBQUtxRyxTQUFTdkcsS0FBS2tCLFFBQVE2VSxjQUFjaEwsZ0JBQWlCL0ssS0FBS2tCLFNBRWhGLEdBQUl5USxFQUFVNUUsdUJBQXlCK0ksRUFDckMsT0FHRixJQUFJZCxFQUFNaFYsS0FBSzJWLGdCQUNYSyxFQUFRbFcsRUFBS2EsT0FBT1gsS0FBS29TLFlBQVlyTixNQUN6Q2lRLEVBQUlwTyxhQUFhLEtBQU1vUCxHQUN2QmhXLEtBQUtrQixRQUFRMEYsYUFBYSxtQkFBb0JvUCxHQUM5Q2hXLEtBQUtpVyxhQUVEalcsS0FBS3NDLE9BQU91UixXQUNkM1QsRUFBSzhVLEdBQUt6SSxTQUFTbkgsR0FHckIsSUFBSW1OLEVBQTZDLG1CQUExQnZTLEtBQUtzQyxPQUFPaVEsVUFBMkJ2UyxLQUFLc0MsT0FBT2lRLFVBQVUzUCxLQUFLNUMsS0FBTWdWLEVBQUtoVixLQUFLa0IsU0FBV2xCLEtBQUtzQyxPQUFPaVEsVUFFNUgyRCxFQUFhbFcsS0FBS21XLGVBQWU1RCxHQUVyQ3ZTLEtBQUtvVyxtQkFBbUJGLEdBQ3hCLElBQUkzQixHQUFzQyxJQUExQnZVLEtBQUtzQyxPQUFPaVMsVUFBc0J4VCxTQUFTK1EsS0FBTzVSLEVBQUthLFVBQVVzVixLQUFLclcsS0FBS3NDLE9BQU9pUyxXQUNsR3JVLEVBQUs4VSxHQUFLOU4sS0FBS2xILEtBQUtvUyxZQUFZcE4sU0FBVWhGLE1BRXJDRSxFQUFLcUcsU0FBU3ZHLEtBQUtrQixRQUFRNlUsY0FBY2hMLGdCQUFpQi9LLEtBQUtnVixNQUNsRTlVLEVBQUs4VSxHQUFLc0IsU0FBUy9CLEdBR3JCclUsRUFBS0YsS0FBS2tCLFNBQVNZLFFBQVE5QixLQUFLb1MsWUFBWTlNLE1BQU1tUCxVQUNsRHpVLEtBQUtrUixRQUFVLElBQUlaLEVBQU90USxLQUFLa0IsUUFBUzhULEVBQUssQ0FDM0N6QyxVQUFXMkQsRUFDWHZELFVBQVcsQ0FDVDlCLE9BQVEsQ0FDTkEsT0FBUTdRLEtBQUtzQyxPQUFPdU8sUUFFdEJDLEtBQU0sQ0FDSnlGLFNBQVV2VyxLQUFLc0MsT0FBT2tTLG1CQUV4QmdDLE1BQU8sQ0FDTHRWLFFBQVNtRSxHQUVYd04sZ0JBQWlCLENBQ2ZDLGtCQUFtQjlTLEtBQUtzQyxPQUFPeU8sV0FHbkMwRixTQUFVLFNBQWtCdlAsR0FDdEJBLEVBQUt3UCxvQkFBc0J4UCxFQUFLcUwsV0FDbENqUyxFQUFNcVcsNkJBQTZCelAsSUFHdkMwUCxTQUFVLFNBQWtCMVAsR0FDMUI1RyxFQUFNcVcsNkJBQTZCelAsTUFHdkNoSCxFQUFLOFUsR0FBS3pJLFNBQVNuSCxHQUtmLGlCQUFrQnJFLFNBQVNnSyxpQkFDN0I3SyxFQUFLYSxTQUFTK1EsTUFBTXhGLFdBQVdsRixHQUFHLFlBQWEsS0FBTWxILEVBQUs2UixNQUc1RCxJQUFJOEUsRUFBVyxXQUNUdlcsRUFBTWdDLE9BQU91UixXQUNmdlQsRUFBTXdXLGlCQUdSLElBQUlDLEVBQWlCelcsRUFBTXdVLFlBQzNCeFUsRUFBTXdVLFlBQWMsS0FDcEI1VSxFQUFLSSxFQUFNWSxTQUFTWSxRQUFReEIsRUFBTThSLFlBQVk5TSxNQUFNdUksT0FFaERrSixJQUFtQnBELEdBQ3JCclQsRUFBTW9WLE9BQU8sS0FBTXBWLElBSXZCLEdBQUlKLEVBQUtGLEtBQUtnVixLQUFLek4sU0FBU25DLEdBQWlCLENBQzNDLElBQUk1RCxFQUFxQjFCLEVBQUt5QixpQ0FBaUN2QixLQUFLZ1YsS0FDcEU5VSxFQUFLRixLQUFLZ1YsS0FBS3hVLElBQUlWLEVBQUtLLGVBQWdCMFcsR0FBVXJULHFCQUFxQmhDLFFBRXZFcVYsTUFLTmhSLEVBQU9nSixLQUFPLFNBQWNtSSxHQUMxQixJQUFJbk0sRUFBUzdLLEtBRVRnVixFQUFNaFYsS0FBSzJWLGdCQUNYdkMsRUFBWWxULEVBQUtvRixNQUFNdEYsS0FBS29TLFlBQVk5TSxNQUFNd0ksTUFFOUMrSSxFQUFXLFdBQ1RoTSxFQUFPaUssY0FBZ0JuQixHQUFtQnFCLEVBQUk3SixZQUNoRDZKLEVBQUk3SixXQUFXOEwsWUFBWWpDLEdBRzdCbkssRUFBT3FNLGlCQUVQck0sRUFBTzNKLFFBQVFpVyxnQkFBZ0Isb0JBRS9CalgsRUFBSzJLLEVBQU8zSixTQUFTWSxRQUFRK0ksRUFBT3VILFlBQVk5TSxNQUFNeUksUUFFL0IsT0FBbkJsRCxFQUFPcUcsU0FDVHJHLEVBQU9xRyxRQUFRYyxVQUdiZ0YsR0FDRkEsS0FNSixHQUZBOVcsRUFBS0YsS0FBS2tCLFNBQVNZLFFBQVFzUixJQUV2QkEsRUFBVXJHLHFCQUFkLENBZUEsR0FYQTdNLEVBQUs4VSxHQUFLdk8sWUFBWXJCLEdBR2xCLGlCQUFrQnJFLFNBQVNnSyxpQkFDN0I3SyxFQUFLYSxTQUFTK1EsTUFBTXhGLFdBQVcxQixJQUFJLFlBQWEsS0FBTTFLLEVBQUs2UixNQUc3RC9SLEtBQUsrVSxlQUFlbkIsSUFBaUIsRUFDckM1VCxLQUFLK1UsZUFBZW5CLElBQWlCLEVBQ3JDNVQsS0FBSytVLGVBQWVuQixJQUFpQixFQUVqQzFULEVBQUtGLEtBQUtnVixLQUFLek4sU0FBU25DLEdBQWlCLENBQzNDLElBQUk1RCxFQUFxQjFCLEVBQUt5QixpQ0FBaUN5VCxHQUMvRDlVLEVBQUs4VSxHQUFLeFUsSUFBSVYsRUFBS0ssZUFBZ0IwVyxHQUFVclQscUJBQXFCaEMsUUFFbEVxVixJQUdGN1csS0FBSzhVLFlBQWMsS0FHckJqUCxFQUFPb00sT0FBUyxXQUNPLE9BQWpCalMsS0FBS2tSLFNBQ1BsUixLQUFLa1IsUUFBUWdCLGtCQUtqQnJNLEVBQU9nUSxjQUFnQixXQUNyQixPQUFPN1QsUUFBUWhDLEtBQUtvWCxhQUd0QnZSLEVBQU91USxtQkFBcUIsU0FBNEJGLEdBQ3REaFcsRUFBS0YsS0FBSzJWLGlCQUFpQnBKLFNBQVNrSCxFQUFlLElBQU15QyxJQUczRHJRLEVBQU84UCxjQUFnQixXQUVyQixPQURBM1YsS0FBS2dWLElBQU1oVixLQUFLZ1YsS0FBTzlVLEVBQUtGLEtBQUtzQyxPQUFPd1IsVUFBVSxHQUMzQzlULEtBQUtnVixLQUdkblAsRUFBT29RLFdBQWEsV0FDbEIsSUFBSWpCLEVBQU1oVixLQUFLMlYsZ0JBQ2YzVixLQUFLcVgsa0JBQWtCblgsRUFBSzhVLEVBQUkzSixpQkFBaUJoRyxJQUEwQnJGLEtBQUtvWCxZQUNoRmxYLEVBQUs4VSxHQUFLdk8sWUFBWXJCLEVBQWlCLElBQU1BLElBRy9DUyxFQUFPd1Isa0JBQW9CLFNBQTJCQyxFQUFVQyxHQUM5RCxJQUFJdEQsRUFBT2pVLEtBQUtzQyxPQUFPMlIsS0FFQSxpQkFBWnNELElBQXlCQSxFQUFRcFYsVUFBWW9WLEVBQVEzSCxRQUUxRHFFLEVBQ0cvVCxFQUFLcVgsR0FBUzVKLFNBQVM1SixHQUFHdVQsSUFDN0JBLEVBQVNFLFFBQVFDLE9BQU9GLEdBRzFCRCxFQUFTSSxLQUFLeFgsRUFBS3FYLEdBQVNHLFFBRzlCSixFQUFTckQsRUFBTyxPQUFTLFFBQVFzRCxJQUlyQzFSLEVBQU91UixTQUFXLFdBQ2hCLElBQUlyRCxFQUFRL1QsS0FBS2tCLFFBQVFFLGFBQWEsdUJBTXRDLE9BSksyUyxJQUNIQSxFQUFxQyxtQkFBdEIvVCxLQUFLc0MsT0FBT3lSLE1BQXVCL1QsS0FBS3NDLE9BQU95UixNQUFNblIsS0FBSzVDLEtBQUtrQixTQUFXbEIsS0FBS3NDLE9BQU95UixPQUdoR0EsR0FJVGxPLEVBQU9zUSxlQUFpQixTQUF3QjVELEdBQzlDLE9BQU8vQixFQUFjK0IsRUFBVWpQLGdCQUdqQ3VDLEVBQU9vUCxjQUFnQixXQUNyQixJQUFJdkksRUFBUzFNLEtBRUVBLEtBQUtzQyxPQUFPUixRQUFRSCxNQUFNLEtBQ2hDd0csUUFBUSxTQUFVckcsR0FDekIsR0FBZ0IsVUFBWkEsRUFDRjVCLEVBQUt3TSxFQUFPeEwsU0FBU2tHLEdBQUdzRixFQUFPMEYsWUFBWTlNLE1BQU1vTCxNQUFPaEUsRUFBT3BLLE9BQU9uQixTQUFVLFNBQVVzQyxHQUN4RixPQUFPaUosRUFBTzVHLE9BQU9yQyxVQUVsQixHQUFJM0IsSUFBWThSLEVBQWdCLENBQ3JDLElBQUkrRCxFQUFVN1YsSUFBWThSLEVBQWdCbEgsRUFBTzBGLFlBQVk5TSxNQUFNeUQsV0FBYTJELEVBQU8wRixZQUFZOU0sTUFBTW9QLFFBQ3JHa0QsRUFBVzlWLElBQVk4UixFQUFnQmxILEVBQU8wRixZQUFZOU0sTUFBTTBELFdBQWEwRCxFQUFPMEYsWUFBWTlNLE1BQU1xUCxTQUMxR3pVLEVBQUt3TSxFQUFPeEwsU0FBU2tHLEdBQUd1USxFQUFTakwsRUFBT3BLLE9BQU9uQixTQUFVLFNBQVVzQyxHQUNqRSxPQUFPaUosRUFBTytJLE9BQU9oUyxLQUNwQjJELEdBQUd3USxFQUFVbEwsRUFBT3BLLE9BQU9uQixTQUFVLFNBQVVzQyxHQUNoRCxPQUFPaUosRUFBT2dKLE9BQU9qUyxLQUl6QnZELEVBQUt3TSxFQUFPeEwsU0FBU2dGLFFBQVEsVUFBVWtCLEdBQUcsZ0JBQWlCLFdBQ3pELE9BQU9zRixFQUFPbUMsV0FJZDdPLEtBQUtzQyxPQUFPbkIsU0FDZG5CLEtBQUtzQyxPQUFTb0YsRUFBYyxHQUFJMUgsS0FBS3NDLE9BQVEsQ0FDM0NSLFFBQVMsU0FDVFgsU0FBVSxLQUdabkIsS0FBSzZYLGFBSVRoUyxFQUFPZ1MsVUFBWSxXQUNqQixJQUFJQyxTQUFtQjlYLEtBQUtrQixRQUFRRSxhQUFhLHdCQUU3Q3BCLEtBQUtrQixRQUFRRSxhQUFhLFVBQTBCLFdBQWQwVyxLQUN4QzlYLEtBQUtrQixRQUFRMEYsYUFBYSxzQkFBdUI1RyxLQUFLa0IsUUFBUUUsYUFBYSxVQUFZLElBQ3ZGcEIsS0FBS2tCLFFBQVEwRixhQUFhLFFBQVMsTUFJdkNmLEVBQU80UCxPQUFTLFNBQWdCaFMsRUFBT3dQLEdBQ3JDLElBQUlvQyxFQUFVclYsS0FBS29TLFlBQVlwTixVQUMvQmlPLEVBQVVBLEdBQVcvUyxFQUFLdUQsRUFBTXdNLGVBQWUvSSxLQUFLbU8sTUFHbERwQyxFQUFVLElBQUlqVCxLQUFLb1MsWUFBWTNPLEVBQU13TSxjQUFlalEsS0FBS3NWLHNCQUN6RHBWLEVBQUt1RCxFQUFNd00sZUFBZS9JLEtBQUttTyxFQUFTcEMsSUFHdEN4UCxJQUNGd1AsRUFBUThCLGVBQThCLFlBQWZ0UixFQUFNMkMsS0FBcUJ3TixFQUFnQkEsSUFBaUIsR0FHakYxVCxFQUFLK1MsRUFBUTBDLGlCQUFpQnBPLFNBQVNuQyxJQUFtQjZOLEVBQVE2QixjQUFnQm5CLEVBQ3BGVixFQUFRNkIsWUFBY25CLEdBSXhCM0ksYUFBYWlJLEVBQVE0QixVQUNyQjVCLEVBQVE2QixZQUFjbkIsRUFFakJWLEVBQVEzUSxPQUFPMFIsT0FBVWYsRUFBUTNRLE9BQU8wUixNQUFNbEYsS0FLbkRtRSxFQUFRNEIsU0FBV3BVLFdBQVcsV0FDeEJ3UyxFQUFRNkIsY0FBZ0JuQixHQUMxQlYsRUFBUW5FLFFBRVRtRSxFQUFRM1EsT0FBTzBSLE1BQU1sRixNQVJ0Qm1FLEVBQVFuRSxTQVdaakosRUFBTzZQLE9BQVMsU0FBZ0JqUyxFQUFPd1AsR0FDckMsSUFBSW9DLEVBQVVyVixLQUFLb1MsWUFBWXBOLFVBQy9CaU8sRUFBVUEsR0FBVy9TLEVBQUt1RCxFQUFNd00sZUFBZS9JLEtBQUttTyxNQUdsRHBDLEVBQVUsSUFBSWpULEtBQUtvUyxZQUFZM08sRUFBTXdNLGNBQWVqUSxLQUFLc1Ysc0JBQ3pEcFYsRUFBS3VELEVBQU13TSxlQUFlL0ksS0FBS21PLEVBQVNwQyxJQUd0Q3hQLElBQ0Z3UCxFQUFROEIsZUFBOEIsYUFBZnRSLEVBQU0yQyxLQUFzQndOLEVBQWdCQSxJQUFpQixHQUdsRlgsRUFBUXVDLHlCQUlaeEssYUFBYWlJLEVBQVE0QixVQUNyQjVCLEVBQVE2QixZQUFjbkIsRUFFakJWLEVBQVEzUSxPQUFPMFIsT0FBVWYsRUFBUTNRLE9BQU8wUixNQUFNbkYsS0FLbkRvRSxFQUFRNEIsU0FBV3BVLFdBQVcsV0FDeEJ3UyxFQUFRNkIsY0FBZ0JuQixHQUMxQlYsRUFBUXBFLFFBRVRvRSxFQUFRM1EsT0FBTzBSLE1BQU1uRixNQVJ0Qm9FLEVBQVFwRSxTQVdaaEosRUFBTzJQLHFCQUF1QixXQUM1QixJQUFLLElBQUkxVCxLQUFXOUIsS0FBSytVLGVBQ3ZCLEdBQUkvVSxLQUFLK1UsZUFBZWpULEdBQ3RCLE9BQU8sRUFJWCxPQUFPLEdBR1QrRCxFQUFPNkQsV0FBYSxTQUFvQnBILEdBbUJ0QyxNQWhCNEIsaUJBRjVCQSxFQUFTb0YsRUFBYyxHQUFJMUgsS0FBS29TLFlBQVloSyxRQUFTbEksRUFBS0YsS0FBS2tCLFNBQVNnRyxPQUEwQixpQkFBWDVFLEdBQXVCQSxFQUFTQSxFQUFTLEtBRTlHMFIsUUFDaEIxUixFQUFPMFIsTUFBUSxDQUNibEYsS0FBTXhNLEVBQU8wUixNQUNibkYsS0FBTXZNLEVBQU8wUixRQUlXLGlCQUFqQjFSLEVBQU95UixRQUNoQnpSLEVBQU95UixNQUFRelIsRUFBT3lSLE1BQU0vUSxZQUdBLGlCQUFuQlYsRUFBT2lWLFVBQ2hCalYsRUFBT2lWLFFBQVVqVixFQUFPaVYsUUFBUXZVLFlBR2xDbEQsRUFBS3NDLGdCQUFnQjJDLEVBQU16QyxFQUFRdEMsS0FBS29TLFlBQVkvSixhQUM3Qy9GLEdBR1R1RCxFQUFPeVAsbUJBQXFCLFdBQzFCLElBQUloVCxFQUFTLEdBRWIsR0FBSXRDLEtBQUtzQyxPQUNQLElBQUssSUFBSXdDLEtBQU85RSxLQUFLc0MsT0FDZnRDLEtBQUtvUyxZQUFZaEssUUFBUXRELEtBQVM5RSxLQUFLc0MsT0FBT3dDLEtBQ2hEeEMsRUFBT3dDLEdBQU85RSxLQUFLc0MsT0FBT3dDLElBS2hDLE9BQU94QyxHQUdUdUQsRUFBT3FSLGVBQWlCLFdBQ3RCLElBQUlhLEVBQU83WCxFQUFLRixLQUFLMlYsaUJBQ2pCcUMsRUFBV0QsRUFBS3pJLEtBQUssU0FBU3JNLE1BQU15USxHQUV2QixPQUFic0UsR0FBcUJBLEVBQVN4VCxRQUNoQ3VULEVBQUt0UixZQUFZdVIsRUFBU0MsS0FBSyxNQUluQ3BTLEVBQU84USw2QkFBK0IsU0FBc0N1QixHQUMxRSxJQUFJQyxFQUFpQkQsRUFBV0UsU0FDaENwWSxLQUFLZ1YsSUFBTW1ELEVBQWVFLE9BRTFCclksS0FBS2tYLGlCQUVMbFgsS0FBS29XLG1CQUFtQnBXLEtBQUttVyxlQUFlK0IsRUFBVzNGLGFBR3pEMU0sRUFBT2lSLGVBQWlCLFdBQ3RCLElBQUk5QixFQUFNaFYsS0FBSzJWLGdCQUNYMkMsRUFBc0J0WSxLQUFLc0MsT0FBT3VSLFVBRUUsT0FBcENtQixFQUFJNVQsYUFBYSxpQkFJckJsQixFQUFLOFUsR0FBS3ZPLFlBQVlyQixHQUN0QnBGLEtBQUtzQyxPQUFPdVIsV0FBWSxFQUN4QjdULEtBQUs2TyxPQUNMN08sS0FBSzhPLE9BQ0w5TyxLQUFLc0MsT0FBT3VSLFVBQVl5RSxJQUkxQjlFLEVBQVF4TSxpQkFBbUIsU0FBMEIxRSxHQUNuRCxPQUFPdEMsS0FBS2lILEtBQUssV0FDZixJQUFJQyxFQUFPaEgsRUFBS0YsTUFBTWtILEtBQUtsQyxHQUV2QnlFLEVBQTRCLGlCQUFYbkgsR0FBdUJBLEVBRTVDLElBQUs0RSxJQUFRLGVBQWU5RCxLQUFLZCxNQUk1QjRFLElBQ0hBLEVBQU8sSUFBSXNNLEVBQVF4VCxLQUFNeUosR0FDekJ2SixFQUFLRixNQUFNa0gsS0FBS2xDLEVBQVVrQyxJQUdOLGlCQUFYNUUsR0FBcUIsQ0FDOUIsUUFBNEIsSUFBakI0RSxFQUFLNUUsR0FDZCxNQUFNLElBQUk0SyxVQUFVLG9CQUF1QjVLLEVBQVMsS0FHdEQ0RSxFQUFLNUUsU0F4b0JPb0QsRUE2b0JMOE4sRUE3b0I4QjVOLEVBNm9CZixDQUFDLENBQzNCZCxJQUFLLFVBQ0xxQyxJQUFLLFdBQ0gsTUExbEJRLFVBNGxCVCxDQUNEckMsSUFBSyxVQUNMcUMsSUFBSyxXQUNILE9BQU9pQixJQUVSLENBQ0R0RCxJQUFLLE9BQ0xxQyxJQUFLLFdBQ0gsT0FBT3BDLElBRVIsQ0FDREQsSUFBSyxXQUNMcUMsSUFBSyxXQUNILE9BQU9uQyxJQUVSLENBQ0RGLElBQUssUUFDTHFDLElBQUssV0FDSCxPQUFPN0IsSUFFUixDQUNEUixJQUFLLFlBQ0xxQyxJQUFLLFdBQ0gsT0FBT2xDLElBRVIsQ0FDREgsSUFBSyxjQUNMcUMsSUFBSyxXQUNILE9BQU9rQixNQTlxQm9CMUMsRUE2b0JULE9BNW9CUnRCLEVBQWtCcUIsRUFBWWhELFVBQVdpRCxHQUNyREMsR0FBYXZCLEVBQWtCcUIsRUFBYUUsR0FnckJ2QzROLEVBM2lCVCxHQW9qQkF0VCxFQUFLcUQsR0FBR3dCLEdBQVF5TyxFQUFReE0saUJBQ3hCOUcsRUFBS3FELEdBQUd3QixHQUFNVyxZQUFjOE4sRUFFNUJ0VCxFQUFLcUQsR0FBR3dCLEdBQU15QyxXQUFhLFdBRXpCLE9BREF0SCxFQUFLcUQsR0FBR3dCLEdBQVFJLEVBQ1RxTyxFQUFReE0sa0JBR1Z3TSxJQU9WLFNBQVVqVSxFQUFRQyxHQUNFLGlCQUFaQyxTQUEwQyxvQkFBWEMsT0FBeUJBLE9BQU9ELFFBQVVELEVBQVFHLFFBQVEsVUFBV0EsUUFBUSxpQkFDakcsbUJBQVhDLFFBQXlCQSxPQUFPQyxJQUFNRCxPQUFPLENBQUMsU0FBVSxnQkFBaUJKLEdBQy9FRCxFQUFPZ1osUUFBVS9ZLEVBQVFELEVBQU9RLE9BQU9SLEVBQU9pVSxTQUhqRCxDQUlFeFQsS0FBTSxTQUFXQyxFQUFFdVQsR0FBVyxhQUs5QixTQUFTblAsRUFBa0JQLEVBQVFRLEdBQ2pDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQ3JDLElBQUlFLEVBQWFILEVBQU1DLEdBQ3ZCRSxFQUFXQyxXQUFhRCxFQUFXQyxhQUFjLEVBQ2pERCxFQUFXRSxjQUFlLEVBQ3RCLFVBQVdGLElBQVlBLEVBQVdHLFVBQVcsR0FDakRuQyxPQUFPb0MsZUFBZWYsRUFBUVcsRUFBV0ssSUFBS0wsSUF5QmxELFNBQVNpRCxFQUFjNUQsR0FDckIsSUFBSyxJQUFJUyxFQUFJLEVBQUdBLEVBQUlKLFVBQVVLLE9BQVFELElBQUssQ0FDekMsSUFBSW9ELEVBQXlCLE1BQWhCeEQsVUFBVUksR0FBYUosVUFBVUksR0FBSyxHQUMvQ3FELEVBQVVuRixPQUFPb0YsS0FBS0YsR0FFa0IsbUJBQWpDbEYsT0FBT3FGLHdCQUNoQkYsRUFBVUEsRUFBUUcsT0FBT3RGLE9BQU9xRixzQkFBc0JILEdBQVFLLE9BQU8sU0FBVUMsR0FDN0UsT0FBT3hGLE9BQU95Rix5QkFBeUJQLEVBQVFNLEdBQUt2RCxlQUl4RGtELEVBQVFPLFFBQVEsU0FBVXJELEdBMUI5QixJQUF5QjVDLEVBQUs0QyxFQUFLaEMsRUFBVlosRUEyQkg0QixFQTNCYWhCLEVBMkJBNkUsRUEzQkw3QyxFQTJCQUEsR0ExQnhCQSxLQUFPNUMsRUFDVE8sT0FBT29DLGVBQWUzQyxFQUFLNEMsRUFBSyxDQUM5QmhDLE1BQU9BLEVBQ1A0QixZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsVUFBVSxJQUdaMUMsRUFBSTRDLEdBQU9oQyxJQXNCYixPQUFPZ0IsRUFnQlQsSUFBd0I1RCxFQU1sQjZFLEVBRUFDLEVBQ0FDLEVBQ0FFLEVBQ0FzTyxFQUNBQyxFQUVBdEwsRUFPQUMsRUFJQWpELEVBQUFBLEVBSUFDLEVBQUFBLEVBSUFDLEVBbUJBaVQsRUEwSU4sT0FoUUF0WSxFQUFJQSxHQUFLQSxFQUFFMEMsZUFBZSxXQUFhMUMsRUFBVyxRQUFJQSxFQUN0RHVULEVBQVVBLEdBQVdBLEVBQVE3USxlQUFlLFdBQWE2USxFQUFpQixRQUFJQSxFQXVFeEV6TyxFQUFPLFVBR1BFLEVBQVksS0FEWkQsRUFBVyxjQUVYRyxHQVZrQmpGLEVBNEx0QkQsR0FsTDhCc0QsR0FBR3dCLEdBQzdCME8sRUFBZSxhQUNmQyxFQUFxQixJQUFJdlEsT0FBTyxVQUFZc1EsRUFBZSxPQUFRLEtBRW5FckwsRUFBVVYsRUFBYyxHQUFJOEwsRUFBUXBMLFFBQVMsQ0FDL0NtSyxVQUFXLFFBQ1h6USxRQUFTLFFBQ1R5VixRQUFTLEdBQ1R6RCxTQUFVLHdJQUdSekwsRUFBY1gsRUFBYyxHQUFJOEwsRUFBUW5MLFlBQWEsQ0FDdkRrUCxRQUFTLDhCQUdQblMsRUFDSSxPQUdKQyxFQUNLLGtCQURMQSxFQUVPLGdCQUVQQyxFQUFRLENBQ1Z3SSxLQUFNLE9BQVM3SSxFQUNmOEksT0FBUSxTQUFXOUksRUFDbkIySSxNQVhFeEksRUFFSSxRQVNTSCxFQUNmNEksTUFBTyxRQUFVNUksRUFDakJ3UCxTQUFVLFdBQWF4UCxFQUN2QnlMLE1BQU8sUUFBVXpMLEVBQ2pCeVAsUUFBUyxVQUFZelAsRUFDckIwUCxTQUFVLFdBQWExUCxFQUN2QjhELFdBQVksYUFBZTlELEVBQzNCK0QsV0FBWSxhQUFlL0QsR0FTekJzVCxFQUVKLFNBQVVDLEdBbkVaLElBQXdCQyxFQUFVQyxFQXNFOUIsU0FBU0gsSUFDUCxPQUFPQyxFQUFTdFUsTUFBTWxFLEtBQU1tRSxZQUFjbkUsS0F2RWQwWSxFQW9FTkYsR0FwRUpDLEVBb0VMRixHQW5FUjdWLFVBQVlELE9BQU9rVyxPQUFPRCxFQUFXaFcsWUFDOUMrVixFQUFTL1YsVUFBVTBQLFlBQWNxRyxHQUN4QkcsVUFBWUYsRUF1RW5CLElBbEhrQmhULEVBQWFDLEVBQVlDLEVBa0h2Q0MsRUFBUzBTLEVBQVE3VixVQTZHckIsT0ExR0FtRCxFQUFPZ1EsY0FBZ0IsV0FDckIsT0FBTzdWLEtBQUtvWCxZQUFjcFgsS0FBSzZZLGVBR2pDaFQsRUFBT3VRLG1CQUFxQixTQUE0QkYsR0FDdERoVyxFQUFLRixLQUFLMlYsaUJBQWlCcEosU0FBU2tILEVBQWUsSUFBTXlDLElBRzNEclEsRUFBTzhQLGNBQWdCLFdBRXJCLE9BREEzVixLQUFLZ1YsSUFBTWhWLEtBQUtnVixLQUFPOVUsRUFBS0YsS0FBS3NDLE9BQU93UixVQUFVLEdBQzNDOVQsS0FBS2dWLEtBR2RuUCxFQUFPb1EsV0FBYSxXQUNsQixJQUFJOEIsRUFBTzdYLEVBQUtGLEtBQUsyVixpQkFFckIzVixLQUFLcVgsa0JBQWtCVSxFQUFLMUIsS0FBS2hSLEdBQWlCckYsS0FBS29YLFlBRXZELElBQUlHLEVBQVV2WCxLQUFLNlksY0FFSSxtQkFBWnRCLElBQ1RBLEVBQVVBLEVBQVEzVSxLQUFLNUMsS0FBS2tCLFVBRzlCbEIsS0FBS3FYLGtCQUFrQlUsRUFBSzFCLEtBQUtoUixHQUFtQmtTLEdBQ3BEUSxFQUFLdFIsWUFBWXJCLEVBQWlCLElBQU1BLElBSTFDUyxFQUFPZ1QsWUFBYyxXQUNuQixPQUFPN1ksS0FBS2tCLFFBQVFFLGFBQWEsaUJBQW1CcEIsS0FBS3NDLE9BQU9pVixTQUdsRTFSLEVBQU9xUixlQUFpQixXQUN0QixJQUFJYSxFQUFPN1gsRUFBS0YsS0FBSzJWLGlCQUNqQnFDLEVBQVdELEVBQUt6SSxLQUFLLFNBQVNyTSxNQUFNeVEsR0FFdkIsT0FBYnNFLEdBQXVDLEVBQWxCQSxFQUFTeFQsUUFDaEN1VCxFQUFLdFIsWUFBWXVSLEVBQVNDLEtBQUssTUFLbkNNLEVBQVF2UixpQkFBbUIsU0FBMEIxRSxHQUNuRCxPQUFPdEMsS0FBS2lILEtBQUssV0FDZixJQUFJQyxFQUFPaEgsRUFBS0YsTUFBTWtILEtBQUtsQyxHQUV2QnlFLEVBQTRCLGlCQUFYbkgsRUFBc0JBLEVBQVMsS0FFcEQsSUFBSzRFLElBQVEsZUFBZTlELEtBQUtkLE1BSTVCNEUsSUFDSEEsRUFBTyxJQUFJcVIsRUFBUXZZLEtBQU15SixHQUN6QnZKLEVBQUtGLE1BQU1rSCxLQUFLbEMsRUFBVWtDLElBR04saUJBQVg1RSxHQUFxQixDQUM5QixRQUE0QixJQUFqQjRFLEVBQUs1RSxHQUNkLE1BQU0sSUFBSTRLLFVBQVUsb0JBQXVCNUssRUFBUyxLQUd0RDRFLEVBQUs1RSxTQXBMT29ELEVBeUxMNlMsRUF6TDhCM1MsRUF5TGYsQ0FBQyxDQUMzQmQsSUFBSyxVQUVMcUMsSUFBSyxXQUNILE1BaklRLFVBbUlULENBQ0RyQyxJQUFLLFVBQ0xxQyxJQUFLLFdBQ0gsT0FBT2lCLElBRVIsQ0FDRHRELElBQUssT0FDTHFDLElBQUssV0FDSCxPQUFPcEMsSUFFUixDQUNERCxJQUFLLFdBQ0xxQyxJQUFLLFdBQ0gsT0FBT25DLElBRVIsQ0FDREYsSUFBSyxRQUNMcUMsSUFBSyxXQUNILE9BQU83QixJQUVSLENBQ0RSLElBQUssWUFDTHFDLElBQUssV0FDSCxPQUFPbEMsSUFFUixDQUNESCxJQUFLLGNBQ0xxQyxJQUFLLFdBQ0gsT0FBT2tCLE1BM05vQjFDLEVBeUxULE9BeExSdEIsRUFBa0JxQixFQUFZaEQsVUFBV2lELEdBQ3JEQyxHQUFhdkIsRUFBa0JxQixFQUFhRSxHQTZOdkMyUyxFQXBIVCxDQXFIRS9FLEdBUUZ0VCxFQUFLcUQsR0FBR3dCLEdBQVF3VCxFQUFRdlIsaUJBQ3hCOUcsRUFBS3FELEdBQUd3QixHQUFNVyxZQUFjNlMsRUFFNUJyWSxFQUFLcUQsR0FBR3dCLEdBQU15QyxXQUFhLFdBRXpCLE9BREF0SCxFQUFLcUQsR0FBR3dCLEdBQVFJLEVBQ1RvVCxFQUFRdlIsa0JBR1Z1UixJQW9CVixTQUFTTyxFQUFFdkYsR0FBRyxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLGdDQUFnQyxDQUFDLFVBQVUsU0FBUzJFLEdBQUcsT0FBT2dQLEVBQUV1RixFQUFFdlUsS0FBSyxpQkFBaUI3RSxRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRXVGLEVBQUVuWixRQUFRLFdBQVdtWixFQUFFQyxjQUFjeEYsRUFBRXVGLEVBQUVBLEVBQUUvWSxRQUF0TyxDQUErT3NOLE9BQU8sU0FBU3lMLEVBQUV2RixHQUFHLGFBQWEsU0FBU2hQLEVBQUVBLEVBQUV5VSxFQUFFQyxJQUEwWkEsRUFBRUEsR0FBRzFGLEdBQUd1RixFQUFFL1ksVUFBV2laLEVBQUV0VyxVQUFVd1csU0FBU0YsRUFBRXRXLFVBQVV3VyxPQUFPLFNBQVNKLEdBQUdHLEVBQUVFLGNBQWNMLEtBQUs5WSxLQUFLb1osUUFBUUgsRUFBRUksUUFBTyxFQUFHclosS0FBS29aLFFBQVFOLE1BQU1HLEVBQUUxVixHQUFHZ0IsR0FBRyxTQUFTdVUsR0FBRyxHQUFHLGlCQUFpQkEsRUFBZ0QsT0FBclV2RixFQUFtVnVGLEVBQUw5WSxLQUF6VWlILEtBQUssU0FBUzZSLEVBQUVRLEdBQUcsSUFBSUMsRUFBRU4sRUFBRS9SLEtBQUtvUyxFQUFFL1UsR0FBR2dWLEdBQUdBLEVBQUVMLE9BQU8zRixHQUFHZ0csRUFBRUMsVUFBVUQsRUFBRSxJQUFJUCxFQUFFTSxFQUFFL0YsR0FBRzBGLEVBQUUvUixLQUFLb1MsRUFBRS9VLEVBQUVnVixNQUF5UHZaLEtBQTFvQixJQUFXOFksRUFBRXZGLEVBQUUrRixFQUFPQyxFQUFFUCxFQUE0UnpGLEVBQTRSQSxFQUFFZ0csRUFBRTNXLEtBQUt1QixVQUFVLEdBQUcsT0FBdmxCbVYsRUFBdW1CL0YsRUFBOWxCeUYsRUFBRSxPQUFPelUsRUFBRSxNQUF0QmdQLEVBQXVtQnVGLEdBQTFrQixNQUEvQkEsRUFBb21COVksTUFBdmpCaUgsS0FBSyxTQUFTNlIsRUFBRVcsR0FBRyxJQUFJQyxFQUFFVCxFQUFFL1IsS0FBS3VTLEVBQUVsVixHQUFHLEdBQUltVixFQUFKLENBQXdFLElBQUlDLEVBQUVELEVBQUVuRyxHQUFHLEdBQUlvRyxHQUFHLEtBQUtwRyxFQUFFcUcsT0FBTyxHQUFyQixDQUFrRSxJQUFJQyxFQUFFRixFQUFFelYsTUFBTXdWLEVBQUVKLEdBQUdDLE9BQUUsSUFBU0EsRUFBRU0sRUFBRU4sT0FBaEVPLEVBQUVkLEVBQUUsK0JBQXpHYyxFQUFFdlYsRUFBRSwrQ0FBK0N5VSxVQUFzSCxJQUFTTyxFQUFFQSxFQUFFVCxHQUEyV1EsRUFBRUwsSUFBSSxTQUFTSyxFQUFFUixJQUFJQSxHQUFHQSxHQUFHQSxFQUFFaUIsVUFBVWpCLEVBQUVpQixRQUFReFYsR0FBRyxJQUFJZ1YsRUFBRVMsTUFBTXRYLFVBQVUwSSxNQUFNNE4sRUFBRUYsRUFBRW1CLFFBQVFILE9BQUUsSUFBb0JkLEVBQUUsYUFBYSxTQUFTRixHQUFHRSxFQUFFa0IsTUFBTXBCLElBQUksT0FBT1EsRUFBRS9GLEdBQUd1RixFQUFFL1ksUUFBUXdFLElBQUksU0FBU3VVLEVBQUV2RixHQUFHLG1CQUFtQjNULFFBQVFBLE9BQU9DLElBQUlELE9BQU8sd0JBQXdCMlQsR0FBRyxpQkFBaUI3VCxRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsSUFBSXVGLEVBQUVxQixVQUFVNUcsSUFBN0osQ0FBa0ssb0JBQW9CbEcsT0FBT0EsT0FBT3JOLEtBQUssV0FBVyxTQUFTOFksS0FBSyxJQUFJdkYsRUFBRXVGLEVBQUVwVyxVQUFVLE9BQU82USxFQUFFbk0sR0FBRyxTQUFTMFIsRUFBRXZGLEdBQUcsR0FBR3VGLEdBQUd2RixFQUFFLENBQUMsSUFBSWhQLEVBQUV2RSxLQUFLb2EsUUFBUXBhLEtBQUtvYSxTQUFTLEdBQUdkLEVBQUUvVSxFQUFFdVUsR0FBR3ZVLEVBQUV1VSxJQUFJLEdBQUcsT0FBc0IsR0FBZlEsRUFBRWhPLFFBQVFpSSxJQUFRK0YsRUFBRTdLLEtBQUs4RSxHQUFHdlQsT0FBT3VULEVBQUU4RyxLQUFLLFNBQVN2QixFQUFFdkYsR0FBRyxHQUFHdUYsR0FBR3ZGLEVBQUUsQ0FBQ3ZULEtBQUtvSCxHQUFHMFIsRUFBRXZGLEdBQUcsSUFBSWhQLEVBQUV2RSxLQUFLc2EsWUFBWXRhLEtBQUtzYSxhQUFhLEdBQW1CLE9BQWQvVixFQUFFdVUsR0FBR3ZVLEVBQUV1VSxJQUFJLElBQVl2RixJQUFHLEVBQUd2VCxPQUFPdVQsRUFBRTNJLElBQUksU0FBU2tPLEVBQUV2RixHQUFHLElBQUloUCxFQUFFdkUsS0FBS29hLFNBQVNwYSxLQUFLb2EsUUFBUXRCLEdBQUcsR0FBR3ZVLEdBQUdBLEVBQUVDLE9BQU8sQ0FBQyxJQUFJOFUsRUFBRS9VLEVBQUUrRyxRQUFRaUksR0FBRyxPQUFXLEdBQUorRixHQUFPL1UsRUFBRWdXLE9BQU9qQixFQUFFLEdBQUd0WixPQUFPdVQsRUFBRWlILFVBQVUsU0FBUzFCLEVBQUV2RixHQUFHLElBQUloUCxFQUFFdkUsS0FBS29hLFNBQVNwYSxLQUFLb2EsUUFBUXRCLEdBQUcsR0FBR3ZVLEdBQUdBLEVBQUVDLE9BQU8sQ0FBQ0QsRUFBRUEsRUFBRTZHLE1BQU0sR0FBR21JLEVBQUVBLEdBQUcsR0FBRyxJQUFJLElBQUkrRixFQUFFdFosS0FBS3NhLGFBQWF0YSxLQUFLc2EsWUFBWXhCLEdBQUdTLEVBQUUsRUFBRUEsRUFBRWhWLEVBQUVDLE9BQU8rVSxJQUFJLENBQUMsSUFBSVAsRUFBRXpVLEVBQUVnVixHQUFLRCxHQUFHQSxFQUFFTixLQUFPaFosS0FBSzRLLElBQUlrTyxFQUFFRSxVQUFVTSxFQUFFTixJQUFJQSxFQUFFOVUsTUFBTWxFLEtBQUt1VCxHQUFHLE9BQU92VCxPQUFPdVQsRUFBRWtILE9BQU8sa0JBQWtCemEsS0FBS29hLGVBQWVwYSxLQUFLc2EsYUFBYXhCLElBQUksU0FBU0EsRUFBRXZGLEdBQUcsbUJBQW1CM1QsUUFBUUEsT0FBT0MsSUFBSUQsT0FBTyxvQkFBb0IyVCxHQUFHLGlCQUFpQjdULFFBQVFBLE9BQU9ELFFBQVFDLE9BQU9ELFFBQVE4VCxJQUFJdUYsRUFBRTRCLFFBQVFuSCxJQUF2SixDQUE0SmxHLE9BQU8sV0FBVyxhQUFhLFNBQVN5TCxFQUFFQSxHQUFHLElBQUl2RixFQUFFN1IsV0FBV29YLEdBQW1DLE9BQWIsR0FBakJBLEVBQUV4TixRQUFRLE9BQVdxUCxNQUFNcEgsSUFBYUEsRUFBd0osU0FBUytGLEVBQUVSLEdBQUcsSUFBSXZGLEVBQUVxSCxpQkFBaUI5QixHQUFHLE9BQU92RixHQUFHMEYsRUFBRSxrQkFBa0IxRixFQUFFLDZGQUE2RkEsRUFBcVcsU0FBU3lGLEVBQUV6RixHQUFHLEdBQWpYLFdBQWEsSUFBSW9HLEVBQUUsQ0FBQ0EsR0FBRSxFQUFHLElBQUlwRyxFQUFFeFMsU0FBUzhaLGNBQWMsT0FBT3RILEVBQUVsRSxNQUFNeUwsTUFBTSxRQUFRdkgsRUFBRWxFLE1BQU0wTCxRQUFRLGtCQUFrQnhILEVBQUVsRSxNQUFNMkwsWUFBWSxRQUFRekgsRUFBRWxFLE1BQU00TCxZQUFZLGtCQUFrQjFILEVBQUVsRSxNQUFNNkwsVUFBVSxhQUFhLElBQUkzVyxFQUFFeEQsU0FBUytRLE1BQU0vUSxTQUFTZ0ssZ0JBQWdCeEcsRUFBRTRXLFlBQVk1SCxHQUFHLElBQUlnRyxFQUFFRCxFQUFFL0YsR0FBR3VHLEVBQUUsS0FBS2paLEtBQUt1YSxNQUFNdEMsRUFBRVMsRUFBRXVCLFFBQVE5QixFQUFFcUMsZUFBZXZCLEVBQUV2VixFQUFFMFMsWUFBWTFELElBQXFCZ0csR0FBSSxpQkFBaUJoRyxJQUFJQSxFQUFFeFMsU0FBU00sY0FBY2tTLElBQUlBLEdBQUcsaUJBQWlCQSxHQUFHQSxFQUFFcFIsU0FBUyxDQUFDLElBQUk2VyxFQUFFTSxFQUFFL0YsR0FBRyxHQUFHLFFBQVF5RixFQUFFL0gsUUFBUSxPQUE1eEIsV0FBYSxJQUFJLElBQUk2SCxFQUFFLENBQUNnQyxNQUFNLEVBQUVRLE9BQU8sRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsWUFBWSxHQUFHbkksRUFBRSxFQUFFQSxFQUFFbUcsRUFBRW5HLElBQWdCdUYsRUFBTFcsRUFBRWxHLElBQVEsRUFBRSxPQUFPdUYsRUFBNnBCdlUsR0FBSSxJQUFJMFUsRUFBRSxHQUFHQSxFQUFFNkIsTUFBTXZILEVBQUVvSSxZQUFZMUMsRUFBRXFDLE9BQU8vSCxFQUFFMVIsYUFBYSxJQUFJLElBQUk4WCxFQUFFVixFQUFFMkMsWUFBWSxjQUFjNUMsRUFBRWtDLFVBQVVyQixFQUFFLEVBQUVBLEVBQUVILEVBQUVHLElBQUksQ0FBQyxJQUFJZ0MsRUFBRXBDLEVBQUVJLEdBQUdpQyxFQUFFOUMsRUFBRTZDLEdBQUdFLEVBQUVyYSxXQUFXb2EsR0FBRzdDLEVBQUU0QyxHQUFHbEIsTUFBTW9CLEdBQUcsRUFBRUEsRUFBRSxJQUFJQyxFQUFFL0MsRUFBRWdELFlBQVloRCxFQUFFaUQsYUFBYUMsRUFBRWxELEVBQUVtRCxXQUFXbkQsRUFBRW9ELGNBQWNDLEVBQUVyRCxFQUFFc0QsV0FBV3RELEVBQUV1RCxZQUFZQyxFQUFFeEQsRUFBRXlELFVBQVV6RCxFQUFFMEQsYUFBYUMsRUFBRTNELEVBQUU0RCxnQkFBZ0I1RCxFQUFFNkQsaUJBQWlCQyxFQUFFOUQsRUFBRStELGVBQWUvRCxFQUFFZ0Usa0JBQWtCQyxFQUFFdkQsR0FBR0csRUFBRXFELEVBQUVyRSxFQUFFRSxFQUFFOEIsUUFBVyxJQUFKcUMsSUFBU2xFLEVBQUU2QixNQUFNcUMsR0FBR0QsRUFBRSxFQUFFbEIsRUFBRVksSUFBSSxJQUFJUSxFQUFFdEUsRUFBRUUsRUFBRXNDLFFBQVEsT0FBVyxJQUFKOEIsSUFBU25FLEVBQUVxQyxPQUFPOEIsR0FBR0YsRUFBRSxFQUFFZixFQUFFWSxJQUFJOUQsRUFBRXNDLFdBQVd0QyxFQUFFNkIsT0FBT2tCLEVBQUVZLEdBQUczRCxFQUFFdUMsWUFBWXZDLEVBQUVxQyxRQUFRYSxFQUFFWSxHQUFHOUQsRUFBRXdDLFdBQVd4QyxFQUFFNkIsTUFBTXdCLEVBQUVyRCxFQUFFeUMsWUFBWXpDLEVBQUVxQyxPQUFPbUIsRUFBRXhELEdBQUcsSUFBSWEsRUFBRWIsRUFBRSxvQkFBb0JnQixRQUExNUMsYUFBbzZDLFNBQVNuQixHQUFHbUIsUUFBUUMsTUFBTXBCLElBQUlXLEVBQUUsQ0FBQyxjQUFjLGVBQWUsYUFBYSxnQkFBZ0IsYUFBYSxjQUFjLFlBQVksZUFBZSxrQkFBa0IsbUJBQW1CLGlCQUFpQixxQkFBcUJDLEVBQUVELEVBQUVqVixPQUFPbVYsR0FBRSxFQUFHLE9BQU9YLElBQUksU0FBU0YsRUFBRXZGLEdBQUcsYUFBYSxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLDZDQUE2QzJULEdBQUcsaUJBQWlCN1QsUUFBUUEsT0FBT0QsUUFBUUMsT0FBT0QsUUFBUThULElBQUl1RixFQUFFdUUsZ0JBQWdCOUosSUFBck0sQ0FBME1sRyxPQUFPLFdBQVcsYUFBYSxJQUFJeUwsRUFBRSxXQUFXLElBQUlBLEVBQUV6TCxPQUFPaVEsUUFBUTVhLFVBQVUsR0FBR29XLEVBQUV5RSxRQUFRLE1BQU0sVUFBVSxHQUFHekUsRUFBRXVFLGdCQUFnQixNQUFNLGtCQUFrQixJQUFJLElBQUk5SixFQUFFLENBQUMsU0FBUyxNQUFNLEtBQUssS0FBS2hQLEVBQUUsRUFBRUEsRUFBRWdQLEVBQUUvTyxPQUFPRCxJQUFJLENBQUMsSUFBV2dWLEVBQUxoRyxFQUFFaFAsR0FBTyxrQkFBa0IsR0FBR3VVLEVBQUVTLEdBQUcsT0FBT0EsR0FBNU4sR0FBa08sT0FBTyxTQUFTaEcsRUFBRWhQLEdBQUcsT0FBT2dQLEVBQUV1RixHQUFHdlUsTUFBTSxTQUFTdVUsRUFBRXZGLEdBQUcsbUJBQW1CM1QsUUFBUUEsT0FBT0MsSUFBSUQsT0FBTyx1QkFBdUIsQ0FBQyw4Q0FBOEMsU0FBUzJFLEdBQUcsT0FBT2dQLEVBQUV1RixFQUFFdlUsS0FBSyxpQkFBaUI3RSxRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRXVGLEVBQUVuWixRQUFRLDhCQUE4Qm1aLEVBQUUwRSxhQUFhakssRUFBRXVGLEVBQUVBLEVBQUV1RSxpQkFBblIsQ0FBcVNoUSxPQUFPLFNBQVN5TCxFQUFFdkYsR0FBRyxJQUFJaFAsRUFBRSxDQUFHOFUsT0FBUyxTQUFTUCxFQUFFdkYsR0FBRyxJQUFJLElBQUloUCxLQUFLZ1AsRUFBRXVGLEVBQUV2VSxHQUFHZ1AsRUFBRWhQLEdBQUcsT0FBT3VVLEdBQUcyRSxPQUFTLFNBQVMzRSxFQUFFdkYsR0FBRyxPQUFPdUYsRUFBRXZGLEVBQUVBLEdBQUdBLElBQU8rRixFQUFFVSxNQUFNdFgsVUFBVTBJLE1BQU03RyxFQUFFMkosVUFBVSxTQUFTNEssR0FBRyxPQUFHa0IsTUFBTTBELFFBQVE1RSxHQUFVQSxFQUFLLE1BQU9BLEVBQW9CLEdBQVMsaUJBQWlCQSxHQUFHLGlCQUFpQkEsRUFBRXRVLE9BQWdCOFUsRUFBRTFXLEtBQUtrVyxHQUFHLENBQUNBLElBQUl2VSxFQUFFb1osV0FBVyxTQUFTN0UsRUFBRXZGLEdBQUcsSUFBSWhQLEVBQUV1VSxFQUFFeE4sUUFBUWlJLElBQU8sR0FBSmhQLEdBQU91VSxFQUFFeUIsT0FBT2hXLEVBQUUsSUFBSUEsRUFBRXFaLFVBQVUsU0FBUzlFLEVBQUV2VSxHQUFHLEtBQUt1VSxFQUFFM04sWUFBWTJOLEdBQUcvWCxTQUFTK1EsTUFBTSxHQUFHZ0gsRUFBRUEsRUFBRTNOLFdBQVdvSSxFQUFFdUYsRUFBRXZVLEdBQUcsT0FBT3VVLEdBQUd2VSxFQUFFc1osZ0JBQWdCLFNBQVMvRSxHQUFHLE1BQU0saUJBQWlCQSxFQUFFL1gsU0FBU00sY0FBY3lYLEdBQUdBLEdBQUd2VSxFQUFFdVosWUFBWSxTQUFTaEYsR0FBRyxJQUFJdkYsRUFBRSxLQUFLdUYsRUFBRTFTLEtBQUtwRyxLQUFLdVQsSUFBSXZULEtBQUt1VCxHQUFHdUYsSUFBSXZVLEVBQUV3WixtQkFBbUIsU0FBU2pGLEVBQUVRLEdBQUdSLEVBQUV2VSxFQUFFMkosVUFBVTRLLEdBQUcsSUFBSVMsRUFBRSxHQUFHLE9BQU9ULEVBQUUzUSxRQUFRLFNBQVMyUSxHQUFHLEdBQUdBLGFBQWFrRixZQUFZLENBQUMsSUFBSTFFLEVBQUUsWUFBWUMsRUFBRTlLLEtBQUtxSyxHQUFHdkYsRUFBRXVGLEVBQUVRLElBQUlDLEVBQUU5SyxLQUFLcUssR0FBRyxJQUFJLElBQUl2VSxFQUFFdVUsRUFBRXpOLGlCQUFpQmlPLEdBQUdOLEVBQUUsRUFBRUEsRUFBRXpVLEVBQUVDLE9BQU93VSxJQUFJTyxFQUFFOUssS0FBS2xLLEVBQUV5VSxPQUFPTyxHQUFHaFYsRUFBRTBaLGVBQWUsU0FBU25GLEVBQUV2RixFQUFFaFAsR0FBR0EsRUFBRUEsR0FBRyxJQUFJLElBQUkrVSxFQUFFUixFQUFFcFcsVUFBVTZRLEdBQUdnRyxFQUFFaEcsRUFBRSxVQUFVdUYsRUFBRXBXLFVBQVU2USxHQUFHLFdBQVcsSUFBSXVGLEVBQUU5WSxLQUFLdVosR0FBR3ZPLGFBQWE4TixHQUFHLElBQUl2RixFQUFFcFAsVUFBVTZVLEVBQUVoWixLQUFLQSxLQUFLdVosR0FBRzlZLFdBQVcsV0FBVzZZLEVBQUVwVixNQUFNOFUsRUFBRXpGLFVBQVV5RixFQUFFTyxJQUFJaFYsS0FBS0EsRUFBRTJaLFNBQVMsU0FBU3BGLEdBQUcsSUFBSXZGLEVBQUV4UyxTQUFTb2QsV0FBVyxZQUFZNUssR0FBRyxlQUFlQSxFQUFFOVMsV0FBV3FZLEdBQUcvWCxTQUFTcWQsaUJBQWlCLG1CQUFtQnRGLElBQUl2VSxFQUFFOFosU0FBUyxTQUFTdkYsR0FBRyxPQUFPQSxFQUFFd0YsUUFBUSxjQUFjLFNBQVN4RixFQUFFdkYsRUFBRWhQLEdBQUcsT0FBT2dQLEVBQUUsSUFBSWhQLElBQUlyQixlQUFlLElBQUlxVyxFQUFFVCxFQUFFbUIsUUFBUSxPQUFPMVYsRUFBRWdhLFNBQVMsU0FBU2hMLEVBQUUrRixHQUFHL1UsRUFBRTJaLFNBQVMsV0FBVyxJQUFJbEYsRUFBRXpVLEVBQUU4WixTQUFTL0UsR0FBR1EsRUFBRSxRQUFRZCxFQUFFQyxFQUFFbFksU0FBU3NLLGlCQUFpQixJQUFJeU8sRUFBRSxLQUFLTCxFQUFFMVksU0FBU3NLLGlCQUFpQixPQUFPMk4sR0FBR1UsRUFBRW5WLEVBQUUySixVQUFVK0ssR0FBR2xSLE9BQU94RCxFQUFFMkosVUFBVXVMLElBQUlFLEVBQUVHLEVBQUUsV0FBV0QsRUFBRWYsRUFBRS9ZLE9BQU8yWixFQUFFdlIsUUFBUSxTQUFTMlEsR0FBRyxJQUFJdlUsRUFBRXlVLEVBQUVGLEVBQUUxWCxhQUFhMFksSUFBSWhCLEVBQUUxWCxhQUFhdVksR0FBRyxJQUFJcFYsRUFBRXlVLEdBQUd3RixLQUFLQyxNQUFNekYsR0FBRyxNQUFNQyxHQUFHLFlBQVlNLEdBQUdBLEVBQUVXLE1BQU0saUJBQWlCSixFQUFFLE9BQU9oQixFQUFFNEYsVUFBVSxLQUFLekYsSUFBSSxJQUFJUSxFQUFFLElBQUlsRyxFQUFFdUYsRUFBRXZVLEdBQUdzVixHQUFHQSxFQUFFM1MsS0FBSzRSLEVBQUVRLEVBQUVHLFFBQVFsVixJQUFJLFNBQVN1VSxFQUFFdkYsR0FBRyxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLGdCQUFnQixDQUFDLHdCQUF3QixxQkFBcUIyVCxHQUFHLGlCQUFpQjdULFFBQVFBLE9BQU9ELFFBQVFDLE9BQU9ELFFBQVE4VCxFQUFFNVQsUUFBUSxjQUFjQSxRQUFRLGNBQWNtWixFQUFFNkYsU0FBUyxHQUFHN0YsRUFBRTZGLFNBQVNDLEtBQUtyTCxFQUFFdUYsRUFBRXFCLFVBQVVyQixFQUFFNEIsVUFBL1EsQ0FBMFJyTixPQUFPLFNBQVN5TCxFQUFFdkYsR0FBRyxhQUFvRSxTQUFTK0YsRUFBRVIsRUFBRXZGLEdBQUd1RixJQUFJOVksS0FBS2tCLFFBQVE0WCxFQUFFOVksS0FBSzZlLE9BQU90TCxFQUFFdlQsS0FBSzhlLFNBQVMsQ0FBQzNCLEVBQUUsRUFBRWhCLEVBQUUsR0FBR25jLEtBQUsrZSxXQUE2RixJQUFJL0YsRUFBRWpZLFNBQVNnSyxnQkFBZ0JzRSxNQUFNeUssRUFBRSxpQkFBaUJkLEVBQUVnRyxXQUFXLGFBQWEsbUJBQW1CL0YsRUFBRSxpQkFBaUJELEVBQUVpRyxVQUFVLFlBQVksa0JBQWtCeEYsRUFBRSxDQUFDeUYsaUJBQWlCLHNCQUFzQkYsV0FBVyxpQkFBaUJsRixHQUFHSixFQUFFLENBQUN1RixVQUFVaEcsRUFBRStGLFdBQVdsRixFQUFFdFksbUJBQW1Cc1ksRUFBRSxXQUFXcUYsbUJBQW1CckYsRUFBRSxXQUFXc0YsZ0JBQWdCdEYsRUFBRSxTQUFTSCxFQUFFTCxFQUFFNVcsVUFBVUQsT0FBT2tXLE9BQU9HLEVBQUVwVyxXQUFXaVgsRUFBRXZILFlBQVlrSCxFQUFFSyxFQUFFb0YsUUFBUSxXQUFXL2UsS0FBS3FmLFFBQVEsQ0FBQ0MsY0FBYyxHQUFHQyxNQUFNLEdBQUdDLE1BQU0sSUFBSXhmLEtBQUt5QixJQUFJLENBQUNxZCxTQUFTLGNBQWNuRixFQUFFbUUsWUFBWSxTQUFTaEYsR0FBRyxJQUFJdkYsRUFBRSxLQUFLdUYsRUFBRTFTLEtBQUtwRyxLQUFLdVQsSUFBSXZULEtBQUt1VCxHQUFHdUYsSUFBSWEsRUFBRWUsUUFBUSxXQUFXMWEsS0FBS3lmLEtBQUtsTSxFQUFFdlQsS0FBS2tCLFVBQVV5WSxFQUFFbFksSUFBSSxTQUFTcVgsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUtrQixRQUFRbU8sTUFBTSxJQUFJLElBQUk5SyxLQUFLdVUsRUFBRSxDQUFldkYsRUFBUm1HLEVBQUVuVixJQUFJQSxHQUFPdVUsRUFBRXZVLEtBQUtvVixFQUFFK0YsWUFBWSxXQUFXLElBQUk1RyxFQUFFOEIsaUJBQWlCNWEsS0FBS2tCLFNBQVNxUyxFQUFFdlQsS0FBSzZlLE9BQU9jLFdBQVcsY0FBY3BiLEVBQUV2RSxLQUFLNmUsT0FBT2MsV0FBVyxhQUFhckcsRUFBRVIsRUFBRXZGLEVBQUUsT0FBTyxTQUFTZ0csRUFBRVQsRUFBRXZVLEVBQUUsTUFBTSxVQUFVeVUsRUFBRXRYLFdBQVc0WCxHQUFHUSxFQUFFcFksV0FBVzZYLEdBQUdOLEVBQUVqWixLQUFLNmUsT0FBT1ksTUFBc0IsR0FBakJuRyxFQUFFaE8sUUFBUSxPQUFXME4sRUFBRUEsRUFBRSxJQUFJQyxFQUFFNkIsUUFBd0IsR0FBakJ2QixFQUFFak8sUUFBUSxPQUFXd08sRUFBRUEsRUFBRSxJQUFJYixFQUFFcUMsUUFBUXRDLEVBQUUyQixNQUFNM0IsR0FBRyxFQUFFQSxFQUFFYyxFQUFFYSxNQUFNYixHQUFHLEVBQUVBLEVBQUVkLEdBQUd6RixFQUFFMEYsRUFBRWdELFlBQVloRCxFQUFFaUQsYUFBYXBDLEdBQUd2VixFQUFFMFUsRUFBRW1ELFdBQVduRCxFQUFFb0QsY0FBY3JjLEtBQUs4ZSxTQUFTM0IsRUFBRW5FLEVBQUVoWixLQUFLOGUsU0FBUzNDLEVBQUVyQyxHQUFHSCxFQUFFaUcsZUFBZSxXQUFXLElBQUk5RyxFQUFFOVksS0FBSzZlLE9BQU9ZLEtBQUtsTSxFQUFFLEdBQUdoUCxFQUFFdkUsS0FBSzZlLE9BQU9jLFdBQVcsY0FBY3JHLEVBQUV0WixLQUFLNmUsT0FBT2MsV0FBVyxhQUFhcEcsRUFBRWhWLEVBQUUsY0FBYyxlQUFleVUsRUFBRXpVLEVBQUUsT0FBTyxRQUFRdVYsRUFBRXZWLEVBQUUsUUFBUSxPQUFPMFUsRUFBRWpaLEtBQUs4ZSxTQUFTM0IsRUFBRXJFLEVBQUVTLEdBQUdoRyxFQUFFeUYsR0FBR2haLEtBQUs2ZixVQUFVNUcsR0FBRzFGLEVBQUV1RyxHQUFHLEdBQUcsSUFBSUwsRUFBRUgsRUFBRSxhQUFhLGdCQUFnQkksRUFBRUosRUFBRSxNQUFNLFNBQVNLLEVBQUVMLEVBQUUsU0FBUyxNQUFNTyxFQUFFN1osS0FBSzhlLFNBQVMzQyxFQUFFckQsRUFBRVcsR0FBR2xHLEVBQUVtRyxHQUFHMVosS0FBSzhmLFVBQVVqRyxHQUFHdEcsRUFBRW9HLEdBQUcsR0FBRzNaLEtBQUt5QixJQUFJOFIsR0FBR3ZULEtBQUt3YSxVQUFVLFNBQVMsQ0FBQ3hhLFFBQVEyWixFQUFFa0csVUFBVSxTQUFTL0csR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs2ZSxPQUFPYyxXQUFXLGNBQWMsT0FBTzNmLEtBQUs2ZSxPQUFPekYsUUFBUTJHLGtCQUFrQnhNLEVBQUV1RixFQUFFOVksS0FBSzZlLE9BQU9ZLEtBQUszRSxNQUFNLElBQUksSUFBSWhDLEVBQUUsTUFBTWEsRUFBRW1HLFVBQVUsU0FBU2hILEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLNmUsT0FBT2MsV0FBVyxjQUFjLE9BQU8zZixLQUFLNmUsT0FBT3pGLFFBQVEyRyxpQkFBaUJ4TSxFQUFFdUYsRUFBRTlZLEtBQUs2ZSxPQUFPWSxLQUFLbkUsT0FBTyxJQUFJLElBQUl4QyxFQUFFLE1BQU1hLEVBQUVxRyxjQUFjLFNBQVNsSCxFQUFFdkYsR0FBR3ZULEtBQUswZixjQUFjLElBQUluYixFQUFFdkUsS0FBSzhlLFNBQVMzQixFQUFFN0QsRUFBRXRaLEtBQUs4ZSxTQUFTM0MsRUFBRTVDLEVBQUVULEdBQUc5WSxLQUFLOGUsU0FBUzNCLEdBQUc1SixHQUFHdlQsS0FBSzhlLFNBQVMzQyxFQUFFLEdBQUduYyxLQUFLaWdCLFlBQVluSCxFQUFFdkYsSUFBR2dHLEdBQUl2WixLQUFLMlAsZ0JBQWxDLENBQW9GLElBQUlxSixFQUFFRixFQUFFdlUsRUFBRXVWLEVBQUV2RyxFQUFFK0YsRUFBRUwsRUFBRSxHQUFHQSxFQUFFZ0csVUFBVWpmLEtBQUtrZ0IsYUFBYWxILEVBQUVjLEdBQUc5WixLQUFLZ2YsV0FBVyxDQUFDelUsR0FBRzBPLEVBQUVrSCxnQkFBZ0IsQ0FBQ2xCLFVBQVVqZixLQUFLNGYsZ0JBQWdCUSxZQUFXLFNBQS9KcGdCLEtBQUs0ZixrQkFBZ0tqRyxFQUFFdUcsYUFBYSxTQUFTcEgsRUFBRXZGLEdBQW9GLE1BQXlCLGdCQUFsQnVGLEVBQWxGOVksS0FBSzZlLE9BQU9jLFdBQVcsY0FBK0Q3RyxHQUFHQSxHQUE0QixRQUExQnZGLEVBQXBEdlQsS0FBSzZlLE9BQU9jLFdBQVcsYUFBaUNwTSxHQUFHQSxHQUE0QixVQUFVb0csRUFBRTBHLEtBQUssU0FBU3ZILEVBQUV2RixHQUFHdlQsS0FBS2lnQixZQUFZbkgsRUFBRXZGLEdBQUd2VCxLQUFLNGYsa0JBQWtCakcsRUFBRTJHLE9BQU8zRyxFQUFFcUcsY0FBY3JHLEVBQUVzRyxZQUFZLFNBQVNuSCxFQUFFdkYsR0FBR3ZULEtBQUs4ZSxTQUFTM0IsRUFBRXpiLFdBQVdvWCxHQUFHOVksS0FBSzhlLFNBQVMzQyxFQUFFemEsV0FBVzZSLElBQUlvRyxFQUFFNEcsZUFBZSxTQUFTekgsR0FBeUQsSUFBSSxJQUFJdkYsS0FBOUR2VCxLQUFLeUIsSUFBSXFYLEVBQUV2TyxJQUFJdU8sRUFBRXNILFlBQVlwZ0IsS0FBS3dnQixjQUFjMUgsRUFBRXZPLElBQWlCdU8sRUFBRXFILGdCQUFnQnJILEVBQUVxSCxnQkFBZ0I1TSxHQUFHM1EsS0FBSzVDLE9BQU8yWixFQUFFcUYsV0FBVyxTQUFTbEcsR0FBRyxHQUFJcFgsV0FBVzFCLEtBQUs2ZSxPQUFPekYsUUFBUTVYLG9CQUFuQyxDQUEwRixJQUFJK1IsRUFBRXZULEtBQUtxZixRQUFRLElBQUksSUFBSTlhLEtBQUt1VSxFQUFFcUgsZ0JBQWdCNU0sRUFBRWlNLE1BQU1qYixHQUFHdVUsRUFBRXFILGdCQUFnQjViLEdBQUcsSUFBSUEsS0FBS3VVLEVBQUV2TyxHQUFHZ0osRUFBRStMLGNBQWMvYSxJQUFHLEVBQUd1VSxFQUFFc0gsYUFBYTdNLEVBQUVnTSxNQUFNaGIsSUFBRyxHQUFJLEdBQUd1VSxFQUFFNU0sS0FBSyxDQUFDbE0sS0FBS3lCLElBQUlxWCxFQUFFNU0sTUFBWWxNLEtBQUtrQixRQUFRVyxhQUFlLEtBQUs3QixLQUFLeWdCLGlCQUFpQjNILEVBQUV2TyxJQUFJdkssS0FBS3lCLElBQUlxWCxFQUFFdk8sSUFBSXZLLEtBQUsyUCxpQkFBZ0IsT0FBOVMzUCxLQUFLdWdCLGVBQWV6SCxJQUE4UixJQUFJZSxFQUFFLFdBQWFaLEVBQWhxR3FGLFFBQVEsV0FBVyxTQUFTeEYsR0FBRyxNQUFNLElBQUlBLEVBQUU1VixnQkFBd25HeVcsRUFBRThHLGlCQUFpQixXQUFXLElBQUl6Z0IsS0FBSzJQLGdCQUFnQixDQUFDLElBQUltSixFQUFFOVksS0FBSzZlLE9BQU96RixRQUFRNVgsbUJBQW1Cc1gsRUFBRSxpQkFBaUJBLEVBQUVBLEVBQUUsS0FBS0EsRUFBRTlZLEtBQUt5QixJQUFJLENBQUMwZCxtQkFBbUJ0RixFQUFFclksbUJBQW1Cc1gsRUFBRXNHLGdCQUFnQnBmLEtBQUswZ0IsY0FBYyxJQUFJMWdCLEtBQUtrQixRQUFRa2QsaUJBQWlCM0UsRUFBRXpaLE1BQUssS0FBTTJaLEVBQUVnSCxzQkFBc0IsU0FBUzdILEdBQUc5WSxLQUFLNGdCLGdCQUFnQjlILElBQUlhLEVBQUVrSCxpQkFBaUIsU0FBUy9ILEdBQUc5WSxLQUFLNGdCLGdCQUFnQjlILElBQUksSUFBSStDLEVBQUUsQ0FBQ2lGLG9CQUFvQixhQUFhbkgsRUFBRWlILGdCQUFnQixTQUFTOUgsR0FBRyxHQUFHQSxFQUFFaFYsU0FBUzlELEtBQUtrQixRQUFRLENBQUMsSUFBSXFTLEVBQUV2VCxLQUFLcWYsUUFBUS9GLEVBQUV1QyxFQUFFL0MsRUFBRWlJLGVBQWVqSSxFQUFFaUksYUFBYSxVQUFVeE4sRUFBRStMLGNBQWNoRyxHQUEzM0gsU0FBV1IsR0FBRyxJQUFJLElBQUl2RixLQUFLdUYsRUFBRSxPQUFNLEVBQUcsT0FBYyxFQUEwMEh2VSxDQUFFZ1AsRUFBRStMLGdCQUFnQnRmLEtBQUtnaEIsb0JBQW9CMUgsS0FBSy9GLEVBQUVnTSxRQUFRdmYsS0FBS2tCLFFBQVFtTyxNQUFNeUosRUFBRWlJLGNBQWMsVUFBVXhOLEVBQUVnTSxNQUFNakcsSUFBSUEsS0FBSy9GLEVBQUVpTSxNQUFhak0sRUFBRWlNLE1BQU1sRyxHQUFLMVcsS0FBSzVDLGFBQWF1VCxFQUFFaU0sTUFBTWxHLEdBQUd0WixLQUFLd2EsVUFBVSxnQkFBZ0IsQ0FBQ3hhLFNBQVMyWixFQUFFcUgsa0JBQWtCLFdBQVdoaEIsS0FBS2loQix5QkFBeUJqaEIsS0FBS2tCLFFBQVFnZ0Isb0JBQW9CekgsRUFBRXpaLE1BQUssR0FBSUEsS0FBSzJQLGlCQUFnQixHQUFJZ0ssRUFBRTZHLGNBQWMsU0FBUzFILEdBQUcsSUFBSXZGLEVBQUUsR0FBRyxJQUFJLElBQUloUCxLQUFLdVUsRUFBRXZGLEVBQUVoUCxHQUFHLEdBQUd2RSxLQUFLeUIsSUFBSThSLElBQUksSUFBSXVJLEVBQUUsQ0FBQ3FELG1CQUFtQixHQUFHM2QsbUJBQW1CLEdBQUc0ZCxnQkFBZ0IsSUFBSSxPQUFPekYsRUFBRXNILHVCQUF1QixXQUFXamhCLEtBQUt5QixJQUFJcWEsSUFBSW5DLEVBQUV3SCxRQUFRLFNBQVNySSxHQUFHQSxFQUFFNkIsTUFBTTdCLEdBQUcsRUFBRUEsRUFBRTlZLEtBQUswZ0IsYUFBYTVILEVBQUUsTUFBTWEsRUFBRXlILFdBQVcsV0FBV3BoQixLQUFLa0IsUUFBUWlLLFdBQVc4TCxZQUFZalgsS0FBS2tCLFNBQVNsQixLQUFLeUIsSUFBSSxDQUFDd1AsUUFBUSxLQUFLalIsS0FBS3dhLFVBQVUsU0FBUyxDQUFDeGEsUUFBUTJaLEVBQUUvRCxPQUFPLFdBQVcsT0FBT2tFLEdBQUdwWSxXQUFXMUIsS0FBSzZlLE9BQU96RixRQUFRNVgscUJBQXFCeEIsS0FBS3FhLEtBQUssZ0JBQWdCLFdBQVdyYSxLQUFLb2hCLG9CQUFvQnBoQixLQUFLNk8sYUFBYTdPLEtBQUtvaEIsY0FBY3pILEVBQUUwSCxPQUFPLGtCQUFrQnJoQixLQUFLc2hCLFNBQVN0aEIsS0FBS3lCLElBQUksQ0FBQ3dQLFFBQVEsS0FBSyxJQUFJNkgsRUFBRTlZLEtBQUs2ZSxPQUFPekYsUUFBUTdGLEVBQUUsR0FBNkRBLEVBQXhEdlQsS0FBS3VoQixtQ0FBbUMsaUJBQXFCdmhCLEtBQUt3aEIsc0JBQXNCeGhCLEtBQUtnZixXQUFXLENBQUM5UyxLQUFLNE0sRUFBRTJJLFlBQVlsWCxHQUFHdU8sRUFBRTRJLGFBQWF0QixZQUFXLEVBQUdELGdCQUFnQjVNLEtBQUtvRyxFQUFFNkgsc0JBQXNCLFdBQVd4aEIsS0FBS3NoQixVQUFVdGhCLEtBQUt3YSxVQUFVLFdBQVdiLEVBQUU0SCxtQ0FBbUMsU0FBU3pJLEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLNmUsT0FBT3pGLFFBQVFOLEdBQUcsR0FBR3ZGLEVBQUVvTyxRQUFRLE1BQU0sVUFBVSxJQUFJLElBQUlwZCxLQUFLZ1AsRUFBRSxPQUFPaFAsR0FBR29WLEVBQUU5SyxLQUFLLFdBQVc3TyxLQUFLc2hCLFVBQVMsRUFBR3RoQixLQUFLeUIsSUFBSSxDQUFDd1AsUUFBUSxLQUFLLElBQUk2SCxFQUFFOVksS0FBSzZlLE9BQU96RixRQUFRN0YsRUFBRSxHQUE0REEsRUFBdkR2VCxLQUFLdWhCLG1DQUFtQyxnQkFBb0J2aEIsS0FBSzRoQixvQkFBb0I1aEIsS0FBS2dmLFdBQVcsQ0FBQzlTLEtBQUs0TSxFQUFFNEksYUFBYW5YLEdBQUd1TyxFQUFFMkksWUFBWXJCLFlBQVcsRUFBR0QsZ0JBQWdCNU0sS0FBS29HLEVBQUVpSSxvQkFBb0IsV0FBVzVoQixLQUFLc2hCLFdBQVd0aEIsS0FBS3lCLElBQUksQ0FBQ3dQLFFBQVEsU0FBU2pSLEtBQUt3YSxVQUFVLFVBQVViLEVBQUUzSCxRQUFRLFdBQVdoUyxLQUFLeUIsSUFBSSxDQUFDcWQsU0FBUyxHQUFHK0MsS0FBSyxHQUFHQyxNQUFNLEdBQUdDLElBQUksR0FBR0MsT0FBTyxHQUFHaEQsV0FBVyxHQUFHQyxVQUFVLE1BQU0zRixJQUFJLFNBQVNSLEVBQUV2RixHQUFHLGFBQWEsbUJBQW1CM1QsUUFBUUEsT0FBT0MsSUFBSUQsT0FBTyxvQkFBb0IsQ0FBQyx3QkFBd0Isb0JBQW9CLHVCQUF1QixVQUFVLFNBQVMyRSxFQUFFK1UsRUFBRUMsRUFBRVAsR0FBRyxPQUFPekYsRUFBRXVGLEVBQUV2VSxFQUFFK1UsRUFBRUMsRUFBRVAsS0FBSyxpQkFBaUJ0WixRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRXVGLEVBQUVuWixRQUFRLGNBQWNBLFFBQVEsWUFBWUEsUUFBUSxrQkFBa0JBLFFBQVEsV0FBV21aLEVBQUU2RixTQUFTcEwsRUFBRXVGLEVBQUVBLEVBQUVxQixVQUFVckIsRUFBRTRCLFFBQVE1QixFQUFFMEUsYUFBYTFFLEVBQUU2RixTQUFTQyxNQUFuYSxDQUEwYXZSLE9BQU8sU0FBU3lMLEVBQUV2RixFQUFFaFAsRUFBRStVLEVBQUVDLEdBQUcsYUFBYSxTQUFTUCxFQUFFRixFQUFFdkYsR0FBRyxJQUFJaFAsRUFBRStVLEVBQUV1RSxnQkFBZ0IvRSxHQUFHLEdBQUl2VSxFQUFKLENBQXlGdkUsS0FBS2tCLFFBQVFxRCxFQUFFbVYsSUFBSTFaLEtBQUtzWCxTQUFTb0MsRUFBRTFaLEtBQUtrQixVQUFVbEIsS0FBS29aLFFBQVFFLEVBQUVELE9BQU8sR0FBR3JaLEtBQUtvUyxZQUFZNlAsVUFBVWppQixLQUFLa1osT0FBTzNGLEdBQUcsSUFBSWdHLElBQUlNLEVBQUU3WixLQUFLa0IsUUFBUWdoQixhQUFhM0ksR0FBRXNDLEVBQUV0QyxHQUFHdlosTUFBVStlLFVBQWdCL2UsS0FBSzJmLFdBQVcsZUFBaUIzZixLQUFLNmUsY0FBdlNwRixHQUFHQSxFQUFFUyxNQUFNLG1CQUFtQmxhLEtBQUtvUyxZQUFZK1AsVUFBVSxNQUFNNWQsR0FBR3VVLElBQThPLFNBQVNnQixFQUFFaEIsR0FBRyxTQUFTdkYsSUFBSXVGLEVBQUU1VSxNQUFNbEUsS0FBS21FLFdBQVcsT0FBT29QLEVBQUU3USxVQUFVRCxPQUFPa1csT0FBT0csRUFBRXBXLFlBQXVCMFAsWUFBWW1CLEVBQXVLLElBQUlrRyxFQUFFWCxFQUFFbUIsUUFBUVAsRUFBRVosRUFBRS9ZLE9BQU80WixFQUFFLGFBQWFFLEVBQUUsRUFBRWdDLEVBQUUsR0FBRzdDLEVBQUVtSixVQUFVLFdBQVduSixFQUFFNEYsS0FBS3JGLEVBQUVQLEVBQUVpSixTQUFTLENBQUNHLGVBQWUsQ0FBQ3RELFNBQVMsWUFBWXVELFlBQVcsRUFBR0MsWUFBVyxFQUFHQyxXQUFVLEVBQUdDLFFBQU8sRUFBR0MsaUJBQWdCLEVBQUdqaEIsbUJBQW1CLE9BQU9pZ0IsWUFBWSxDQUFDRSxRQUFRLEVBQUUxQyxVQUFVLGdCQUFnQnlDLGFBQWEsQ0FBQ0MsUUFBUSxFQUFFMUMsVUFBVSxhQUFhLElBQUluRCxFQUFFOUMsRUFBRXRXLFVBQVU0VyxFQUFFRCxPQUFPeUMsRUFBRXZJLEVBQUU3USxXQUFXb1osRUFBRTVDLE9BQU8sU0FBU0osR0FBR1EsRUFBRUQsT0FBT3JaLEtBQUtvWixRQUFRTixJQUFJZ0QsRUFBRTZELFdBQVcsU0FBUzdHLEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLb1MsWUFBWXNRLGNBQWM1SixHQUFHLE9BQU92RixRQUFHLElBQVN2VCxLQUFLb1osUUFBUTdGLEdBQUd2VCxLQUFLb1osUUFBUTdGLEdBQUd2VCxLQUFLb1osUUFBUU4sSUFBSUUsRUFBRTBKLGNBQWMsQ0FBQ0wsV0FBVyxlQUFlTSxXQUFXLGVBQWVDLGNBQWMsa0JBQWtCTixXQUFXLGVBQWVDLFVBQVUsY0FBY0MsT0FBTyxnQkFBZ0JDLGdCQUFnQix1QkFBdUIzRyxFQUFFaUQsUUFBUSxXQUFXL2UsS0FBSzZpQixjQUFjN2lCLEtBQUs4aUIsT0FBTyxHQUFHOWlCLEtBQUsraUIsTUFBTS9pQixLQUFLb1osUUFBUTJKLE9BQU96SixFQUFFRCxPQUFPclosS0FBS2tCLFFBQVFtTyxNQUFNclAsS0FBS29aLFFBQVFnSixnQkFBc0JwaUIsS0FBSzJmLFdBQVcsV0FBYTNmLEtBQUtnakIsY0FBY2xILEVBQUUrRyxZQUFZLFdBQVc3aUIsS0FBS3NULE1BQU10VCxLQUFLaWpCLFNBQVNqakIsS0FBS2tCLFFBQVFvTCxXQUFXd1AsRUFBRW1ILFNBQVMsU0FBU25LLEdBQUcsSUFBSSxJQUFJdkYsRUFBRXZULEtBQUtrakIsd0JBQXdCcEssR0FBR3ZVLEVBQUV2RSxLQUFLb1MsWUFBWXdNLEtBQUt0RixFQUFFLEdBQUdDLEVBQUUsRUFBRUEsRUFBRWhHLEVBQUUvTyxPQUFPK1UsSUFBSSxDQUFDLElBQVdPLEVBQUUsSUFBSXZWLEVBQVhnUCxFQUFFZ0csR0FBYXZaLE1BQU1zWixFQUFFN0ssS0FBS3FMLEdBQUcsT0FBT1IsR0FBR3dDLEVBQUVvSCx3QkFBd0IsU0FBU3BLLEdBQUcsT0FBT1EsRUFBRXlFLG1CQUFtQmpGLEVBQUU5WSxLQUFLb1osUUFBUStKLGVBQWVySCxFQUFFc0gsZ0JBQWdCLFdBQVcsT0FBT3BqQixLQUFLc1QsTUFBTStQLElBQUksU0FBU3ZLLEdBQUcsT0FBT0EsRUFBRTVYLFdBQVc0YSxFQUFFK0MsT0FBTyxXQUFXN2UsS0FBS3NqQixlQUFldGpCLEtBQUt1akIsZ0JBQWdCLElBQUl6SyxFQUFFOVksS0FBSzJmLFdBQVcsaUJBQWlCcE0sT0FBRSxJQUFTdUYsRUFBRUEsR0FBRzlZLEtBQUt3akIsZ0JBQWdCeGpCLEtBQUt5akIsWUFBWXpqQixLQUFLc1QsTUFBTUMsR0FBR3ZULEtBQUt3akIsaUJBQWdCLEdBQUkxSCxFQUFFdEMsTUFBTXNDLEVBQUUrQyxPQUFPL0MsRUFBRXdILGFBQWEsV0FBV3RqQixLQUFLMGEsV0FBV29CLEVBQUVwQixRQUFRLFdBQVcxYSxLQUFLeWYsS0FBS2xiLEVBQUV2RSxLQUFLa0IsVUFBVTRhLEVBQUU0SCxnQkFBZ0IsU0FBUzVLLEVBQUV2RixHQUFHLElBQUkrRixFQUFFQyxFQUFFdlosS0FBS29aLFFBQVFOLEdBQXlGOVksS0FBSzhZLEdBQTNGUyxHQUFHLGlCQUFpQkEsRUFBRUQsRUFBRXRaLEtBQUtrQixRQUFRRyxjQUFja1ksR0FBR0EsYUFBYXlFLGNBQWMxRSxFQUFFQyxHQUFXRCxFQUFFL1UsRUFBRStVLEdBQUcvRixHQUFHZ0csR0FBVyxHQUFHdUMsRUFBRTJILFlBQVksU0FBUzNLLEVBQUV2RixHQUFHdUYsRUFBRTlZLEtBQUsyakIsbUJBQW1CN0ssR0FBRzlZLEtBQUs0akIsYUFBYTlLLEVBQUV2RixHQUFHdlQsS0FBSzZqQixlQUFlL0gsRUFBRTZILG1CQUFtQixTQUFTN0ssR0FBRyxPQUFPQSxFQUFFOVEsT0FBTyxTQUFTOFEsR0FBRyxPQUFPQSxFQUFFZ0wsYUFBYWhJLEVBQUU4SCxhQUFhLFNBQVM5SyxFQUFFdkYsR0FBRyxHQUFHdlQsS0FBSytqQixxQkFBcUIsU0FBU2pMLEdBQUdBLEdBQUdBLEVBQUV0VSxPQUFPLENBQUMsSUFBSUQsRUFBRSxHQUFHdVUsRUFBRTNRLFFBQVEsU0FBUzJRLEdBQUcsSUFBSVEsRUFBRXRaLEtBQUtna0IsdUJBQXVCbEwsR0FBR1EsRUFBRTJLLEtBQUtuTCxFQUFFUSxFQUFFNEssVUFBVTNRLEdBQUd1RixFQUFFcUwsZ0JBQWdCNWYsRUFBRWtLLEtBQUs2SyxJQUFJdFosTUFBTUEsS0FBS29rQixvQkFBb0I3ZixLQUFLdVgsRUFBRWtJLHVCQUF1QixXQUFXLE1BQU0sQ0FBQzdHLEVBQUUsRUFBRWhCLEVBQUUsSUFBSUwsRUFBRXNJLG9CQUFvQixTQUFTdEwsR0FBRzlZLEtBQUtxa0IsZ0JBQWdCdkwsRUFBRTNRLFFBQVEsU0FBUzJRLEVBQUV2RixHQUFHdlQsS0FBS3NrQixjQUFjeEwsRUFBRW1MLEtBQUtuTCxFQUFFcUUsRUFBRXJFLEVBQUVxRCxFQUFFckQsRUFBRW9MLFVBQVUzUSxJQUFJdlQsT0FBTzhiLEVBQUV1SSxjQUFjLFdBQVcsSUFBSXZMLEVBQUU5WSxLQUFLb1osUUFBUStILFFBQVEsT0FBTyxNQUFPckksT0FBbUI5WSxLQUFLbWhCLFFBQVEsSUFBSW5oQixLQUFLbWhCLFFBQXhxRixTQUFXckksR0FBRyxHQUFHLGlCQUFpQkEsRUFBRSxPQUFPQSxFQUFFLElBQUl2RixFQUFFdUYsRUFBRTdWLE1BQU0scUJBQXFCc0IsRUFBRWdQLEdBQUdBLEVBQUUsR0FBRytGLEVBQUUvRixHQUFHQSxFQUFFLEdBQUcsT0FBSWhQLEVBQUVDLFFBQWdCRCxFQUFFN0MsV0FBVzZDLEtBQVN3WCxFQUFFekMsSUFBSSxHQUE5QixFQUF3akZMLENBQUVILEdBQUc5WSxLQUFLbWhCLFVBQVVyRixFQUFFd0ksY0FBYyxTQUFTeEwsRUFBRXZGLEVBQUVoUCxFQUFFK1UsRUFBRUMsR0FBR0QsRUFBRVIsRUFBRXVILEtBQUs5TSxFQUFFaFAsSUFBSXVVLEVBQUVxSSxRQUFRNUgsRUFBRXZaLEtBQUttaEIsU0FBU3JJLEVBQUV3SCxPQUFPL00sRUFBRWhQLEtBQUt1WCxFQUFFK0gsWUFBWSxXQUFXN2pCLEtBQUt5aUIsbUJBQW1CM0csRUFBRTJHLGdCQUFnQixXQUFvRCxHQUFuQ3ppQixLQUFLMmYsV0FBVyxtQkFBd0IsQ0FBQyxJQUFJcE0sRUFBRXZULEtBQUt1a0Isb0JBQW9CaFIsSUFBSXZULEtBQUt3a0IscUJBQXFCalIsRUFBRXVILE9BQU0sR0FBSTlhLEtBQUt3a0IscUJBQXFCalIsRUFBRStILFFBQU8sTUFBT1EsRUFBRXlJLGtCQUFrQjVLLEVBQUVtQyxFQUFFMEkscUJBQXFCLFNBQVMxTCxFQUFFdkYsR0FBRyxRQUFHLElBQVN1RixFQUFFLENBQUMsSUFBSXZVLEVBQUV2RSxLQUFLeWYsS0FBS2xiLEVBQUVxWCxjQUFjOUMsR0FBR3ZGLEVBQUVoUCxFQUFFMFgsWUFBWTFYLEVBQUUyWCxhQUFhM1gsRUFBRXNZLGdCQUFnQnRZLEVBQUV1WSxpQkFBaUJ2WSxFQUFFOFgsY0FBYzlYLEVBQUU2WCxXQUFXN1gsRUFBRXlZLGVBQWV6WSxFQUFFMFksbUJBQW1CbkUsRUFBRWpZLEtBQUs0akIsSUFBSTNMLEVBQUUsR0FBRzlZLEtBQUtrQixRQUFRbU8sTUFBTWtFLEVBQUUsUUFBUSxVQUFVdUYsRUFBRSxPQUFPZ0QsRUFBRWlJLHFCQUFxQixTQUFTakwsRUFBRXZGLEdBQUcsU0FBU2hQLElBQUlnVixFQUFFbUwsY0FBYzVMLEVBQUUsV0FBVyxLQUFLLENBQUN2RixJQUFJLFNBQVMrRixNQUFJUSxHQUFPZCxHQUFHelUsSUFBSSxJQUFJZ1YsRUFBRXZaLEtBQUtnWixFQUFFekYsRUFBRS9PLE9BQU8sR0FBSStPLEdBQUl5RixFQUFSLENBQTBCLElBQUljLEVBQUUsRUFBRXZHLEVBQUVwTCxRQUFRLFNBQVNvTCxHQUFHQSxFQUFFOEcsS0FBS3ZCLEVBQUVRLFVBQTNDL1UsS0FBaUR1WCxFQUFFNEksY0FBYyxTQUFTNUwsRUFBRXZGLEVBQUVoUCxHQUFHLElBQUkrVSxFQUFFL0YsRUFBRSxDQUFDQSxHQUFHeEwsT0FBT3hELEdBQUdBLEVBQUUsR0FBR3ZFLEtBQUt3YSxVQUFVMUIsRUFBRVEsR0FBR0ksRUFBRSxHQUFHMVosS0FBS3NYLFNBQVN0WCxLQUFLc1gsVUFBVW9DLEVBQUUxWixLQUFLa0IsU0FBU3FTLEVBQUUsQ0FBQyxJQUFJZ0csRUFBRUcsRUFBRXBVLE1BQU1pTyxHQUFHZ0csRUFBRW5ULEtBQUswUyxFQUFFOVksS0FBS3NYLFNBQVN4VixRQUFReVgsRUFBRWhWLFFBQVF2RSxLQUFLc1gsU0FBU3hWLFFBQVFnWCxFQUFFdlUsSUFBSXVYLEVBQUU2SSxPQUFPLFNBQVM3TCxHQUFHLElBQUl2RixFQUFFdlQsS0FBSzRrQixRQUFROUwsR0FBR3ZGLElBQUlBLEVBQUV1USxXQUFVLElBQUtoSSxFQUFFK0ksU0FBUyxTQUFTL0wsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs0a0IsUUFBUTlMLEdBQUd2RixVQUFVQSxFQUFFdVEsV0FBV2hJLEVBQUVpSCxNQUFNLFNBQVNqSyxJQUFHQSxFQUFFOVksS0FBSzhrQixNQUFNaE0sTUFBTzlZLEtBQUs4aUIsT0FBTzlpQixLQUFLOGlCLE9BQU8vYSxPQUFPK1EsR0FBR0EsRUFBRTNRLFFBQVFuSSxLQUFLMmtCLE9BQU8za0IsUUFBUThiLEVBQUVpSixRQUFRLFNBQVNqTSxJQUFHQSxFQUFFOVksS0FBSzhrQixNQUFNaE0sS0FBTUEsRUFBRTNRLFFBQVEsU0FBUzJRLEdBQUdRLEVBQUVxRSxXQUFXM2QsS0FBSzhpQixPQUFPaEssR0FBRzlZLEtBQUs2a0IsU0FBUy9MLElBQUk5WSxPQUFPOGIsRUFBRWdKLE1BQU0sU0FBU2hNLEdBQUcsR0FBR0EsRUFBRSxNQUFNLGlCQUFpQkEsSUFBSUEsRUFBRTlZLEtBQUtrQixRQUFRbUssaUJBQWlCeU4sSUFBTVEsRUFBRXBMLFVBQVU0SyxJQUFJZ0QsRUFBRXlILGNBQWMsV0FBV3ZqQixLQUFLOGlCLFFBQVE5aUIsS0FBSzhpQixPQUFPdGUsU0FBU3hFLEtBQUtnbEIsbUJBQW1CaGxCLEtBQUs4aUIsT0FBTzNhLFFBQVFuSSxLQUFLaWxCLGFBQWFqbEIsUUFBUThiLEVBQUVrSixpQkFBaUIsV0FBVyxJQUFJbE0sRUFBRTlZLEtBQUtrQixRQUFRdU8sd0JBQXdCOEQsRUFBRXZULEtBQUt5ZixLQUFLemYsS0FBS2tsQixjQUFjLENBQUNyRCxLQUFLL0ksRUFBRStJLEtBQUt0TyxFQUFFMEksWUFBWTFJLEVBQUVzSixnQkFBZ0JrRixJQUFJakosRUFBRWlKLElBQUl4TyxFQUFFNkksV0FBVzdJLEVBQUV5SixlQUFlOEUsTUFBTWhKLEVBQUVnSixPQUFPdk8sRUFBRTJJLGFBQWEzSSxFQUFFdUosa0JBQWtCa0YsT0FBT2xKLEVBQUVrSixRQUFRek8sRUFBRThJLGNBQWM5SSxFQUFFMEoscUJBQXFCbkIsRUFBRW1KLGFBQWF0TCxFQUFFbUMsRUFBRXFKLGtCQUFrQixTQUFTck0sR0FBRyxJQUFJdkYsRUFBRXVGLEVBQUVySix3QkFBd0I2SixFQUFFdFosS0FBS2tsQixjQUFjM0wsRUFBRWhWLEVBQUV1VSxHQUErSSxNQUExSSxDQUFDK0ksS0FBS3RPLEVBQUVzTyxLQUFLdkksRUFBRXVJLEtBQUt0SSxFQUFFZ0QsV0FBV3dGLElBQUl4TyxFQUFFd08sSUFBSXpJLEVBQUV5SSxJQUFJeEksRUFBRW1ELFVBQVVvRixNQUFNeEksRUFBRXdJLE1BQU12TyxFQUFFdU8sTUFBTXZJLEVBQUVpRCxZQUFZd0YsT0FBTzFJLEVBQUUwSSxPQUFPek8sRUFBRXlPLE9BQU96SSxFQUFFb0QsZUFBd0JiLEVBQUVnQyxZQUFZeEUsRUFBRXdFLFlBQVloQyxFQUFFa0gsV0FBVyxXQUFXbEssRUFBRXNGLGlCQUFpQixTQUFTcGUsTUFBTUEsS0FBS29sQixlQUFjLEdBQUl0SixFQUFFdUosYUFBYSxXQUFXdk0sRUFBRW9JLG9CQUFvQixTQUFTbGhCLE1BQU1BLEtBQUtvbEIsZUFBYyxHQUFJdEosRUFBRXdKLFNBQVMsV0FBV3RsQixLQUFLd2lCLFVBQVVsSixFQUFFMkUsZUFBZWpGLEVBQUUsV0FBVyxLQUFLOEMsRUFBRTBHLE9BQU8sV0FBV3hpQixLQUFLb2xCLGVBQWVwbEIsS0FBS3VsQixxQkFBcUJ2bEIsS0FBSzZlLFVBQVUvQyxFQUFFeUosa0JBQWtCLFdBQVcsSUFBSXpNLEVBQUV2VSxFQUFFdkUsS0FBS2tCLFNBQXdCLE9BQWJsQixLQUFLeWYsTUFBTTNHLEdBQVlBLEVBQUV5QyxhQUFhdmIsS0FBS3lmLEtBQUtsRSxZQUFZTyxFQUFFMEosU0FBUyxTQUFTMU0sR0FBRyxJQUFJdkYsRUFBRXZULEtBQUtpakIsU0FBU25LLEdBQUcsT0FBT3ZGLEVBQUUvTyxTQUFTeEUsS0FBS3NULE1BQU10VCxLQUFLc1QsTUFBTXZMLE9BQU93TCxJQUFJQSxHQUFHdUksRUFBRTJKLFNBQVMsU0FBUzNNLEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLd2xCLFNBQVMxTSxHQUFHdkYsRUFBRS9PLFNBQVN4RSxLQUFLeWpCLFlBQVlsUSxHQUFFLEdBQUl2VCxLQUFLcWhCLE9BQU85TixLQUFLdUksRUFBRTRKLFVBQVUsU0FBUzVNLEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLaWpCLFNBQVNuSyxHQUFHLEdBQUd2RixFQUFFL08sT0FBTyxDQUFDLElBQUlELEVBQUV2RSxLQUFLc1QsTUFBTWxJLE1BQU0sR0FBR3BMLEtBQUtzVCxNQUFNQyxFQUFFeEwsT0FBT3hELEdBQUd2RSxLQUFLc2pCLGVBQWV0akIsS0FBS3VqQixnQkFBZ0J2akIsS0FBS3lqQixZQUFZbFEsR0FBRSxHQUFJdlQsS0FBS3FoQixPQUFPOU4sR0FBR3ZULEtBQUt5akIsWUFBWWxmLEtBQUt1WCxFQUFFdUYsT0FBTyxTQUFTdkksR0FBRyxHQUFHOVksS0FBSytqQixxQkFBcUIsU0FBU2pMLEdBQUdBLEdBQUdBLEVBQUV0VSxPQUFPLENBQUMsSUFBSStPLEVBQUV2VCxLQUFLcWtCLGdCQUFnQnZMLEVBQUUzUSxRQUFRLFNBQVMyUSxFQUFFdlUsR0FBR3VVLEVBQUVxSSxRQUFRNWMsRUFBRWdQLEdBQUd1RixFQUFFdUksYUFBYXZGLEVBQUVqTixLQUFLLFNBQVNpSyxHQUFHLEdBQUc5WSxLQUFLK2pCLHFCQUFxQixPQUFPakwsR0FBR0EsR0FBR0EsRUFBRXRVLE9BQU8sQ0FBQyxJQUFJK08sRUFBRXZULEtBQUtxa0IsZ0JBQWdCdkwsRUFBRTNRLFFBQVEsU0FBUzJRLEVBQUV2VSxHQUFHdVUsRUFBRXFJLFFBQVE1YyxFQUFFZ1AsR0FBR3VGLEVBQUVqSyxXQUFXaU4sRUFBRTZKLG1CQUFtQixTQUFTN00sR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs0bEIsU0FBUzlNLEdBQUc5WSxLQUFLcWhCLE9BQU85TixJQUFJdUksRUFBRStKLGlCQUFpQixTQUFTL00sR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs0bEIsU0FBUzlNLEdBQUc5WSxLQUFLNk8sS0FBSzBFLElBQUl1SSxFQUFFOEksUUFBUSxTQUFTOUwsR0FBRyxJQUFJLElBQUl2RixFQUFFLEVBQUVBLEVBQUV2VCxLQUFLc1QsTUFBTTlPLE9BQU8rTyxJQUFJLENBQUMsSUFBSWhQLEVBQUV2RSxLQUFLc1QsTUFBTUMsR0FBRyxHQUFHaFAsRUFBRXJELFNBQVM0WCxFQUFFLE9BQU92VSxJQUFJdVgsRUFBRThKLFNBQVMsU0FBUzlNLEdBQUdBLEVBQUVRLEVBQUVwTCxVQUFVNEssR0FBRyxJQUFJdkYsRUFBRSxHQUFHLE9BQU91RixFQUFFM1EsUUFBUSxTQUFTMlEsR0FBRyxJQUFJdlUsRUFBRXZFLEtBQUs0a0IsUUFBUTlMLEdBQUd2VSxHQUFHZ1AsRUFBRTlFLEtBQUtsSyxJQUFJdkUsTUFBTXVULEdBQUd1SSxFQUFFbEcsT0FBTyxTQUFTa0QsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs0bEIsU0FBUzlNLEdBQUc5WSxLQUFLK2pCLHFCQUFxQixTQUFTeFEsR0FBR0EsR0FBR0EsRUFBRS9PLFFBQVErTyxFQUFFcEwsUUFBUSxTQUFTMlEsR0FBR0EsRUFBRWxELFNBQVMwRCxFQUFFcUUsV0FBVzNkLEtBQUtzVCxNQUFNd0YsSUFBSTlZLE9BQU84YixFQUFFOUosUUFBUSxXQUFXLElBQUk4RyxFQUFFOVksS0FBS2tCLFFBQVFtTyxNQUFNeUosRUFBRXdDLE9BQU8sR0FBR3hDLEVBQUVnRyxTQUFTLEdBQUdoRyxFQUFFZ0MsTUFBTSxHQUFHOWEsS0FBS3NULE1BQU1uTCxRQUFRLFNBQVMyUSxHQUFHQSxFQUFFOUcsWUFBWWhTLEtBQUtxbEIsZUFBZSxJQUFJOVIsRUFBRXZULEtBQUtrQixRQUFRZ2hCLG9CQUFvQnJHLEVBQUV0SSxVQUFVdlQsS0FBS2tCLFFBQVFnaEIsYUFBYXhJLEdBQUdBLEVBQUUzUyxXQUFXL0csS0FBS2tCLFFBQVFsQixLQUFLb1MsWUFBWStQLFlBQVluSixFQUFFOVIsS0FBSyxTQUFTNFIsR0FBMEIsSUFBSXZGLEdBQTNCdUYsRUFBRVEsRUFBRXVFLGdCQUFnQi9FLEtBQVlBLEVBQUVvSixhQUFhLE9BQU8zTyxHQUFHc0ksRUFBRXRJLElBQUl5RixFQUFFTCxPQUFPLFNBQVNHLEVBQUV2RixHQUFHLElBQUloUCxFQUFFdVYsRUFBRWQsR0FBRyxPQUFPelUsRUFBRTBkLFNBQVMzSSxFQUFFRCxPQUFPLEdBQUdMLEVBQUVpSixVQUFVM0ksRUFBRUQsT0FBTzlVLEVBQUUwZCxTQUFTMU8sR0FBR2hQLEVBQUVtZSxjQUFjcEosRUFBRUQsT0FBTyxHQUFHTCxFQUFFMEosZUFBZW5lLEVBQUU0ZCxVQUFVckosRUFBRXZVLEVBQUUyQyxLQUFLOFIsRUFBRTlSLEtBQUszQyxFQUFFcWEsS0FBSzlFLEVBQUVQLEdBQUdELEVBQUVpRixTQUFTaGEsRUFBRXVVLEdBQUdZLEdBQUdBLEVBQUVLLFNBQVNMLEVBQUVLLFFBQVFqQixFQUFFdlUsR0FBR0EsR0FBRyxJQUFJd1gsRUFBRSxDQUFDK0osR0FBRyxFQUFFOU0sRUFBRSxLQUFLLE9BQU9BLEVBQUU0RixLQUFLckYsRUFBRVAsSUFBSSxTQUFTRixFQUFFdkYsR0FBRyxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLHlCQUF5QixDQUFDLHFCQUFxQjJULEdBQUcsaUJBQWlCN1QsUUFBUUEsT0FBT0QsUUFBUUMsT0FBT0QsUUFBUThULEVBQUU1VCxRQUFRLGNBQWNtWixFQUFFaU4sUUFBUWpOLEVBQUVpTixTQUFTLEdBQUdqTixFQUFFaU4sUUFBUW5ILEtBQUtyTCxFQUFFdUYsRUFBRTZGLFdBQXZPLENBQW1QdFIsT0FBTyxTQUFTeUwsR0FBRyxhQUFhLFNBQVN2RixJQUFJdUYsRUFBRThGLEtBQUsxYSxNQUFNbEUsS0FBS21FLFdBQVcsSUFBSUksRUFBRWdQLEVBQUU3USxVQUFVRCxPQUFPa1csT0FBT0csRUFBRThGLEtBQUtsYyxXQUFXNFcsRUFBRS9VLEVBQUV3YSxRQUFReGEsRUFBRXdhLFFBQVEsV0FBVy9lLEtBQUttTyxHQUFHbk8sS0FBSzZlLE9BQU9tSCxXQUFXMU0sRUFBRTFXLEtBQUs1QyxNQUFNQSxLQUFLaW1CLFNBQVMsSUFBSTFoQixFQUFFMmhCLGVBQWUsV0FBVyxJQUFJbG1CLEtBQUs4akIsVUFBVSxDQUFDOWpCLEtBQUtpbUIsU0FBUzlYLEdBQUduTyxLQUFLbU8sR0FBR25PLEtBQUtpbUIsU0FBUyxrQkFBa0JqbUIsS0FBS21PLEdBQUduTyxLQUFLaW1CLFNBQVNubEIsT0FBT0QsS0FBS0MsU0FBUyxJQUFJZ1ksRUFBRTlZLEtBQUs2ZSxPQUFPekYsUUFBUStNLFlBQVk1UyxFQUFFdlQsS0FBSzZlLE9BQU91SCxTQUFTLElBQUksSUFBSTdoQixLQUFLdVUsRUFBRSxDQUFDLElBQUlRLEVBQUUvRixFQUFFaFAsR0FBR3ZFLEtBQUtpbUIsU0FBUzFoQixHQUFHK1UsRUFBRXRaLEtBQUtrQixRQUFRbEIsU0FBUyxJQUFJdVosRUFBRWhWLEVBQUV5TixRQUFRLE9BQU96TixFQUFFeU4sUUFBUSxXQUFXdUgsRUFBRXJWLE1BQU1sRSxLQUFLbUUsV0FBV25FLEtBQUt5QixJQUFJLENBQUN3UCxRQUFRLE1BQU1zQyxJQUFJLFNBQVN1RixFQUFFdkYsR0FBRyxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLGdDQUFnQyxDQUFDLG9CQUFvQixxQkFBcUIyVCxHQUFHLGlCQUFpQjdULFFBQVFBLE9BQU9ELFFBQVFDLE9BQU9ELFFBQVE4VCxFQUFFNVQsUUFBUSxZQUFZQSxRQUFRLGNBQWNtWixFQUFFaU4sUUFBUWpOLEVBQUVpTixTQUFTLEdBQUdqTixFQUFFaU4sUUFBUU0sV0FBVzlTLEVBQUV1RixFQUFFNEIsUUFBUTVCLEVBQUU2RixXQUF0UyxDQUFrVHRSLE9BQU8sU0FBU3lMLEVBQUV2RixHQUFHLGFBQWEsU0FBU2hQLEVBQUV1VSxJQUFHOVksS0FBS3NtQixRQUFReE4sS0FBTTlZLEtBQUtvWixRQUFRTixFQUFFTSxRQUFRcFosS0FBS21pQixXQUFXbmlCLEtBQUtrQixRQUFRNFgsRUFBRTVYLFFBQVFsQixLQUFLc1QsTUFBTXdGLEVBQUV5TixjQUFjdm1CLEtBQUt5ZixLQUFLM0csRUFBRTJHLE1BQU0sSUFBSW5HLEVBQUUvVSxFQUFFN0IsVUFBOEksTUFBbEksQ0FBQyxlQUFlLHlCQUF5QixlQUFlLG9CQUFvQixvQkFBb0Isb0JBQW9CLGNBQXVCeUYsUUFBUSxTQUFTMlEsR0FBR1EsRUFBRVIsR0FBRyxXQUFXLE9BQU92RixFQUFFN1EsVUFBVW9XLEdBQUc1VSxNQUFNbEUsS0FBS3NtQixRQUFRbmlCLGNBQWNtVixFQUFFa04sMEJBQTBCLFdBQVcsSUFBSWpULEVBQUV1RixFQUFFOVksS0FBS3NtQixRQUFRcGxCLFNBQWdDLE9BQXJCbEIsS0FBS3NtQixRQUFRN0csTUFBTWxNLEdBQVlBLEVBQUVpSSxhQUFheGIsS0FBS3NtQixRQUFRN0csS0FBS2pFLGFBQWFsQyxFQUFFb0ssZ0JBQWdCLFdBQVcxakIsS0FBS3NtQixRQUFRNUMsZ0JBQWdCeGYsTUFBTWxFLEtBQUttRSxZQUFZbVYsRUFBRW1OLGVBQWUsV0FBV3ptQixLQUFLMG1CLGVBQWUsU0FBUyxVQUFVcE4sRUFBRXFOLGFBQWEsV0FBVzNtQixLQUFLMG1CLGVBQWUsTUFBTSxXQUFXcE4sRUFBRW9OLGVBQWUsU0FBUzVOLEVBQUV2RixHQUFHLElBQUloUCxFQUFFdVUsRUFBRXZGLEVBQUUrRixFQUFFLFFBQVEvRixFQUFFLEdBQUd2VCxLQUFLMGpCLGdCQUFnQm5mLEVBQUUrVSxJQUFJdFosS0FBS3VFLEdBQUcsQ0FBQyxJQUFJZ1YsRUFBRXZaLEtBQUs0bUIsbUJBQW1CNW1CLEtBQUt1RSxHQUFHZ1YsR0FBR0EsRUFBRUQsSUFBSXRaLEtBQUtzbUIsUUFBUTdHLEtBQUssUUFBUWxNLEtBQUsrRixFQUFFc04saUJBQWlCLFdBQVcsSUFBSXJULEVBQUV2VCxLQUFLc21CLFFBQVFDLGNBQWMsR0FBRyxPQUFPaFQsR0FBR0EsRUFBRXJTLFNBQVM0WCxFQUFFdkYsRUFBRXJTLFVBQVVvWSxFQUFFdUYsT0FBTyxXQUFXN2UsS0FBS3NtQixRQUFRekgsT0FBTzNhLE1BQU1sRSxLQUFLc21CLFFBQVFuaUIsWUFBWW1WLEVBQUVvQixRQUFRLFdBQVcxYSxLQUFLc21CLFFBQVE1TCxVQUFVMWEsS0FBS3lmLEtBQUt6ZixLQUFLc21CLFFBQVE3RyxNQUFNbGIsRUFBRXNpQixNQUFNLEdBQUd0aUIsRUFBRW9VLE9BQU8sU0FBU0csRUFBRXZGLEdBQUcsU0FBU2dHLElBQUloVixFQUFFTCxNQUFNbEUsS0FBS21FLFdBQVcsT0FBT29WLEVBQUU3VyxVQUFVRCxPQUFPa1csT0FBT1csSUFBZWxILFlBQVltSCxFQUFFaEcsSUFBSWdHLEVBQUVILFFBQVE3RixHQUEyQmhQLEVBQUVzaUIsTUFBMUJ0TixFQUFFN1csVUFBVXlmLFVBQVVySixHQUFhUyxHQUFLaFYsSUFBSSxTQUFTdVUsRUFBRXZGLEdBQUcsbUJBQW1CM1QsUUFBUUEsT0FBT0MsSUFBSUQsT0FBTyx5QkFBeUIsQ0FBQyxvQkFBb0IscUJBQXFCMlQsR0FBRyxpQkFBaUI3VCxRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRTVULFFBQVEsWUFBWUEsUUFBUSxhQUFhbVosRUFBRWdPLFFBQVF2VCxFQUFFdUYsRUFBRTZGLFNBQVM3RixFQUFFNEIsU0FBNVAsQ0FBc1FyTixPQUFPLFNBQVN5TCxFQUFFdkYsR0FBRyxJQUFJaFAsRUFBRXVVLEVBQUVILE9BQU8sV0FBV3BVLEVBQUVtZSxjQUFjcUUsU0FBUyxhQUFhLElBQUl6TixFQUFFL1UsRUFBRTdCLFVBQVUsT0FBTzRXLEVBQUVnSyxhQUFhLFdBQVd0akIsS0FBSzBhLFVBQVUxYSxLQUFLMGpCLGdCQUFnQixjQUFjLGNBQWMxakIsS0FBSzBqQixnQkFBZ0IsU0FBUyxjQUFjMWpCLEtBQUtnbkIsaUJBQWlCaG5CLEtBQUtpbkIsTUFBTSxHQUFHLElBQUksSUFBSW5PLEVBQUUsRUFBRUEsRUFBRTlZLEtBQUtrbkIsS0FBS3BPLElBQUk5WSxLQUFLaW5CLE1BQU14WSxLQUFLLEdBQUd6TyxLQUFLbW5CLEtBQUssRUFBRW5uQixLQUFLb25CLG1CQUFtQixHQUFHOU4sRUFBRTBOLGVBQWUsV0FBVyxHQUFHaG5CLEtBQUtxbkIscUJBQXFCcm5CLEtBQUtzbkIsWUFBWSxDQUFDLElBQUl4TyxFQUFFOVksS0FBS3NULE1BQU0sR0FBRy9PLEVBQUV1VSxHQUFHQSxFQUFFNVgsUUFBUWxCLEtBQUtzbkIsWUFBWS9pQixHQUFHZ1AsRUFBRWhQLEdBQUdrWCxZQUFZemIsS0FBS3VuQixlQUFlLElBQUlqTyxFQUFFdFosS0FBS3NuQixhQUFhdG5CLEtBQUt3bkIsT0FBT2pPLEVBQUV2WixLQUFLdW5CLGVBQWV2bkIsS0FBS3duQixPQUFPeE8sRUFBRU8sRUFBRUQsRUFBRVEsRUFBRVIsRUFBRUMsRUFBRUQsRUFBMkJOLEVBQUVuWSxLQUF6QmlaLEdBQUdBLEVBQUUsRUFBRSxRQUFRLFNBQWtCZCxHQUFHaFosS0FBS2tuQixLQUFLcm1CLEtBQUs0akIsSUFBSXpMLEVBQUUsSUFBSU0sRUFBRStOLGtCQUFrQixXQUFXLElBQWtDOWlCLEVBQTVCdkUsS0FBSzJmLFdBQVcsWUFBZ0IzZixLQUFLa0IsUUFBUWlLLFdBQVduTCxLQUFLa0IsUUFBUW9ZLEVBQUUvRixFQUFFaFAsR0FBR3ZFLEtBQUt1bkIsZUFBZWpPLEdBQUdBLEVBQUVpQyxZQUFZakMsRUFBRTBLLHVCQUF1QixTQUFTbEwsR0FBR0EsRUFBRTRCLFVBQVUsSUFBSW5ILEVBQUV1RixFQUFFMkcsS0FBS2hFLFdBQVd6YixLQUFLc25CLFlBQW9DaE8sRUFBRXpZLEtBQXhCMFMsR0FBR0EsRUFBRSxFQUFFLFFBQVEsUUFBaUJ1RixFQUFFMkcsS0FBS2hFLFdBQVd6YixLQUFLc25CLGFBQWFoTyxFQUFFelksS0FBSzRtQixJQUFJbk8sRUFBRXRaLEtBQUtrbkIsTUFBTSxJQUFJLElBQW9GbE8sRUFBRWhaLEtBQWhGQSxLQUFLb1osUUFBUXNPLGdCQUFnQiw0QkFBNEIsc0JBQStCcE8sRUFBRVIsR0FBR2dCLEVBQUUsQ0FBQ3FELEVBQUVuZCxLQUFLc25CLFlBQVl0TyxFQUFFMk8sSUFBSXhMLEVBQUVuRCxFQUFFbUQsR0FBR2xELEVBQUVELEVBQUVtRCxFQUFFckQsRUFBRTJHLEtBQUsvRCxZQUFZakMsRUFBRUgsRUFBRU4sRUFBRTJPLElBQUlqTyxFQUFFVixFQUFFMk8sSUFBSWpPLEVBQUVELEVBQUVDLElBQUkxWixLQUFLaW5CLE1BQU12TixHQUFHVCxFQUFFLE9BQU9hLEdBQUdSLEVBQUVzTyxtQkFBbUIsU0FBUzlPLEdBQUcsSUFBSXZGLEVBQUV2VCxLQUFLNm5CLGdCQUFnQi9PLEdBQUd2VSxFQUFFMUQsS0FBSzRtQixJQUFJdmpCLE1BQU1yRCxLQUFLMFMsR0FBRyxNQUFNLENBQUNvVSxJQUFJcFUsRUFBRWpJLFFBQVEvRyxHQUFHNFgsRUFBRTVYLElBQUkrVSxFQUFFdU8sZ0JBQWdCLFNBQVMvTyxHQUFHLEdBQUdBLEVBQUUsRUFBRSxPQUFPOVksS0FBS2luQixNQUFNLElBQUksSUFBSTFULEVBQUUsR0FBR2hQLEVBQUV2RSxLQUFLa25CLEtBQUssRUFBRXBPLEVBQUVRLEVBQUUsRUFBRUEsRUFBRS9VLEVBQUUrVSxJQUFJL0YsRUFBRStGLEdBQUd0WixLQUFLOG5CLGNBQWN4TyxFQUFFUixHQUFHLE9BQU92RixHQUFHK0YsRUFBRXdPLGNBQWMsU0FBU2hQLEVBQUV2RixHQUFHLEdBQUdBLEVBQUUsRUFBRSxPQUFPdlQsS0FBS2luQixNQUFNbk8sR0FBRyxJQUFJdlUsRUFBRXZFLEtBQUtpbkIsTUFBTTdiLE1BQU0wTixFQUFFQSxFQUFFdkYsR0FBRyxPQUFPMVMsS0FBSzRqQixJQUFJdmdCLE1BQU1yRCxLQUFLMEQsSUFBSStVLEVBQUV5TywwQkFBMEIsU0FBU2pQLEVBQUV2RixHQUFHLElBQUloUCxFQUFFdkUsS0FBS29uQixtQkFBbUJwbkIsS0FBS2tuQixLQUEwQjNpQixFQUFqQixFQUFGdVUsR0FBS3ZVLEVBQUV1VSxFQUFFOVksS0FBS2tuQixLQUFTLEVBQUUzaUIsRUFBRSxJQUFJZ1YsRUFBRWhHLEVBQUVrTSxLQUFLaEUsWUFBWWxJLEVBQUVrTSxLQUFLL0QsWUFBWSxPQUFPMWIsS0FBS29uQixtQkFBbUI3TixFQUFFaFYsRUFBRXVVLEVBQUU5WSxLQUFLb25CLG1CQUFtQixDQUFDTyxJQUFJcGpCLEVBQUU0WCxFQUFFbmMsS0FBSzhuQixjQUFjdmpCLEVBQUV1VSxLQUFLUSxFQUFFMkwsYUFBYSxTQUFTbk0sR0FBRyxJQUFJdlUsRUFBRWdQLEVBQUV1RixHQUFHUSxFQUFFdFosS0FBS21sQixrQkFBa0JyTSxHQUFtQ0UsRUFBOUJoWixLQUFLMmYsV0FBVyxjQUFrQnJHLEVBQUV1SSxLQUFLdkksRUFBRXdJLE1BQU1oSSxFQUFFZCxFQUFFelUsRUFBRWtYLFdBQVd4QyxFQUFFcFksS0FBS21uQixNQUFNaFAsRUFBRWhaLEtBQUtzbkIsYUFBYXJPLEVBQUVwWSxLQUFLNGpCLElBQUksRUFBRXhMLEdBQUcsSUFBSVEsRUFBRTVZLEtBQUttbkIsTUFBTWxPLEVBQUU5WixLQUFLc25CLGFBQWE3TixHQUFHSyxFQUFFOVosS0FBS3NuQixZQUFZLEVBQUUsRUFBRTdOLEVBQUU1WSxLQUFLNG1CLElBQUl6bkIsS0FBS2tuQixLQUFLLEVBQUV6TixHQUFHLElBQUksSUFBbUNFLEdBQTdCM1osS0FBSzJmLFdBQVcsYUFBa0JyRyxFQUFFeUksSUFBSXpJLEVBQUUwSSxRQUFRemQsRUFBRW1YLFlBQVk3QixFQUFFWixFQUFFWSxHQUFHSixFQUFFSSxJQUFJN1osS0FBS2luQixNQUFNcE4sR0FBR2haLEtBQUs0akIsSUFBSTlLLEVBQUUzWixLQUFLaW5CLE1BQU1wTixLQUFLUCxFQUFFaUwsa0JBQWtCLFdBQVd2a0IsS0FBS21uQixLQUFLdG1CLEtBQUs0akIsSUFBSXZnQixNQUFNckQsS0FBS2IsS0FBS2luQixPQUFPLElBQUluTyxFQUFFLENBQUN3QyxPQUFPdGIsS0FBS21uQixNQUFNLE9BQU9ubkIsS0FBSzJmLFdBQVcsY0FBYzdHLEVBQUVnQyxNQUFNOWEsS0FBS2lvQix5QkFBeUJuUCxHQUFHUSxFQUFFMk8sc0JBQXNCLFdBQVcsSUFBSSxJQUFJblAsRUFBRSxFQUFFdkYsRUFBRXZULEtBQUtrbkIsT0FBTzNULEdBQUcsSUFBSXZULEtBQUtpbkIsTUFBTTFULElBQUl1RixJQUFJLE9BQU85WSxLQUFLa25CLEtBQUtwTyxHQUFHOVksS0FBS3NuQixZQUFZdG5CLEtBQUt3bkIsUUFBUWxPLEVBQUVpTSxrQkFBa0IsV0FBVyxJQUFJek0sRUFBRTlZLEtBQUt1bkIsZUFBZSxPQUFPdm5CLEtBQUtxbkIsb0JBQW9Cdk8sR0FBRzlZLEtBQUt1bkIsZ0JBQWdCaGpCLElBQUksU0FBU3VVLEVBQUV2RixHQUFHLG1CQUFtQjNULFFBQVFBLE9BQU9DLElBQUlELE9BQU8seUNBQXlDLENBQUMsaUJBQWlCLDBCQUEwQjJULEdBQUcsaUJBQWlCN1QsUUFBUUEsT0FBT0QsUUFBUUMsT0FBT0QsUUFBUThULEVBQUU1VCxRQUFRLGtCQUFrQkEsUUFBUSxtQkFBbUI0VCxFQUFFdUYsRUFBRWlOLFFBQVFNLFdBQVd2TixFQUFFZ08sU0FBMVIsQ0FBb1N6WixPQUFPLFNBQVN5TCxFQUFFdkYsR0FBRyxhQUFhLElBQUloUCxFQUFFdVUsRUFBRUgsT0FBTyxXQUFXVyxFQUFFL1UsRUFBRTdCLFVBQVU2VyxFQUFFLENBQUM0TCxtQkFBa0IsRUFBR3RHLFFBQU8sRUFBRzZFLGlCQUFnQixHQUFJLElBQUksSUFBSTFLLEtBQUt6RixFQUFFN1EsVUFBVTZXLEVBQUVQLEtBQUtNLEVBQUVOLEdBQUd6RixFQUFFN1EsVUFBVXNXLElBQUksSUFBSWMsRUFBRVIsRUFBRTBOLGVBQWUxTixFQUFFME4sZUFBZSxXQUFXaG5CLEtBQUtzVCxNQUFNdFQsS0FBS3NtQixRQUFRQyxjQUFjek0sRUFBRWxYLEtBQUs1QyxPQUFPLElBQUlpWixFQUFFSyxFQUFFcUcsV0FBVyxPQUFPckcsRUFBRXFHLFdBQVcsU0FBUzdHLEdBQUcsTUFBTSxZQUFZQSxPQUFFLElBQVM5WSxLQUFLb1osUUFBUThPLFdBQVdsb0IsS0FBS29aLFFBQVE4TyxXQUFXbG9CLEtBQUtvWixRQUFRMk4sU0FBUzlOLEVBQUUvVSxNQUFNbEUsS0FBS3NtQixRQUFRbmlCLFlBQVlJLElBQUksU0FBU3VVLEVBQUV2RixHQUFHLG1CQUFtQjNULFFBQVFBLE9BQU9DLElBQUlELE9BQU8sMENBQTBDLENBQUMsa0JBQWtCMlQsR0FBRyxpQkFBaUI5VCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRTVULFFBQVEsbUJBQW1CNFQsRUFBRXVGLEVBQUVpTixRQUFRTSxZQUE1TSxDQUF5TmhaLE9BQU8sU0FBU3lMLEdBQUcsYUFBYSxJQUFJdkYsRUFBRXVGLEVBQUVILE9BQU8sV0FBV3BVLEVBQUVnUCxFQUFFN1EsVUFBVSxPQUFPNkIsRUFBRStlLGFBQWEsV0FBV3RqQixLQUFLbWQsRUFBRSxFQUFFbmQsS0FBS21jLEVBQUUsRUFBRW5jLEtBQUttbkIsS0FBSyxFQUFFbm5CLEtBQUswakIsZ0JBQWdCLFNBQVMsZUFBZW5mLEVBQUV5Zix1QkFBdUIsU0FBU2xMLEdBQUdBLEVBQUU0QixVQUFVLElBQUluSCxFQUFFdUYsRUFBRTJHLEtBQUtoRSxXQUFXemIsS0FBS3duQixPQUFPampCLEVBQUV2RSxLQUFLc21CLFFBQVE3RyxLQUFLbEUsV0FBV3ZiLEtBQUt3bkIsT0FBTyxJQUFJeG5CLEtBQUttZCxHQUFHNUosRUFBRXZULEtBQUttZCxFQUFFNVksSUFBSXZFLEtBQUttZCxFQUFFLEVBQUVuZCxLQUFLbWMsRUFBRW5jLEtBQUttbkIsTUFBTSxJQUFJN04sRUFBRSxDQUFDNkQsRUFBRW5kLEtBQUttZCxFQUFFaEIsRUFBRW5jLEtBQUttYyxHQUFHLE9BQU9uYyxLQUFLbW5CLEtBQUt0bUIsS0FBSzRqQixJQUFJemtCLEtBQUttbkIsS0FBS25uQixLQUFLbWMsRUFBRXJELEVBQUUyRyxLQUFLL0QsYUFBYTFiLEtBQUttZCxHQUFHNUosRUFBRStGLEdBQUcvVSxFQUFFZ2dCLGtCQUFrQixXQUFXLE1BQU0sQ0FBQ2pKLE9BQU90YixLQUFLbW5CLE9BQU81VCxJQUFJLFNBQVN1RixFQUFFdkYsR0FBRyxtQkFBbUIzVCxRQUFRQSxPQUFPQyxJQUFJRCxPQUFPLDBDQUEwQyxDQUFDLGtCQUFrQjJULEdBQUcsaUJBQWlCN1QsUUFBUUEsT0FBT0QsUUFBUUMsT0FBT0QsUUFBUThULEVBQUU1VCxRQUFRLG1CQUFtQjRULEVBQUV1RixFQUFFaU4sUUFBUU0sWUFBM04sQ0FBd09oWixPQUFPLFNBQVN5TCxHQUFHLGFBQWEsSUFBSXZGLEVBQUV1RixFQUFFSCxPQUFPLFdBQVcsQ0FBQ3dQLG9CQUFvQixJQUFJNWpCLEVBQUVnUCxFQUFFN1EsVUFBVSxPQUFPNkIsRUFBRStlLGFBQWEsV0FBV3RqQixLQUFLbWMsRUFBRSxHQUFHNVgsRUFBRXlmLHVCQUF1QixTQUFTbEwsR0FBR0EsRUFBRTRCLFVBQVUsSUFBSW5ILEdBQUd2VCxLQUFLc21CLFFBQVE3RyxLQUFLbEUsV0FBV3pDLEVBQUUyRyxLQUFLaEUsWUFBWXpiLEtBQUtvWixRQUFRK08sb0JBQW9CNWpCLEVBQUV2RSxLQUFLbWMsRUFBRSxPQUFPbmMsS0FBS21jLEdBQUdyRCxFQUFFMkcsS0FBSy9ELFlBQVksQ0FBQ3lCLEVBQUU1SixFQUFFNEksRUFBRTVYLElBQUlBLEVBQUVnZ0Isa0JBQWtCLFdBQVcsTUFBTSxDQUFDakosT0FBT3RiLEtBQUttYyxJQUFJNUksSUFBSSxTQUFTdUYsRUFBRXZGLEdBQUcsbUJBQW1CM1QsUUFBUUEsT0FBT0MsSUFBSUQsT0FBTyxDQUFDLG9CQUFvQixvQkFBb0IsNkNBQTZDLHVCQUF1Qix5QkFBeUIsZ0NBQWdDLHlDQUF5QywwQ0FBMEMsMkNBQTJDLFNBQVMyRSxFQUFFK1UsRUFBRUMsRUFBRVAsRUFBRWMsRUFBRWIsR0FBRyxPQUFPMUYsRUFBRXVGLEVBQUV2VSxFQUFFK1UsRUFBRUMsRUFBRVAsRUFBRWMsRUFBRWIsS0FBSyxpQkFBaUJ2WixRQUFRQSxPQUFPRCxRQUFRQyxPQUFPRCxRQUFROFQsRUFBRXVGLEVBQUVuWixRQUFRLFlBQVlBLFFBQVEsWUFBWUEsUUFBUSw2QkFBNkJBLFFBQVEsa0JBQWtCQSxRQUFRLDBCQUEwQkEsUUFBUSxpQ0FBaUNBLFFBQVEsMENBQTBDQSxRQUFRLDJDQUEyQ0EsUUFBUSw0Q0FBNENtWixFQUFFaU4sUUFBUXhTLEVBQUV1RixFQUFFQSxFQUFFNkYsU0FBUzdGLEVBQUU0QixRQUFRNUIsRUFBRXVFLGdCQUFnQnZFLEVBQUUwRSxhQUFhMUUsRUFBRWlOLFFBQVFuSCxLQUFLOUYsRUFBRWlOLFFBQVFNLFlBQWwzQixDQUErM0JoWixPQUFPLFNBQVN5TCxFQUFFdkYsRUFBRWhQLEVBQUUrVSxFQUFFQyxFQUFFUCxFQUFFYyxHQUE4TCxJQUFJTCxFQUFFWCxFQUFFL1ksT0FBTzJaLEVBQUUwTyxPQUFPMWxCLFVBQVUybEIsS0FBSyxTQUFTdlAsR0FBRyxPQUFPQSxFQUFFdVAsUUFBUSxTQUFTdlAsR0FBRyxPQUFPQSxFQUFFd0YsUUFBUSxhQUFhLEtBQUszRSxFQUFFcEcsRUFBRW9GLE9BQU8sVUFBVSxDQUFDMlAsV0FBVyxVQUFVQyxtQkFBa0IsRUFBR0MsZUFBYyxJQUFLN08sRUFBRWlGLEtBQUs1RixFQUFFVyxFQUFFME0sV0FBV3ZNLEVBQUUsSUFBSUQsRUFBRUYsRUFBRWpYLFVBQVVtWCxFQUFFa0YsUUFBUSxXQUE4SyxJQUFJLElBQUlqRyxLQUEzSzlZLEtBQUtnbUIsU0FBUyxFQUFFaG1CLEtBQUtvbUIsU0FBUyxHQUFHcG1CLEtBQUt5b0IsY0FBY2xWLEVBQUU3USxVQUFVcWMsUUFBUW5jLEtBQUs1QyxNQUFNQSxLQUFLNm1CLE1BQU0sR0FBRzdtQixLQUFLdW1CLGNBQWN2bUIsS0FBS3NULE1BQU10VCxLQUFLMG9CLFlBQVksQ0FBQyxrQkFBK0I1TyxFQUFFK00sTUFBTTdtQixLQUFLMm9CLGdCQUFnQjdQLElBQUllLEVBQUVnSixZQUFZLFdBQVc3aUIsS0FBS2dtQixTQUFTLEVBQUV6UyxFQUFFN1EsVUFBVW1nQixZQUFZamdCLEtBQUs1QyxPQUFPNlosRUFBRW9KLFNBQVMsV0FBVyxJQUFJLElBQUluSyxFQUFFdkYsRUFBRTdRLFVBQVV1Z0IsU0FBUy9lLE1BQU1sRSxLQUFLbUUsV0FBV0ksRUFBRSxFQUFFQSxFQUFFdVUsRUFBRXRVLE9BQU9ELElBQUksQ0FBT3VVLEVBQUV2VSxHQUFLNEosR0FBR25PLEtBQUtnbUIsV0FBVyxPQUFPaG1CLEtBQUs0b0IscUJBQXFCOVAsR0FBR0EsR0FBR2UsRUFBRThPLGdCQUFnQixTQUFTN1AsR0FBRyxJQUFJdkYsRUFBRXVHLEVBQUUrTSxNQUFNL04sR0FBR3ZVLEVBQUV2RSxLQUFLb1osUUFBUU4sSUFBSSxHQUFHOVksS0FBS29aLFFBQVFOLEdBQUd2RixFQUFFNkYsUUFBUUcsRUFBRUYsT0FBTzlGLEVBQUU2RixRQUFRN1UsR0FBR0EsRUFBRXZFLEtBQUs2bUIsTUFBTS9OLEdBQUcsSUFBSXZGLEVBQUV2VCxPQUFPNlosRUFBRWdGLE9BQU8sV0FBVyxPQUFPN2UsS0FBS3dqQixpQkFBaUJ4akIsS0FBSzJmLFdBQVcsbUJBQW1CM2YsS0FBSzZvQixlQUFlN29CLEtBQUs4b0IsV0FBV2pQLEVBQUVpUCxRQUFRLFdBQVcsSUFBSWhRLEVBQUU5WSxLQUFLK29CLGdCQUFnQi9vQixLQUFLc2pCLGVBQWV0akIsS0FBS3VqQixnQkFBZ0J2akIsS0FBS3lqQixZQUFZempCLEtBQUt1bUIsY0FBY3pOLEdBQUc5WSxLQUFLd2pCLGlCQUFnQixHQUFJM0osRUFBRWdQLFFBQVEsU0FBUy9QLEdBQUc5WSxLQUFLa1osT0FBT0osR0FBRzlZLEtBQUsrb0IsZ0JBQWdCLElBQUl4VixFQUFFdlQsS0FBS2dwQixRQUFRaHBCLEtBQUtzVCxPQUFPdFQsS0FBS3VtQixjQUFjaFQsRUFBRWdLLFFBQVF2ZCxLQUFLaXBCLHVCQUF1QmpwQixLQUFLa3BCLFdBQVdscEIsS0FBS21wQixjQUFjbnBCLEtBQUtvcEIsWUFBWSxDQUFDN1YsSUFBSXZULEtBQUtvcEIsWUFBWTdWLEdBQUd2VCxLQUFLcXBCLFFBQVFycEIsS0FBSzhvQixXQUFXalAsRUFBRUwsTUFBTUssRUFBRWdQLFFBQVFoUCxFQUFFdVAsWUFBWSxTQUFTdFEsR0FBRzlZLEtBQUtxaEIsT0FBT3ZJLEVBQUV3USxZQUFZdHBCLEtBQUs2TyxLQUFLaUssRUFBRXlRLFdBQVcxUCxFQUFFa1AsY0FBYyxXQUFXLElBQUlqUSxFQUFFOVksS0FBSzJmLFdBQVcsaUJBQWlCcE0sT0FBRSxJQUFTdUYsRUFBRUEsR0FBRzlZLEtBQUt3akIsZ0JBQWdCLE9BQU94akIsS0FBS2twQixXQUFXM1YsR0FBS3NHLEVBQUVvUCxxQkFBcUIsV0FBVyxTQUFTblEsSUFBSXZGLEdBQUdoUCxHQUFHK1UsR0FBR0MsRUFBRW1MLGNBQWMsa0JBQWtCLEtBQUssQ0FBQ25MLEVBQUVnTixnQkFBZ0IsSUFBSWhULEVBQUVoUCxFQUFFK1UsRUFBRUMsRUFBRXZaLEtBQUtBLEtBQUtxYSxLQUFLLGlCQUFpQixXQUFXOUcsR0FBRSxFQUFHdUYsTUFBTTlZLEtBQUtxYSxLQUFLLGVBQWUsV0FBVzlWLEdBQUUsRUFBR3VVLE1BQU05WSxLQUFLcWEsS0FBSyxpQkFBaUIsV0FBV2YsR0FBRSxFQUFHUixPQUFPZSxFQUFFbVAsUUFBUSxTQUFTbFEsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUtvWixRQUFRcFIsT0FBT3VMLEVBQUVBLEdBQUcsSUFBSSxJQUFJLElBQUloUCxFQUFFLEdBQUcrVSxFQUFFLEdBQUdDLEVBQUUsR0FBR1AsRUFBRWhaLEtBQUt3cEIsZUFBZWpXLEdBQUd1RyxFQUFFLEVBQUVBLEVBQUVoQixFQUFFdFUsT0FBT3NWLElBQUksQ0FBQyxJQUFJYixFQUFFSCxFQUFFZ0IsR0FBRyxJQUFJYixFQUFFNkssVUFBVSxDQUFDLElBQUlySyxFQUFFVCxFQUFFQyxHQUFHUSxHQUFHbFYsRUFBRWtLLEtBQUt3SyxHQUFHUSxHQUFHUixFQUFFcUksU0FBU2hJLEVBQUU3SyxLQUFLd0ssR0FBR1EsR0FBR1IsRUFBRXFJLFVBQVUvSCxFQUFFOUssS0FBS3dLLElBQUksTUFBTSxDQUFDc0UsUUFBUWhaLEVBQUUra0IsV0FBV2hRLEVBQUVpUSxTQUFTaFEsSUFBSU0sRUFBRTJQLGVBQWUsU0FBUzFRLEdBQUcsT0FBT1csR0FBR3paLEtBQUtvWixRQUFRbVAsa0JBQWtCLFNBQVNoVixHQUFHLE9BQU9rRyxFQUFFbEcsRUFBRXJTLFNBQVM2QyxHQUFHK1UsSUFDOXcrQixtQkFBbUJBLEVBQUUsU0FBU3ZGLEdBQUcsT0FBT3VGLEVBQUV2RixFQUFFclMsVUFBVSxTQUFTcVMsR0FBRyxPQUFPK0YsRUFBRS9GLEVBQUVyUyxRQUFRNFgsS0FBS2UsRUFBRXFNLGVBQWUsU0FBU3BOLEdBQUcsSUFBSXZGLEVBQXNCQSxFQUFwQnVGLEdBQUdBLEVBQUVTLEVBQUVyTCxVQUFVNEssR0FBSzlZLEtBQUs0bEIsU0FBUzlNLElBQU05WSxLQUFLc1QsTUFBTXRULEtBQUt5b0IsY0FBY3pvQixLQUFLNG9CLHFCQUFxQnJWLElBQUlzRyxFQUFFNE8sWUFBWSxXQUFXLElBQUkzUCxFQUFFOVksS0FBS29aLFFBQVErTSxZQUFZLElBQUksSUFBSTVTLEtBQUt1RixFQUFFLENBQUMsSUFBSXZVLEVBQUV1VSxFQUFFdkYsR0FBR3ZULEtBQUtvbUIsU0FBUzdTLEdBQUdzSSxFQUFFdFgsS0FBS3NWLEVBQUUrTyxxQkFBcUIsU0FBUzlQLEdBQUcsSUFBSSxJQUFJdkYsRUFBRXVGLEdBQUdBLEVBQUV0VSxPQUFPRCxFQUFFLEVBQUVnUCxHQUFHaFAsRUFBRWdQLEVBQUVoUCxJQUFJLENBQU91VSxFQUFFdlUsR0FBSzJoQixtQkFBbUIsSUFBSXJLLEVBQWEsU0FBVy9DLEdBQUcsR0FBRyxpQkFBaUJBLEVBQUUsT0FBT0EsRUFBRSxJQUFtTEEsRUFBRXZGLEVBQWpMaFAsRUFBRW1WLEVBQUVaLEdBQUduWCxNQUFNLEtBQUsyWCxFQUFFL1UsRUFBRSxHQUFHZ1YsRUFBRUQsRUFBRXJXLE1BQU0sY0FBYytWLEVBQUVPLEdBQUdBLEVBQUUsR0FBR08sR0FBc0h2RyxFQUFoSCtGLEdBQThHUixFQUFoSEUsR0FBOEgsU0FBU3pGLEdBQUcsT0FBT0EsRUFBRW5TLGFBQWEwWCxJQUFJLFNBQVNBLEdBQUcsSUFBSXZVLEVBQUV1VSxFQUFFelgsY0FBY2tTLEdBQUcsT0FBT2hQLEdBQUdBLEVBQUVrbEIsY0FBaE54USxFQUFFVSxFQUFFK1AsZ0JBQWdCbmxCLEVBQUUsSUFBSSxPQUFTMFUsRUFBRSxTQUFTSCxHQUFHLE9BQU9BLEdBQUdHLEVBQUVhLEVBQUVoQixLQUFLLFNBQVNBLEdBQUcsT0FBT0EsR0FBR2dCLEVBQUVoQixLQUE2SWEsRUFBRStQLGdCQUFnQixDQUFDQyxTQUFTLFNBQVM3USxHQUFHLE9BQU82USxTQUFTN1EsRUFBRSxLQUFLcFgsV0FBVyxTQUFTb1gsR0FBRyxPQUFPcFgsV0FBV29YLEtBQUtlLEVBQUV3UCxNQUFNLFdBQVcsR0FBR3JwQixLQUFLb1osUUFBUXdRLE9BQU8sQ0FBQyxJQUFJOVEsRUFBRVMsRUFBRXJMLFVBQVVsTyxLQUFLb1osUUFBUXdRLFFBQVE1cEIsS0FBSzZwQixpQkFBaUIvUSxLQUFLOVksS0FBSzBvQixZQUFZNVAsRUFBRS9RLE9BQU8vSCxLQUFLMG9CLGNBQWMsSUFBSW5WLEdBRHkxM0J1RixFQUNyMTNCOVksS0FBSzBvQixZQURrMTNCblYsRUFDdDAzQnZULEtBQUtvWixRQUFRb1AsY0FEbTAzQixTQUFTamtCLEVBQUUrVSxHQUFHLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFVCxFQUFFdFUsT0FBTytVLElBQUksQ0FBQyxJQUFJUCxFQUFFRixFQUFFUyxHQUFHTyxFQUFFdlYsRUFBRTBoQixTQUFTak4sR0FBR0MsRUFBRUssRUFBRTJNLFNBQVNqTixHQUFHLEdBQUtDLEVBQUZhLEdBQUtBLEVBQUViLEVBQXVDLE9BQVNBLEVBQUZhLEVBQUksR0FBRyxVQUE1QyxJQUFTdkcsRUFBRXlGLEdBQUd6RixFQUFFeUYsR0FBR3pGLEdBQU0sR0FBRyxHQUFzQixPQUFPLElBQ3I5M0J2VCxLQUFLdW1CLGNBQWN1RCxLQUFLdlcsR0FEcXczQixJQUFXdUYsRUFBRXZGLEdBQzd3M0JzRyxFQUFFZ1EsaUJBQWlCLFNBQVMvUSxHQUFHLElBQUksSUFBSXZGLEVBQUUsRUFBRUEsRUFBRXVGLEVBQUV0VSxPQUFPK08sSUFBSSxHQUFHdUYsRUFBRXZGLElBQUl2VCxLQUFLMG9CLFlBQVluVixHQUFHLE9BQU0sRUFBRyxPQUFNLEdBQUlzRyxFQUFFa1EsTUFBTSxXQUFXLElBQUlqUixFQUFFOVksS0FBS29aLFFBQVFrUCxXQUFXL1UsRUFBRXZULEtBQUs2bUIsTUFBTS9OLEdBQUcsSUFBSXZGLEVBQUUsTUFBTSxJQUFJbFEsTUFBTSxtQkFBbUJ5VixHQUFHLE9BQU92RixFQUFFNkYsUUFBUXBaLEtBQUtvWixRQUFRTixHQUFHdkYsR0FBR3NHLEVBQUV5SixhQUFhLFdBQVcvUCxFQUFFN1EsVUFBVTRnQixhQUFhMWdCLEtBQUs1QyxNQUFNQSxLQUFLK3BCLFFBQVF6RyxnQkFBZ0J6SixFQUFFbUssdUJBQXVCLFNBQVNsTCxHQUFHLE9BQU85WSxLQUFLK3BCLFFBQVEvRix1QkFBdUJsTCxJQUFJZSxFQUFFb0wsYUFBYSxTQUFTbk0sR0FBRzlZLEtBQUsrcEIsUUFBUTlFLGFBQWFuTSxJQUFJZSxFQUFFMEssa0JBQWtCLFdBQVcsT0FBT3ZrQixLQUFLK3BCLFFBQVF4RixxQkFBcUIxSyxFQUFFMEwsa0JBQWtCLFdBQVcsT0FBT3ZsQixLQUFLK3BCLFFBQVF4RSxxQkFBcUIxTCxFQUFFNEwsU0FBUyxTQUFTM00sR0FBRyxJQUFJdkYsRUFBRXZULEtBQUt3bEIsU0FBUzFNLEdBQUcsR0FBR3ZGLEVBQUUvTyxPQUFPLENBQUMsSUFBSUQsRUFBRXZFLEtBQUtncUIsbUJBQW1CelcsR0FBR3ZULEtBQUt1bUIsY0FBY3ZtQixLQUFLdW1CLGNBQWN4ZSxPQUFPeEQsS0FBS3NWLEVBQUU2TCxVQUFVLFNBQVM1TSxHQUFHLElBQUl2RixFQUFFdlQsS0FBS2lqQixTQUFTbkssR0FBRyxHQUFHdkYsRUFBRS9PLE9BQU8sQ0FBQ3hFLEtBQUtzakIsZUFBZXRqQixLQUFLdWpCLGdCQUFnQixJQUFJaGYsRUFBRXZFLEtBQUtncUIsbUJBQW1CelcsR0FBR3ZULEtBQUt5akIsWUFBWXpqQixLQUFLdW1CLGVBQWV2bUIsS0FBS3VtQixjQUFjaGlCLEVBQUV3RCxPQUFPL0gsS0FBS3VtQixlQUFldm1CLEtBQUtzVCxNQUFNQyxFQUFFeEwsT0FBTy9ILEtBQUtzVCxTQUFTdUcsRUFBRW1RLG1CQUFtQixTQUFTbFIsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUtncEIsUUFBUWxRLEdBQUcsT0FBTzlZLEtBQUs2TyxLQUFLMEUsRUFBRWdXLFVBQVV2cEIsS0FBS3FoQixPQUFPOU4sRUFBRWdLLFNBQVN2ZCxLQUFLeWpCLFlBQVlsUSxFQUFFZ0ssU0FBUSxHQUFJaEssRUFBRWdLLFNBQVMxRCxFQUFFb1EsT0FBTyxTQUFTblIsR0FBRyxJQUFJdkYsRUFBRXZULEtBQUt3bEIsU0FBUzFNLEdBQUcsR0FBR3ZGLEVBQUUvTyxPQUFPLENBQUMsSUFBSUQsRUFBRStVLEVBQUVDLEVBQUVoRyxFQUFFL08sT0FBTyxJQUFJRCxFQUFFLEVBQUVBLEVBQUVnVixFQUFFaFYsSUFBSStVLEVBQUUvRixFQUFFaFAsR0FBR3ZFLEtBQUtrQixRQUFRaWEsWUFBWTdCLEVBQUVwWSxTQUFTLElBQUk4WCxFQUFFaFosS0FBS2dwQixRQUFRelYsR0FBR2dLLFFBQVEsSUFBSWhaLEVBQUUsRUFBRUEsRUFBRWdWLEVBQUVoVixJQUFJZ1AsRUFBRWhQLEdBQUc0ZixpQkFBZ0IsRUFBRyxJQUFJbmtCLEtBQUs2b0IsVUFBVXRrQixFQUFFLEVBQUVBLEVBQUVnVixFQUFFaFYsV0FBV2dQLEVBQUVoUCxHQUFHNGYsZ0JBQWdCbmtCLEtBQUtxaEIsT0FBT3JJLEtBQUssSUFBSThDLEVBQUVqQyxFQUFFakUsT0FBTyxPQUFPaUUsRUFBRWpFLE9BQU8sU0FBU2tELEdBQUdBLEVBQUVTLEVBQUVyTCxVQUFVNEssR0FBRyxJQUFJdkYsRUFBRXZULEtBQUs0bEIsU0FBUzlNLEdBQUdnRCxFQUFFbFosS0FBSzVDLEtBQUs4WSxHQUFHLElBQUksSUFBSXZVLEVBQUVnUCxHQUFHQSxFQUFFL08sT0FBTzhVLEVBQUUsRUFBRS9VLEdBQUcrVSxFQUFFL1UsRUFBRStVLElBQUksQ0FBQyxJQUFJTixFQUFFekYsRUFBRStGLEdBQUdDLEVBQUVvRSxXQUFXM2QsS0FBS3VtQixjQUFjdk4sS0FBS2EsRUFBRXFRLFFBQVEsV0FBVyxJQUFJLElBQUlwUixFQUFFLEVBQUVBLEVBQUU5WSxLQUFLc1QsTUFBTTlPLE9BQU9zVSxJQUFJLENBQU85WSxLQUFLc1QsTUFBTXdGLEdBQUttTixTQUFTbmxCLE9BQU9ELEtBQUtDLFNBQVNkLEtBQUtvWixRQUFRd1EsT0FBTyxTQUFTNXBCLEtBQUtxcEIsUUFBUXJwQixLQUFLOG9CLFdBQVdqUCxFQUFFc1AsY0FBYyxTQUFTclEsRUFBRXZGLEdBQUcsSUFBSWhQLEVBQUV2RSxLQUFLb1osUUFBUTVYLG1CQUFtQnhCLEtBQUtvWixRQUFRNVgsbUJBQW1CLEVBQUUsSUFBSThYLEVBQUVSLEVBQUU1VSxNQUFNbEUsS0FBS3VULEdBQUcsT0FBT3ZULEtBQUtvWixRQUFRNVgsbUJBQW1CK0MsRUFBRStVLEdBQUdPLEVBQUVzUSx3QkFBd0IsV0FBVyxPQUFPbnFCLEtBQUt1bUIsY0FBY2xELElBQUksU0FBU3ZLLEdBQUcsT0FBT0EsRUFBRTVYLFdBQVd5WSxJQUN4cEcxWixFQUFFYyxVQUFVcXBCLE1BQU0sV0FDakIsSUFBSTlELEVBQVVybUIsRUFBRSxvQkFBb0JxbUIsUUFBUSxDQUN6Q25ELGFBQWMsdUJBQ2RwRCxpQkFBaUIsRUFDakJzSyxRQUFTLENBQ1IvQyxZQUFhLGVBSWJnRCxFQUFXcnFCLEVBQUUsWUFBWXFtQixRQUFRLENBQ2xDbkQsYUFBYyxnQkFDZHBELGlCQUFpQixFQUNqQnNLLFFBQVMsQ0FDUi9DLFlBQWEsZUFJakJybkIsRUFBRSxnQkFBZ0JtSCxHQUFHLFFBQVMsU0FBU21NLEdBQ3BDdFQsRUFBRSxpQkFBaUJ3RyxZQUFZLFVBQy9CeEcsRUFBRUQsTUFBTTJOLFNBQVNwQixTQUFTLFVBQzFCZ0gsRUFBRWxNLGlCQUNGLElBQUlXLEVBQVMvSCxFQUFFRCxNQUFNc1AsS0FBSyxlQUMxQnRILEVBQW1CLEtBQVZBLEVBQWdCQSxFQUFTLElBQU1BLEVBQ3hDc2UsRUFBUUEsUUFBUSxDQUFFdGUsT0FBU0EsTUFHOUIvSCxFQUFFLGNBQWNzcUIsV0FHSnRxQixFQUFFLHVCQUF1Qm1MLE1BQU0sRUFBRyxJQUFJM0UsWUFBWSxZQUM3RDZmLEVBQVFBLFVBRVJybUIsRUFBRSxhQUFhbUgsR0FBRyxRQUFRLFNBQVNtTSxHQUNsQ0EsRUFBRWxNLGlCQUNGcEgsRUFBRSx1QkFBdUJtTCxNQUFNLEVBQUcsR0FBRzNFLFlBQVksWUFDakQ2ZixFQUFRQSxZQUlUcm1CLEVBQUUsa0JBQWtCbUgsR0FBRyxRQUFRLFNBQVNtTSxHQUN2Q0EsRUFBRWxNLGlCQUNGcEgsRUFBRSw0QkFBNEJtTCxNQUFNLEVBQUcsR0FBRzNFLFlBQVksWUFDdEQ2akIsRUFBU2hFLFlBSVZybUIsRUFBRSxjQUFjc1YsTUFBTSxXQUVwQnRWLEVBQUUsaUJBQWlCNEcsWUFBWSxVQUMvQjVHLEVBQUUsc0JBQXNCMEcsWUFLMUIsSUFBSTBjLElBQUttSCxPQUFRQyxXQUNoQkMsT0FBUyxDQUNQQyxJQUFLLFVBQ0xDLElBQUssV0FFUCxTQUFTQyxVQUNSeEgsSUFBTSxJQUFJeUgsT0FBT0MsS0FBS0MsSUFBSWpxQixTQUFTQyxlQUFlLE9BQVEsQ0FDMUQwcEIsT0FBUUEsT0FDUk8sS0FBTSxHQUNOQyxPQUFPLENBQ1QsQ0FDRUMsWUFBZSxXQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VGLFlBQWUsY0FDZkMsUUFBVyxDQUNULENBQ0VFLFdBQWMsU0FJcEIsQ0FDRUgsWUFBZSxtQkFDZkMsUUFBVyxDQUNULENBQ0VDLE1BQVMsYUFJZixDQUNFRixZQUFlLHFCQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsNkJBQ2ZKLFlBQWUsbUJBQ2ZDLFFBQVcsQ0FDVCxDQUNFQyxNQUFTLGFBSWYsQ0FDRUUsWUFBZSxNQUNmSixZQUFlLFdBQ2ZDLFFBQVcsQ0FDVCxDQUNFQyxNQUFTLGFBSWYsQ0FDRUUsWUFBZSxNQUNmSixZQUFlLG1CQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsV0FDZkosWUFBZSxXQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsV0FDZkosWUFBZSxtQkFDZkMsUUFBVyxDQUNULENBQ0VDLE1BQVMsYUFJZixDQUNFRSxZQUFlLE9BQ2ZKLFlBQWUsV0FDZkMsUUFBVyxDQUNULENBQ0VDLE1BQVMsYUFJZixDQUNFRSxZQUFlLGdCQUNmSixZQUFlLG1CQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsZUFDZkosWUFBZSxXQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsZUFDZkosWUFBZSxtQkFDZkMsUUFBVyxDQUNULENBQ0VDLE1BQVMsYUFJZixDQUNFRSxZQUFlLGFBQ2ZKLFlBQWUsbUJBQ2ZDLFFBQVcsQ0FDVCxDQUNFQyxNQUFTLGFBSWYsQ0FDRUUsWUFBZSxlQUNmSixZQUFlLFdBQ2ZDLFFBQVcsQ0FDVCxDQUNFQyxNQUFTLGFBSWYsQ0FDRUUsWUFBZSxrQkFDZkosWUFBZSxXQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsUUFDZkosWUFBZSxXQUNmQyxRQUFXLENBQ1QsQ0FDRUMsTUFBUyxhQUlmLENBQ0VFLFlBQWUsUUFDZkosWUFBZSxtQkFDZkMsUUFBVyxDQUNULENBQ0VDLE1BQVMsZ0JBT2RiLE9BQVMsSUFBSU0sT0FBT0MsS0FBS1MsT0FBTyxDQUMvQjFNLFNBQVU0TCxPQUNWckgsSUFBTUEsSUFDTnRQLE1BQU8sb0JBQ1AwWCxLQUFNLGdCQUdQaEIsV0FBYSxJQUFJSyxPQUFPQyxLQUFLVyxXQUFXLENBQ3ZDblUsUUFBUyxrSEFHVmlULE9BQU9tQixZQUFZLFFBQVMsV0FDM0JsQixXQUFXbUIsS0FBS3ZJLElBQUttSCIsImZpbGUiOiJib290c3RyYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbC5VdGlsID0gZmFjdG9yeShnbG9iYWwualF1ZXJ5KSk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgkKSB7ICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcclxuXHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IHV0aWwuanNcclxuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICovXHJcblxyXG4gIHZhciBVdGlsID0gZnVuY3Rpb24gKCQkJDEpIHtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuICAgIHZhciBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJztcclxuICAgIHZhciBNQVhfVUlEID0gMTAwMDAwMDtcclxuICAgIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcclxuXHJcbiAgICBmdW5jdGlvbiB0b1R5cGUob2JqKSB7XHJcbiAgICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsXHJcbiAgICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcclxuICAgICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xyXG4gICAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgJCQkMSh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIWNhbGxlZCkge1xyXG4gICAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCBkdXJhdGlvbik7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xyXG4gICAgICAkJCQxLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xyXG4gICAgICAkJCQxLmV2ZW50LnNwZWNpYWxbVXRpbC5UUkFOU0lUSU9OX0VORF0gPSBnZXRTcGVjaWFsVHJhbnNpdGlvbkVuZEV2ZW50KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBQdWJsaWMgVXRpbCBBcGlcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgdmFyIFV0aWwgPSB7XHJcbiAgICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJyxcclxuICAgICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcclxuICAgICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcclxuICAgICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcclxuICAgICAgfSxcclxuICAgICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XHJcblxyXG4gICAgICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xyXG4gICAgICAgICAgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcclxuXHJcblxyXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAkJCQxKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xyXG4gICAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTsgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxyXG5cclxuICAgICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uKSB7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9IC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcclxuXHJcblxyXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xyXG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcclxuICAgICAgfSxcclxuICAgICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgfSxcclxuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcclxuICAgICAgICAkJCQxKGVsZW1lbnQpLnRyaWdnZXIoVFJBTlNJVElPTl9FTkQpO1xyXG4gICAgICB9LFxyXG4gICAgICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcclxuICAgICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiBzdXBwb3J0c1RyYW5zaXRpb25FbmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oVFJBTlNJVElPTl9FTkQpO1xyXG4gICAgICB9LFxyXG4gICAgICBpc0VsZW1lbnQ6IGZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcclxuICAgICAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlO1xyXG4gICAgICB9LFxyXG4gICAgICB0eXBlQ2hlY2tDb25maWc6IGZ1bmN0aW9uIHR5cGVDaGVja0NvbmZpZyhjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcclxuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xyXG4gICAgICAgICAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKSArIFwiOiBcIiArIChcIk9wdGlvbiBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJcIiArIHZhbHVlVHlwZSArIFwiXFxcIiBcIikgKyAoXCJidXQgZXhwZWN0ZWQgdHlwZSBcXFwiXCIgKyBleHBlY3RlZFR5cGVzICsgXCJcXFwiLlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xyXG4gICAgcmV0dXJuIFV0aWw7XHJcbiAgfSgkKTtcclxuXHJcbiAgcmV0dXJuIFV0aWw7XHJcblxyXG59KSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcFxyXG4vLy8gPSAuL2FsZXJ0LmpzXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKSA6XHJcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpIDpcclxuICAoZ2xvYmFsLkJ1dHRvbiA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSkpO1xyXG59KHRoaXMsIChmdW5jdGlvbiAoJCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XHJcblxyXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcclxuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xyXG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcclxuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xyXG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xyXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGJ1dHRvbi5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uICgkJCQxKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogQ29uc3RhbnRzXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqL1xyXG4gICAgdmFyIE5BTUUgPSAnYnV0dG9uJztcclxuICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJztcclxuICAgIHZhciBEQVRBX0tFWSA9ICdicy5idXR0b24nO1xyXG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XHJcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XHJcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcclxuICAgIHZhciBDbGFzc05hbWUgPSB7XHJcbiAgICAgIEFDVElWRTogJ2FjdGl2ZScsXHJcbiAgICAgIEJVVFRPTjogJ2J0bicsXHJcbiAgICAgIEZPQ1VTOiAnZm9jdXMnXHJcbiAgICB9O1xyXG4gICAgdmFyIFNlbGVjdG9yID0ge1xyXG4gICAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcclxuICAgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyxcclxuICAgICAgSU5QVVQ6ICdpbnB1dCcsXHJcbiAgICAgIEFDVElWRTogJy5hY3RpdmUnLFxyXG4gICAgICBCVVRUT046ICcuYnRuJ1xyXG4gICAgfTtcclxuICAgIHZhciBFdmVudCA9IHtcclxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcclxuICAgICAgRk9DVVNfQkxVUl9EQVRBX0FQSTogXCJmb2N1c1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZICsgXCIgXCIgKyAoXCJibHVyXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkpXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICovXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgQnV0dG9uID1cclxuICAgIC8qI19fUFVSRV9fKi9cclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgfSAvLyBHZXR0ZXJzXHJcblxyXG5cclxuICAgICAgdmFyIF9wcm90byA9IEJ1dHRvbi5wcm90b3R5cGU7XHJcblxyXG4gICAgICAvLyBQdWJsaWNcclxuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcclxuICAgICAgICB2YXIgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcclxuICAgICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xyXG4gICAgICAgIHZhciByb290RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EQVRBX1RPR0dMRSlbMF07XHJcblxyXG4gICAgICAgIGlmIChyb290RWxlbWVudCkge1xyXG4gICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKTtcclxuXHJcbiAgICAgICAgICBpZiAoaW5wdXQpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcclxuICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgaWYgKGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKTtcclxuICAgICAgICAgICAgICAkJCQxKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhZGRBcmlhUHJlc3NlZCkge1xyXG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XHJcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcclxuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgICB9OyAvLyBTdGF0aWNcclxuXHJcblxyXG4gICAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XHJcblxyXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xyXG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XHJcbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3tcclxuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XHJcbiAgICAgICAgfVxyXG4gICAgICB9XSk7XHJcblxyXG4gICAgICByZXR1cm4gQnV0dG9uO1xyXG4gICAgfSgpO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgICAgIGlmICghJCQkMShidXR0b24pLmhhc0NsYXNzKENsYXNzTmFtZS5CVVRUT04pKSB7XHJcbiAgICAgICAgYnV0dG9uID0gJCQkMShidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKGJ1dHRvbiksICd0b2dnbGUnKTtcclxuICAgIH0pLm9uKEV2ZW50LkZPQ1VTX0JMVVJfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIHZhciBidXR0b24gPSAkJCQxKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdO1xyXG4gICAgICAkJCQxKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKTtcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIGpRdWVyeVxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuXHJcbiAgICAkJCQxLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xyXG5cclxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcclxuICAgICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gQnV0dG9uO1xyXG4gIH0oJCk7XHJcblxyXG4gIHJldHVybiBCdXR0b247XHJcblxyXG59KSkpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24uanMubWFwXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxyXG4gIChnbG9iYWwuQ2Fyb3VzZWwgPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnksZ2xvYmFsLlV0aWwpKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKCQsVXRpbCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XHJcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xyXG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XHJcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XHJcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XHJcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoa2V5IGluIG9iaikge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XHJcbiAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcclxuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBjYXJvdXNlbC5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCQkJDEpIHtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBDb25zdGFudHNcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICovXHJcbiAgICB2YXIgTkFNRSA9ICdjYXJvdXNlbCc7XHJcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7XHJcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuY2Fyb3VzZWwnO1xyXG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XHJcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XHJcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcclxuICAgIHZhciBBUlJPV19MRUZUX0tFWUNPREUgPSAzNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgbGVmdCBhcnJvdyBrZXlcclxuXHJcbiAgICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcclxuXHJcbiAgICB2YXIgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXHJcblxyXG4gICAgdmFyIERlZmF1bHQgPSB7XHJcbiAgICAgIGludGVydmFsOiA1MDAwLFxyXG4gICAgICBrZXlib2FyZDogdHJ1ZSxcclxuICAgICAgc2xpZGU6IGZhbHNlLFxyXG4gICAgICBwYXVzZTogJ2hvdmVyJyxcclxuICAgICAgd3JhcDogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcclxuICAgICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcclxuICAgICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcclxuICAgICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcclxuICAgICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcclxuICAgICAgd3JhcDogJ2Jvb2xlYW4nXHJcbiAgICB9O1xyXG4gICAgdmFyIERpcmVjdGlvbiA9IHtcclxuICAgICAgTkVYVDogJ25leHQnLFxyXG4gICAgICBQUkVWOiAncHJldicsXHJcbiAgICAgIExFRlQ6ICdsZWZ0JyxcclxuICAgICAgUklHSFQ6ICdyaWdodCdcclxuICAgIH07XHJcbiAgICB2YXIgRXZlbnQgPSB7XHJcbiAgICAgIFNMSURFOiBcInNsaWRlXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBLRVlET1dOOiBcImtleWRvd25cIiArIEVWRU5UX0tFWSxcclxuICAgICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcclxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxyXG4gICAgfTtcclxuICAgIHZhciBDbGFzc05hbWUgPSB7XHJcbiAgICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxyXG4gICAgICBBQ1RJVkU6ICdhY3RpdmUnLFxyXG4gICAgICBTTElERTogJ3NsaWRlJyxcclxuICAgICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcclxuICAgICAgTEVGVDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXHJcbiAgICAgIE5FWFQ6ICdjYXJvdXNlbC1pdGVtLW5leHQnLFxyXG4gICAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcclxuICAgICAgSVRFTTogJ2Nhcm91c2VsLWl0ZW0nXHJcbiAgICB9O1xyXG4gICAgdmFyIFNlbGVjdG9yID0ge1xyXG4gICAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcclxuICAgICAgQUNUSVZFX0lURU06ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLFxyXG4gICAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxyXG4gICAgICBORVhUX1BSRVY6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcclxuICAgICAgSU5ESUNBVE9SUzogJy5jYXJvdXNlbC1pbmRpY2F0b3JzJyxcclxuICAgICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcclxuICAgICAgREFUQV9SSURFOiAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ1xyXG4gICAgICAvKipcclxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cclxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAqL1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdmFyIENhcm91c2VsID1cclxuICAgIC8qI19fUFVSRV9fKi9cclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gJCQkMShlbGVtZW50KVswXTtcclxuICAgICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTkRJQ0FUT1JTKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgfSAvLyBHZXR0ZXJzXHJcblxyXG5cclxuICAgICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcclxuXHJcbiAgICAgIC8vIFB1YmxpY1xyXG4gICAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcclxuICAgICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8ubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkge1xyXG4gICAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcclxuICAgICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXHJcbiAgICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5pcygnOnZpc2libGUnKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmNzcygndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgdGhpcy5uZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnByZXYgPSBmdW5jdGlvbiBwcmV2KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XHJcbiAgICAgICAgICB0aGlzLl9zbGlkZShEaXJlY3Rpb24uUFJFVik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5FWFRfUFJFVikpIHtcclxuICAgICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XHJcbiAgICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XHJcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XHJcbiAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcclxuICAgICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XHJcbiAgICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pO1xyXG5cclxuICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XHJcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5TTElELCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcclxuICAgICAgICAgIHRoaXMucGF1c2UoKTtcclxuICAgICAgICAgIHRoaXMuY3ljbGUoKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbmRleCA+IGFjdGl2ZUluZGV4ID8gRGlyZWN0aW9uLk5FWFQgOiBEaXJlY3Rpb24uUFJFVjtcclxuXHJcbiAgICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uLCB0aGlzLl9pdGVtc1tpbmRleF0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xyXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XHJcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcclxuICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsO1xyXG4gICAgICB9OyAvLyBQcml2YXRlXHJcblxyXG5cclxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xyXG4gICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XHJcbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcclxuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX2tleWRvd24oZXZlbnQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XHJcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnBhdXNlKGV2ZW50KTtcclxuICAgICAgICAgIH0pLm9uKEV2ZW50Lk1PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xyXG4gICAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcclxuICAgICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcclxuICAgICAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcclxuICAgICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcclxuICAgICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxyXG4gICAgICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcclxuICAgICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSEVORCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIF90aGlzMi5wYXVzZSgpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoX3RoaXMyLnRvdWNoVGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50b3VjaFRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgX3RoaXMyLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcclxuICAgICAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMyLl9jb25maWcuaW50ZXJ2YWwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xyXG4gICAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChldmVudC53aGljaCkge1xyXG4gICAgICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJldigpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlIEFSUk9XX1JJR0hUX0tFWUNPREU6XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5faXRlbXMgPSBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZSA/IFtdLnNsaWNlLmNhbGwoZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuSVRFTSkpIDogW107XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIGlzTmV4dERpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQ7XHJcbiAgICAgICAgdmFyIGlzUHJldkRpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVY7XHJcblxyXG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xyXG4gICAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcclxuXHJcbiAgICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XHJcbiAgICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVYgPyAtMSA6IDE7XHJcbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMSA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdIDogdGhpcy5faXRlbXNbaXRlbUluZGV4XTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xyXG5cclxuICAgICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSkpO1xyXG5cclxuICAgICAgICB2YXIgc2xpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0xJREUsIHtcclxuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXHJcbiAgICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcclxuICAgICAgICAgIGZyb206IGZyb21JbmRleCxcclxuICAgICAgICAgIHRvOiB0YXJnZXRJbmRleFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcclxuICAgICAgICByZXR1cm4gc2xpZGVFdmVudDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcclxuICAgICAgICAgIHZhciBpbmRpY2F0b3JzID0gW10uc2xpY2UuY2FsbCh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkFDVElWRSkpO1xyXG4gICAgICAgICAgJCQkMShpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcclxuXHJcbiAgICAgICAgICB2YXIgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW3RoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KV07XHJcblxyXG4gICAgICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcclxuICAgICAgICAgICAgJCQkMShuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSk7XHJcblxyXG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xyXG5cclxuICAgICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbmFsQ2xhc3NOYW1lO1xyXG4gICAgICAgIHZhciBvcmRlckNsYXNzTmFtZTtcclxuICAgICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lO1xyXG5cclxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xyXG4gICAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVDtcclxuICAgICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XHJcbiAgICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uTEVGVDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XHJcbiAgICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWO1xyXG4gICAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLlJJR0hUO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQkJDEobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XHJcbiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XHJcbiAgICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChpc0N5Y2xpbmcpIHtcclxuICAgICAgICAgIHRoaXMucGF1c2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xyXG5cclxuICAgICAgICB2YXIgc2xpZEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElELCB7XHJcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcclxuICAgICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxyXG4gICAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LFxyXG4gICAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKCQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xyXG4gICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpO1xyXG4gICAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xyXG4gICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XHJcbiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XHJcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcclxuICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcclxuICAgICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSArIFwiIFwiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xyXG4gICAgICAgICAgICBfdGhpczMuX2lzU2xpZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJCQkMShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xyXG4gICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XHJcbiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzQ3ljbGluZykge1xyXG4gICAgICAgICAgdGhpcy5jeWNsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTsgLy8gU3RhdGljXHJcblxyXG5cclxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XHJcblxyXG4gICAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCAkJCQxKHRoaXMpLmRhdGEoKSk7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnLCBjb25maWcpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XHJcblxyXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgX2NvbmZpZyk7XHJcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGRhdGEudG8oY29uZmlnKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBhY3Rpb24gKyBcIlxcXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRhdGFbYWN0aW9uXSgpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XHJcbiAgICAgICAgICAgIGRhdGEucGF1c2UoKTtcclxuICAgICAgICAgICAgZGF0YS5jeWNsZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRhcmdldCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xyXG5cclxuICAgICAgICBpZiAoIXRhcmdldCB8fCAhJCQkMSh0YXJnZXQpLmhhc0NsYXNzKENsYXNzTmFtZS5DQVJPVVNFTCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCAkJCQxKHRhcmdldCkuZGF0YSgpLCAkJCQxKHRoaXMpLmRhdGEoKSk7XHJcblxyXG4gICAgICAgIHZhciBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGUtdG8nKTtcclxuXHJcbiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcclxuICAgICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQkJDEodGFyZ2V0KSwgY29uZmlnKTtcclxuXHJcbiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcclxuICAgICAgICAgICQkJDEodGFyZ2V0KS5kYXRhKERBVEFfS0VZKS50byhzbGlkZUluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XHJcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH1dKTtcclxuXHJcbiAgICAgIHJldHVybiBDYXJvdXNlbDtcclxuICAgIH0oKTtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcclxuICAgICQkJDEod2luZG93KS5vbihFdmVudC5MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBjYXJvdXNlbHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9SSURFKSk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgdmFyICRjYXJvdXNlbCA9ICQkJDEoY2Fyb3VzZWxzW2ldKTtcclxuXHJcbiAgICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIGpRdWVyeVxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuXHJcbiAgICAkJCQxLmZuW05BTUVdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcclxuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcclxuXHJcbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XHJcbiAgICAgIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gQ2Fyb3VzZWw7XHJcbiAgfSgkKTtcclxuXHJcbiAgcmV0dXJuIENhcm91c2VsO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2Fyb3VzZWwuanMubWFwXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxyXG4gIChnbG9iYWwuQ29sbGFwc2UgPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnksZ2xvYmFsLlV0aWwpKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKCQsVXRpbCkgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XHJcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xyXG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XHJcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcclxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XHJcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XHJcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoa2V5IGluIG9iaikge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XHJcbiAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcclxuICAgICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBjb2xsYXBzZS5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQkJDEpIHtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBDb25zdGFudHNcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICovXHJcbiAgICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7XHJcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7XHJcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnO1xyXG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XHJcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XHJcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcclxuICAgIHZhciBEZWZhdWx0ID0ge1xyXG4gICAgICB0b2dnbGU6IHRydWUsXHJcbiAgICAgIHBhcmVudDogJydcclxuICAgIH07XHJcbiAgICB2YXIgRGVmYXVsdFR5cGUgPSB7XHJcbiAgICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxyXG4gICAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xyXG4gICAgfTtcclxuICAgIHZhciBFdmVudCA9IHtcclxuICAgICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcclxuICAgIH07XHJcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xyXG4gICAgICBTSE9XOiAnc2hvdycsXHJcbiAgICAgIENPTExBUFNFOiAnY29sbGFwc2UnLFxyXG4gICAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXHJcbiAgICAgIENPTExBUFNFRDogJ2NvbGxhcHNlZCdcclxuICAgIH07XHJcbiAgICB2YXIgRGltZW5zaW9uID0ge1xyXG4gICAgICBXSURUSDogJ3dpZHRoJyxcclxuICAgICAgSEVJR0hUOiAnaGVpZ2h0J1xyXG4gICAgfTtcclxuICAgIHZhciBTZWxlY3RvciA9IHtcclxuICAgICAgQUNUSVZFUzogJy5zaG93LCAuY29sbGFwc2luZycsXHJcbiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICovXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgQ29sbGFwc2UgPVxyXG4gICAgLyojX19QVVJFX18qL1xyXG4gICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jdGlvbiBDb2xsYXBzZShlbGVtZW50LCBjb25maWcpIHtcclxuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcclxuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSAkJCQxLm1ha2VBcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2hyZWY9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdLFwiICsgKFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtdGFyZ2V0PVxcXCIjXCIgKyBlbGVtZW50LmlkICsgXCJcXFwiXVwiKSkpO1xyXG4gICAgICAgIHZhciB0b2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgZWxlbSA9IHRvZ2dsZUxpc3RbaV07XHJcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbSk7XHJcbiAgICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAoZm91bmRFbGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb3VuZEVsZW0gPT09IGVsZW1lbnQ7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkge1xyXG4gICAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xyXG4gICAgICAgICAgdGhpcy50b2dnbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gLy8gR2V0dGVyc1xyXG5cclxuXHJcbiAgICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XHJcblxyXG4gICAgICAvLyBQdWJsaWNcclxuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcclxuICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcclxuICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGFjdGl2ZXM7XHJcbiAgICAgICAgdmFyIGFjdGl2ZXNEYXRhO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcGFyZW50KSB7XHJcbiAgICAgICAgICBhY3RpdmVzID0gW10uc2xpY2UuY2FsbCh0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5BQ1RJVkVTKSkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQnKSA9PT0gX3RoaXMuX2NvbmZpZy5wYXJlbnQ7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgYWN0aXZlcyA9IG51bGw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWN0aXZlcykge1xyXG4gICAgICAgICAgYWN0aXZlc0RhdGEgPSAkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSk7XHJcblxyXG4gICAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1cpO1xyXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhY3RpdmVzKSB7XHJcbiAgICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMShhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpO1xyXG5cclxuICAgICAgICAgIGlmICghYWN0aXZlc0RhdGEpIHtcclxuICAgICAgICAgICAgJCQkMShhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcclxuXHJcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgJCQkMSh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTtcclxuXHJcbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XHJcbiAgICAgICAgICAkJCQxKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XHJcbiAgICAgICAgICBfdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XHJcblxyXG4gICAgICAgICAgX3RoaXMuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XHJcblxyXG4gICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XHJcbiAgICAgICAgdmFyIHNjcm9sbFNpemUgPSBcInNjcm9sbFwiICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XHJcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XHJcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdGFydEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFKTtcclxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XHJcblxyXG4gICAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXSArIFwicHhcIjtcclxuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcclxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuICAgICAgICB2YXIgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIHZhciAkZWxlbSA9ICQkJDEoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoISRlbGVtLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xyXG4gICAgICAgICAgICAgICAgJCQkMSh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xyXG5cclxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcclxuICAgICAgICAgIF90aGlzMi5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAkJCQxKF90aGlzMi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkudHJpZ2dlcihFdmVudC5ISURERU4pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xyXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xyXG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZztcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcclxuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XHJcbiAgICAgIH07IC8vIFByaXZhdGVcclxuXHJcblxyXG4gICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XHJcbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcclxuICAgICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcclxuXHJcbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcclxuICAgICAgICB2YXIgaGFzV2lkdGggPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKERpbWVuc2lvbi5XSURUSCk7XHJcbiAgICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcclxuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgICAgdmFyIHBhcmVudCA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KSkge1xyXG4gICAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcclxuXHJcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NvbmZpZy5wYXJlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS1wYXJlbnQ9XFxcIlwiICsgdGhpcy5fY29uZmlnLnBhcmVudCArIFwiXFxcIl1cIjtcclxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbiAgICAgICAgJCQkMShjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xyXG4gICAgICAgICAgX3RoaXMzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpLCBbZWxlbWVudF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwYXJlbnQ7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyA9IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoZWxlbWVudCwgdHJpZ2dlckFycmF5KSB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgIHZhciBpc09wZW4gPSAkJCQxKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcclxuXHJcbiAgICAgICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAkJCQxKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9OyAvLyBTdGF0aWNcclxuXHJcblxyXG4gICAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGw7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciAkdGhpcyA9ICQkJDEodGhpcyk7XHJcbiAgICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xyXG5cclxuICAgICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgJHRoaXMuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XHJcblxyXG4gICAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xyXG4gICAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xyXG4gICAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xyXG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiRGVmYXVsdFwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XSk7XHJcblxyXG4gICAgICByZXR1cm4gQ29sbGFwc2U7XHJcbiAgICB9KCk7XHJcbiAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICovXHJcblxyXG5cclxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcclxuICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyICR0cmlnZ2VyID0gJCQkMSh0aGlzKTtcclxuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xyXG4gICAgICB2YXIgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XHJcbiAgICAgICQkJDEoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRhcmdldCA9ICQkJDEodGhpcyk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpO1xyXG4gICAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XHJcblxyXG4gICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIGpRdWVyeVxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuXHJcbiAgICAkJCQxLmZuW05BTUVdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcclxuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDb2xsYXBzZTtcclxuXHJcbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XHJcbiAgICAgIHJldHVybiBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gQ29sbGFwc2U7XHJcbiAgfSgkKTtcclxuXHJcbiAgcmV0dXJuIENvbGxhcHNlO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGFwc2UuanMubWFwXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdwb3BwZXIuanMnKSwgcmVxdWlyZSgnLi91dGlsLmpzJykpIDpcclxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknLCAncG9wcGVyLmpzJywgJy4vdXRpbC5qcyddLCBmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbC5Ecm9wZG93biA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSxnbG9iYWwuUG9wcGVyLGdsb2JhbC5VdGlsKSk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgkLFBvcHBlcixVdGlsKSB7ICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcclxuICBQb3BwZXIgPSBQb3BwZXIgJiYgUG9wcGVyLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBQb3BwZXJbJ2RlZmF1bHQnXSA6IFBvcHBlcjtcclxuICBVdGlsID0gVXRpbCAmJiBVdGlsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBVdGlsWydkZWZhdWx0J10gOiBVdGlsO1xyXG5cclxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XHJcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcclxuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xyXG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XHJcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcclxuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcclxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcclxuICAgIGlmIChrZXkgaW4gb2JqKSB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XHJcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcclxuICAgICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xyXG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGRyb3Bkb3duLmpzXHJcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqL1xyXG5cclxuICB2YXIgRHJvcGRvd24gPSBmdW5jdGlvbiAoJCQkMSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIENvbnN0YW50c1xyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuICAgIHZhciBOQU1FID0gJ2Ryb3Bkb3duJztcclxuICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJztcclxuICAgIHZhciBEQVRBX0tFWSA9ICdicy5kcm9wZG93bic7XHJcbiAgICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcclxuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcclxuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xyXG4gICAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcclxuXHJcbiAgICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcclxuXHJcbiAgICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XHJcblxyXG4gICAgdmFyIEFSUk9XX1VQX0tFWUNPREUgPSAzODsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XHJcblxyXG4gICAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxyXG5cclxuICAgIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcclxuXHJcbiAgICB2YXIgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKEFSUk9XX1VQX0tFWUNPREUgKyBcInxcIiArIEFSUk9XX0RPV05fS0VZQ09ERSArIFwifFwiICsgRVNDQVBFX0tFWUNPREUpO1xyXG4gICAgdmFyIEV2ZW50ID0ge1xyXG4gICAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcclxuICAgICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcclxuICAgICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcclxuICAgICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcclxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcclxuICAgICAgS0VZRE9XTl9EQVRBX0FQSTogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXHJcbiAgICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcclxuICAgIH07XHJcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xyXG4gICAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcclxuICAgICAgU0hPVzogJ3Nob3cnLFxyXG4gICAgICBEUk9QVVA6ICdkcm9wdXAnLFxyXG4gICAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxyXG4gICAgICBEUk9QTEVGVDogJ2Ryb3BsZWZ0JyxcclxuICAgICAgTUVOVVJJR0hUOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXHJcbiAgICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcclxuICAgICAgUE9TSVRJT05fU1RBVElDOiAncG9zaXRpb24tc3RhdGljJ1xyXG4gICAgfTtcclxuICAgIHZhciBTZWxlY3RvciA9IHtcclxuICAgICAgREFUQV9UT0dHTEU6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXHJcbiAgICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXHJcbiAgICAgIE1FTlU6ICcuZHJvcGRvd24tbWVudScsXHJcbiAgICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXHJcbiAgICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcclxuICAgIH07XHJcbiAgICB2YXIgQXR0YWNobWVudE1hcCA9IHtcclxuICAgICAgVE9QOiAndG9wLXN0YXJ0JyxcclxuICAgICAgVE9QRU5EOiAndG9wLWVuZCcsXHJcbiAgICAgIEJPVFRPTTogJ2JvdHRvbS1zdGFydCcsXHJcbiAgICAgIEJPVFRPTUVORDogJ2JvdHRvbS1lbmQnLFxyXG4gICAgICBSSUdIVDogJ3JpZ2h0LXN0YXJ0JyxcclxuICAgICAgUklHSFRFTkQ6ICdyaWdodC1lbmQnLFxyXG4gICAgICBMRUZUOiAnbGVmdC1zdGFydCcsXHJcbiAgICAgIExFRlRFTkQ6ICdsZWZ0LWVuZCdcclxuICAgIH07XHJcbiAgICB2YXIgRGVmYXVsdCA9IHtcclxuICAgICAgb2Zmc2V0OiAwLFxyXG4gICAgICBmbGlwOiB0cnVlLFxyXG4gICAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXHJcbiAgICAgIHJlZmVyZW5jZTogJ3RvZ2dsZScsXHJcbiAgICAgIGRpc3BsYXk6ICdkeW5hbWljJ1xyXG4gICAgfTtcclxuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcclxuICAgICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcclxuICAgICAgZmxpcDogJ2Jvb2xlYW4nLFxyXG4gICAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxyXG4gICAgICByZWZlcmVuY2U6ICcoc3RyaW5nfGVsZW1lbnQpJyxcclxuICAgICAgZGlzcGxheTogJ3N0cmluZydcclxuICAgICAgLyoqXHJcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXHJcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBEcm9wZG93biA9XHJcbiAgICAvKiNfX1BVUkVfXyovXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy5fbWVudSA9IHRoaXMuX2dldE1lbnVFbGVtZW50KCk7XHJcbiAgICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgfSAvLyBHZXR0ZXJzXHJcblxyXG5cclxuICAgICAgdmFyIF9wcm90byA9IERyb3Bkb3duLnByb3RvdHlwZTtcclxuXHJcbiAgICAgIC8vIFB1YmxpY1xyXG4gICAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XHJcblxyXG4gICAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XHJcblxyXG4gICAgICAgIGlmIChpc0FjdGl2ZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XHJcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCByZWxhdGVkVGFyZ2V0KTtcclxuICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xyXG5cclxuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSAvLyBEaXNhYmxlIHRvdGFsbHkgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcclxuXHJcblxyXG4gICAgICAgIGlmICghdGhpcy5faW5OYXZiYXIpIHtcclxuICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XHJcbiAgICAgICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcclxuICAgICAgICAgICAqL1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCBkcm9wZG93biByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcclxuICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHBhcmVudDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcclxuICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gLy8gSWYgYm91bmRhcnkgaXMgbm90IGBzY3JvbGxQYXJlbnRgLCB0aGVuIHNldCBwb3NpdGlvbiB0byBgc3RhdGljYFxyXG4gICAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcclxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjQyNTFcclxuXHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5ib3VuZGFyeSAhPT0gJ3Njcm9sbFBhcmVudCcpIHtcclxuICAgICAgICAgICAgJCQkMShwYXJlbnQpLmFkZENsYXNzKENsYXNzTmFtZS5QT1NJVElPTl9TVEFUSUMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpO1xyXG4gICAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxyXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XHJcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcclxuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcclxuXHJcblxyXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJCQkMShwYXJlbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWQkFSX05BVikubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgICQkJDEodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xyXG4gICAgICAgICQkJDEocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCByZWxhdGVkVGFyZ2V0KSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcclxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX21lbnUgPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07IC8vIFByaXZhdGVcclxuXHJcblxyXG4gICAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0ssIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnRvZ2dsZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xyXG4gICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgJCQkMSh0aGlzLl9lbGVtZW50KS5kYXRhKCksIGNvbmZpZyk7XHJcbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcclxuICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9nZXRNZW51RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRNZW51RWxlbWVudCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX21lbnUpIHtcclxuICAgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWVudTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZ2V0UGxhY2VtZW50ID0gZnVuY3Rpb24gX2dldFBsYWNlbWVudCgpIHtcclxuICAgICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCQkMSh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpO1xyXG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxyXG5cclxuICAgICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QVVApKSB7XHJcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDtcclxuXHJcbiAgICAgICAgICBpZiAoJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xyXG4gICAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFJJR0hUKSkge1xyXG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5SSUdIVDtcclxuICAgICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XHJcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkxFRlQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XHJcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwbGFjZW1lbnQ7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciBvZmZzZXRDb25mID0ge307XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgb2Zmc2V0Q29uZi5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge30pO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG9mZnNldENvbmYub2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XHJcbiAgICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxyXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XHJcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0Q29uZixcclxuICAgICAgICAgICAgZmxpcDoge1xyXG4gICAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xyXG4gICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xyXG4gICAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb3BwZXJDb25maWc7XHJcbiAgICAgIH07IC8vIFN0YXRpY1xyXG5cclxuXHJcbiAgICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xyXG5cclxuICAgICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xyXG5cclxuICAgICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMsIF9jb25maWcpO1xyXG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRvZ2dsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XHJcblxyXG4gICAgICAgICAgdmFyIGNvbnRleHQgPSAkJCQxKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpO1xyXG4gICAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XHJcbiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcclxuICAgICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCFjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xyXG5cclxuICAgICAgICAgIGlmICghJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQkJDEuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xyXG4gICAgICAgICAgJCQkMShwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcclxuXHJcbiAgICAgICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxyXG4gICAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcclxuXHJcblxyXG4gICAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XHJcbiAgICAgICAgICAkJCQxKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xyXG4gICAgICAgICAgJCQkMShwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQkJDEuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgcGFyZW50O1xyXG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxyXG5cclxuXHJcbiAgICAgIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxyXG4gICAgICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxyXG4gICAgICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxyXG4gICAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXHJcbiAgICAgICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXHJcbiAgICAgICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxyXG4gICAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxyXG4gICAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSAmJiAoZXZlbnQud2hpY2ggIT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBldmVudC53aGljaCAhPT0gQVJST1dfVVBfS0VZQ09ERSB8fCAkJCQxKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5NRU5VKS5sZW5ndGgpIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQud2hpY2gpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkJCQxKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBpc0FjdGl2ZSA9ICQkJDEocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XHJcblxyXG4gICAgICAgIGlmICghaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gU1BBQ0VfS0VZQ09ERSkgfHwgaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSkpIHtcclxuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcclxuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKTtcclxuICAgICAgICAgICAgJCQkMSh0b2dnbGUpLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJCQkMSh0aGlzKS50cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKSk7XHJcblxyXG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcclxuXHJcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgLy8gVXBcclxuICAgICAgICAgIGluZGV4LS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIC8vIERvd25cclxuICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XHJcbiAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcclxuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgfV0pO1xyXG5cclxuICAgICAgcmV0dXJuIERyb3Bkb3duO1xyXG4gICAgfSgpO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEkgKyBcIiBcIiArIEV2ZW50LktFWVVQX0RBVEFfQVBJLCBEcm9wZG93bi5fY2xlYXJNZW51cykub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3RvZ2dsZScpO1xyXG4gICAgfSkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBqUXVlcnlcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICovXHJcblxyXG4gICAgJCQkMS5mbltOQU1FXSA9IERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd247XHJcblxyXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xyXG4gICAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIERyb3Bkb3duO1xyXG4gIH0oJCwgUG9wcGVyKTtcclxuXHJcbiAgcmV0dXJuIERyb3Bkb3duO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJvcGRvd24uanMubWFwXHJcbi8vLyA9IC4vdGFiLmpzXHJcbi8vLyA9IC4vc2Nyb2xsc3B5LmpzXHJcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdwb3BwZXIuanMnKSwgcmVxdWlyZSgnLi91dGlsLmpzJykpIDpcclxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknLCAncG9wcGVyLmpzJywgJy4vdXRpbC5qcyddLCBmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbC5Ub29sdGlwID0gZmFjdG9yeShnbG9iYWwualF1ZXJ5LGdsb2JhbC5Qb3BwZXIsZ2xvYmFsLlV0aWwpKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKCQsUG9wcGVyLFV0aWwpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xyXG4gIFBvcHBlciA9IFBvcHBlciAmJiBQb3BwZXIuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFBvcHBlclsnZGVmYXVsdCddIDogUG9wcGVyO1xyXG4gIFV0aWwgPSBVdGlsICYmIFV0aWwuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFV0aWxbJ2RlZmF1bHQnXSA6IFV0aWw7XHJcblxyXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcclxuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xyXG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcclxuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xyXG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xyXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGtleSBpbiBvYmopIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcclxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xyXG4gICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XHJcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogdG9vbHRpcC5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoJCQkMSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIENvbnN0YW50c1xyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuICAgIHZhciBOQU1FID0gJ3Rvb2x0aXAnO1xyXG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xyXG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLnRvb2x0aXAnO1xyXG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XHJcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcclxuICAgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XHJcbiAgICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYICsgXCJcXFxcUytcIiwgJ2cnKTtcclxuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcclxuICAgICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXHJcbiAgICAgIHRlbXBsYXRlOiAnc3RyaW5nJyxcclxuICAgICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcclxuICAgICAgdHJpZ2dlcjogJ3N0cmluZycsXHJcbiAgICAgIGRlbGF5OiAnKG51bWJlcnxvYmplY3QpJyxcclxuICAgICAgaHRtbDogJ2Jvb2xlYW4nLFxyXG4gICAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLFxyXG4gICAgICBwbGFjZW1lbnQ6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXHJcbiAgICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXHJcbiAgICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXHJcbiAgICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnKHN0cmluZ3xhcnJheSknLFxyXG4gICAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknXHJcbiAgICB9O1xyXG4gICAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XHJcbiAgICAgIEFVVE86ICdhdXRvJyxcclxuICAgICAgVE9QOiAndG9wJyxcclxuICAgICAgUklHSFQ6ICdyaWdodCcsXHJcbiAgICAgIEJPVFRPTTogJ2JvdHRvbScsXHJcbiAgICAgIExFRlQ6ICdsZWZ0J1xyXG4gICAgfTtcclxuICAgIHZhciBEZWZhdWx0ID0ge1xyXG4gICAgICBhbmltYXRpb246IHRydWUsXHJcbiAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXHJcbiAgICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXHJcbiAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgZGVsYXk6IDAsXHJcbiAgICAgIGh0bWw6IGZhbHNlLFxyXG4gICAgICBzZWxlY3RvcjogZmFsc2UsXHJcbiAgICAgIHBsYWNlbWVudDogJ3RvcCcsXHJcbiAgICAgIG9mZnNldDogMCxcclxuICAgICAgY29udGFpbmVyOiBmYWxzZSxcclxuICAgICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICdmbGlwJyxcclxuICAgICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnXHJcbiAgICB9O1xyXG4gICAgdmFyIEhvdmVyU3RhdGUgPSB7XHJcbiAgICAgIFNIT1c6ICdzaG93JyxcclxuICAgICAgT1VUOiAnb3V0J1xyXG4gICAgfTtcclxuICAgIHZhciBFdmVudCA9IHtcclxuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcclxuICAgICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIElOU0VSVEVEOiBcImluc2VydGVkXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBGT0NVU09VVDogXCJmb2N1c291dFwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcclxuICAgICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcclxuICAgIH07XHJcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xyXG4gICAgICBGQURFOiAnZmFkZScsXHJcbiAgICAgIFNIT1c6ICdzaG93J1xyXG4gICAgfTtcclxuICAgIHZhciBTZWxlY3RvciA9IHtcclxuICAgICAgVE9PTFRJUDogJy50b29sdGlwJyxcclxuICAgICAgVE9PTFRJUF9JTk5FUjogJy50b29sdGlwLWlubmVyJyxcclxuICAgICAgQVJST1c6ICcuYXJyb3cnXHJcbiAgICB9O1xyXG4gICAgdmFyIFRyaWdnZXIgPSB7XHJcbiAgICAgIEhPVkVSOiAnaG92ZXInLFxyXG4gICAgICBGT0NVUzogJ2ZvY3VzJyxcclxuICAgICAgQ0xJQ0s6ICdjbGljaycsXHJcbiAgICAgIE1BTlVBTDogJ21hbnVhbCdcclxuICAgICAgLyoqXHJcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXHJcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgKi9cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBUb29sdGlwID1cclxuICAgIC8qI19fUFVSRV9fKi9cclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgZnVuY3Rpb24gVG9vbHRpcChlbGVtZW50LCBjb25maWcpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcclxuICAgICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xyXG4gICAgICAgIH0gLy8gcHJpdmF0ZVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gMDtcclxuICAgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7IC8vIFByb3RlY3RlZFxyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy50aXAgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcclxuICAgICAgfSAvLyBHZXR0ZXJzXHJcblxyXG5cclxuICAgICAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xyXG5cclxuICAgICAgLy8gUHVibGljXHJcbiAgICAgIF9wcm90by5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoKSB7XHJcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcclxuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCgpIHtcclxuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShldmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcclxuICAgICAgICAgIHZhciBjb250ZXh0ID0gJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xyXG5cclxuICAgICAgICAgIGlmICghY29udGV4dCkge1xyXG4gICAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XHJcbiAgICAgICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XHJcblxyXG4gICAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuX2VudGVyKG51bGwsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XHJcbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XHJcbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9mZignaGlkZS5icy5tb2RhbCcpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aXApIHtcclxuICAgICAgICAgICQkJDEodGhpcy50aXApLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50aXAgPSBudWxsO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICgkJCQxKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkge1xyXG4gICAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcclxuICAgICAgICAgIHZhciBpc0luVGhlRG9tID0gJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaXNJblRoZURvbSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xyXG4gICAgICAgICAgdmFyIHRpcElkID0gVXRpbC5nZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKTtcclxuICAgICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xyXG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKTtcclxuICAgICAgICAgIHRoaXMuc2V0Q29udGVudCgpO1xyXG5cclxuICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgJCQkMSh0aXApLmFkZENsYXNzKENsYXNzTmFtZS5GQURFKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5lbGVtZW50KSA6IHRoaXMuY29uZmlnLnBsYWNlbWVudDtcclxuXHJcbiAgICAgICAgICB2YXIgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcclxuXHJcbiAgICAgICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcclxuICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6ICQkJDEoZG9jdW1lbnQpLmZpbmQodGhpcy5jb25maWcuY29udGFpbmVyKTtcclxuICAgICAgICAgICQkJDEodGlwKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xyXG5cclxuICAgICAgICAgIGlmICghJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xyXG4gICAgICAgICAgICAkJCQxKHRpcCkuYXBwZW5kVG8oY29udGFpbmVyKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcclxuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcclxuICAgICAgICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxyXG4gICAgICAgICAgICBtb2RpZmllcnM6IHtcclxuICAgICAgICAgICAgICBvZmZzZXQ6IHtcclxuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5jb25maWcub2Zmc2V0XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBmbGlwOiB7XHJcbiAgICAgICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIGFycm93OiB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBTZWxlY3Rvci5BUlJPV1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XHJcbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZShkYXRhKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcclxuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgICQkJDEodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcclxuICAgICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XHJcbiAgICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xyXG4gICAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXHJcblxyXG4gICAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuX2ZpeFRyYW5zaXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMuX2hvdmVyU3RhdGU7XHJcbiAgICAgICAgICAgIF90aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgJCQkMShfdGhpcy5lbGVtZW50KS50cmlnZ2VyKF90aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcclxuICAgICAgICAgICAgICBfdGhpcy5fbGVhdmUobnVsbCwgX3RoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIGlmICgkJCQxKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcclxuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO1xyXG4gICAgICAgICAgICAkJCQxKHRoaXMudGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XHJcbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcclxuXHJcbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XHJcbiAgICAgICAgICBpZiAoX3RoaXMyLl9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgdGlwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGlwKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBfdGhpczIuX2NsZWFuVGlwQ2xhc3MoKTtcclxuXHJcbiAgICAgICAgICBfdGhpczIuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcclxuXHJcbiAgICAgICAgICAkJCQxKF90aGlzMi5lbGVtZW50KS50cmlnZ2VyKF90aGlzMi5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pO1xyXG5cclxuICAgICAgICAgIGlmIChfdGhpczIuX3BvcHBlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBfdGhpczIuX3BvcHBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcclxuXHJcbiAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCQkMSh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcclxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxyXG5cclxuICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5GT0NVU10gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuSE9WRVJdID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICgkJCQxKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcclxuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcCk7XHJcbiAgICAgICAgICAkJCQxKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb21wbGV0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07IC8vIFByb3RlY3RlZFxyXG5cclxuXHJcbiAgICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHtcclxuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XHJcbiAgICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcclxuICAgICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQkJDEodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpcDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcclxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XHJcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkJCQxKHRpcC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlRPT0xUSVBfSU5ORVIpKSwgdGhpcy5nZXRUaXRsZSgpKTtcclxuICAgICAgICAkJCQxKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5zZXRFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmNvbmZpZy5odG1sO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xyXG4gICAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XHJcbiAgICAgICAgICBpZiAoaHRtbCkge1xyXG4gICAgICAgICAgICBpZiAoISQkJDEoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRlbGVtZW50LnRleHQoJCQkMShjb250ZW50KS50ZXh0KCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAkZWxlbWVudFtodG1sID8gJ2h0bWwnIDogJ3RleHQnXShjb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcclxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XHJcblxyXG4gICAgICAgIGlmICghdGl0bGUpIHtcclxuICAgICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGl0bGU7XHJcbiAgICAgIH07IC8vIFByaXZhdGVcclxuXHJcblxyXG4gICAgICBfcHJvdG8uX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gQXR0YWNobWVudE1hcFtwbGFjZW1lbnQudG9VcHBlckNhc2UoKV07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcclxuICAgICAgICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XHJcbiAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2NsaWNrJykge1xyXG4gICAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5vbihfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMudG9nZ2xlKGV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRyaWdnZXIuTUFOVUFMKSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47XHJcbiAgICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVIgPyBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtcclxuICAgICAgICAgICAgJCQkMShfdGhpczMuZWxlbWVudCkub24oZXZlbnRJbiwgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fZW50ZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICB9KS5vbihldmVudE91dCwgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fbGVhdmUoZXZlbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5oaWRlKCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uZmlnLCB7XHJcbiAgICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxyXG4gICAgICAgICAgICBzZWxlY3RvcjogJydcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLl9maXhUaXRsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XHJcbiAgICAgICAgdmFyIHRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnKTtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcclxuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XHJcbiAgICAgICAgY29udGV4dCA9IGNvbnRleHQgfHwgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xyXG5cclxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcclxuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcclxuICAgICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChldmVudCkge1xyXG4gICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCQkJDEoY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcclxuICAgICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XHJcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcclxuXHJcbiAgICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xyXG4gICAgICAgICAgY29udGV4dC5zaG93KCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xyXG4gICAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcclxuICAgICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XHJcblxyXG4gICAgICAgIGlmICghY29udGV4dCkge1xyXG4gICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xyXG4gICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c291dCcgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcclxuICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XHJcblxyXG4gICAgICAgIGlmICghY29udGV4dC5jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpIHtcclxuICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuT1VUKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LmhpZGUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9pc1dpdGhBY3RpdmVUcmlnZ2VyID0gZnVuY3Rpb24gX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVHJpZ2dlclt0cmlnZ2VyXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQkJDEodGhpcy5lbGVtZW50KS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBjb25maWcuZGVsYXkgPSB7XHJcbiAgICAgICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcclxuICAgICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfcHJvdG8uX2dldERlbGVnYXRlQ29uZmlnID0gZnVuY3Rpb24gX2dldERlbGVnYXRlQ29uZmlnKCkge1xyXG4gICAgICAgIHZhciBjb25maWcgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jb25maWcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7XHJcbiAgICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XHJcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcclxuICAgICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcclxuXHJcbiAgICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCkge1xyXG4gICAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHtcclxuICAgICAgICB2YXIgcG9wcGVySW5zdGFuY2UgPSBwb3BwZXJEYXRhLmluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMudGlwID0gcG9wcGVySW5zdGFuY2UucG9wcGVyO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQocG9wcGVyRGF0YS5wbGFjZW1lbnQpKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xyXG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcclxuICAgICAgICB2YXIgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvbjtcclxuXHJcbiAgICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy5zaG93KCk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjtcclxuICAgICAgfTsgLy8gU3RhdGljXHJcblxyXG5cclxuICAgICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcclxuXHJcbiAgICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcclxuXHJcbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpO1xyXG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3tcclxuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGtleTogXCJOQU1FXCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gTkFNRTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiREFUQV9LRVlcIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBEQVRBX0tFWTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiRXZlbnRcIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBFdmVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gRVZFTlRfS0VZO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xyXG4gICAgICAgIH1cclxuICAgICAgfV0pO1xyXG5cclxuICAgICAgcmV0dXJuIFRvb2x0aXA7XHJcbiAgICB9KCk7XHJcbiAgICAvKipcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICogalF1ZXJ5XHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqL1xyXG5cclxuXHJcbiAgICAkJCQxLmZuW05BTUVdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7XHJcblxyXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xyXG4gICAgICByZXR1cm4gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gVG9vbHRpcDtcclxuICB9KCQsIFBvcHBlcik7XHJcblxyXG4gIHJldHVybiBUb29sdGlwO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbHRpcC5qcy5tYXBcclxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJy4vdG9vbHRpcC5qcycpKSA6XHJcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnanF1ZXJ5JywgJy4vdG9vbHRpcC5qcyddLCBmYWN0b3J5KSA6XHJcbiAgKGdsb2JhbC5Qb3BvdmVyID0gZmFjdG9yeShnbG9iYWwualF1ZXJ5LGdsb2JhbC5Ub29sdGlwKSk7XHJcbn0odGhpcywgKGZ1bmN0aW9uICgkLFRvb2x0aXApIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xyXG4gIFRvb2x0aXAgPSBUb29sdGlwICYmIFRvb2x0aXAuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFRvb2x0aXBbJ2RlZmF1bHQnXSA6IFRvb2x0aXA7XHJcblxyXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcclxuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xyXG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcclxuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xyXG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xyXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKGtleSBpbiBvYmopIHtcclxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcclxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xyXG4gICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XHJcbiAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xyXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XHJcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcclxuICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAqIEJvb3RzdHJhcCAodjQuMS4zKTogcG9wb3Zlci5qc1xyXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgKi9cclxuXHJcbiAgdmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoJCQkMSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAqIENvbnN0YW50c1xyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKi9cclxuICAgIHZhciBOQU1FID0gJ3BvcG92ZXInO1xyXG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnO1xyXG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLnBvcG92ZXInO1xyXG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XHJcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcclxuICAgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XHJcbiAgICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgQ0xBU1NfUFJFRklYICsgXCJcXFxcUytcIiwgJ2cnKTtcclxuXHJcbiAgICB2YXIgRGVmYXVsdCA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xyXG4gICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsXHJcbiAgICAgIHRyaWdnZXI6ICdjbGljaycsXHJcbiAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2PidcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBEZWZhdWx0VHlwZSA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUsIHtcclxuICAgICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xyXG4gICAgICBGQURFOiAnZmFkZScsXHJcbiAgICAgIFNIT1c6ICdzaG93J1xyXG4gICAgfTtcclxuICAgIHZhciBTZWxlY3RvciA9IHtcclxuICAgICAgVElUTEU6ICcucG9wb3Zlci1oZWFkZXInLFxyXG4gICAgICBDT05URU5UOiAnLnBvcG92ZXItYm9keSdcclxuICAgIH07XHJcbiAgICB2YXIgRXZlbnQgPSB7XHJcbiAgICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxyXG4gICAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxyXG4gICAgICBDTElDSzogXCJjbGlja1wiICsgRVZFTlRfS0VZLFxyXG4gICAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcclxuICAgICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcclxuICAgICAgTU9VU0VFTlRFUjogXCJtb3VzZWVudGVyXCIgKyBFVkVOVF9LRVksXHJcbiAgICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxyXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICovXHJcblxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgUG9wb3ZlciA9XHJcbiAgICAvKiNfX1BVUkVfXyovXHJcbiAgICBmdW5jdGlvbiAoX1Rvb2x0aXApIHtcclxuICAgICAgX2luaGVyaXRzTG9vc2UoUG9wb3ZlciwgX1Rvb2x0aXApO1xyXG5cclxuICAgICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcclxuICAgICAgICByZXR1cm4gX1Rvb2x0aXAuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XHJcblxyXG4gICAgICAvLyBPdmVycmlkZXNcclxuICAgICAgX3Byb3RvLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XHJcbiAgICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHtcclxuICAgICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQkJDEodGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpcDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcclxuICAgICAgICB2YXIgJHRpcCA9ICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpOyAvLyBXZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXHJcblxyXG4gICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcclxuXHJcbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLl9nZXRDb250ZW50KCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuQ09OVEVOVCksIGNvbnRlbnQpO1xyXG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcclxuICAgICAgfTsgLy8gUHJpdmF0ZVxyXG5cclxuXHJcbiAgICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fCB0aGlzLmNvbmZpZy5jb250ZW50O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7XHJcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcclxuICAgICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcclxuXHJcbiAgICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTsgLy8gU3RhdGljXHJcblxyXG5cclxuICAgICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcclxuXHJcbiAgICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcclxuXHJcbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpO1xyXG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3tcclxuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxyXG4gICAgICAgIC8vIEdldHRlcnNcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwge1xyXG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiTkFNRVwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIE5BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gREFUQV9LRVk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAga2V5OiBcIkV2ZW50XCIsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gRXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCB7XHJcbiAgICAgICAga2V5OiBcIkVWRU5UX0tFWVwiLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHtcclxuICAgICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcclxuICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1dKTtcclxuXHJcbiAgICAgIHJldHVybiBQb3BvdmVyO1xyXG4gICAgfShUb29sdGlwKTtcclxuICAgIC8qKlxyXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgKiBqUXVlcnlcclxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICovXHJcblxyXG5cclxuICAgICQkJDEuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gUG9wb3ZlcjtcclxuXHJcbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XHJcbiAgICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBQb3BvdmVyO1xyXG4gIH0oJCk7XHJcblxyXG4gIHJldHVybiBQb3BvdmVyO1xyXG5cclxufSkpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wb3Zlci5qcy5tYXBcclxuXHJcbi8vLyA9IC4vbW9kYWwuanNcclxuXHJcbi8qIVxyXG4gKiBJc290b3BlIFBBQ0tBR0VEIHYzLjAuNlxyXG4gKlxyXG4gKiBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXHJcbiAqIG9yIElzb3RvcGUgQ29tbWVyY2lhbCBMaWNlbnNlIGZvciBjb21tZXJjaWFsIHVzZVxyXG4gKlxyXG4gKiBodHRwczovL2lzb3RvcGUubWV0YWZpenp5LmNvXHJcbiAqIENvcHlyaWdodCAyMDEwLTIwMTggTWV0YWZpenp5XHJcbiAqL1xyXG5cclxuIWZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImpxdWVyeS1icmlkZ2V0L2pxdWVyeS1icmlkZ2V0XCIsW1wianF1ZXJ5XCJdLGZ1bmN0aW9uKGkpe3JldHVybiBlKHQsaSl9KTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHQscmVxdWlyZShcImpxdWVyeVwiKSk6dC5qUXVlcnlCcmlkZ2V0PWUodCx0LmpRdWVyeSl9KHdpbmRvdyxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkoaSxzLGEpe2Z1bmN0aW9uIHUodCxlLG8pe3ZhciBuLHM9XCIkKCkuXCIraSsnKFwiJytlKydcIiknO3JldHVybiB0LmVhY2goZnVuY3Rpb24odCx1KXt2YXIgaD1hLmRhdGEodSxpKTtpZighaClyZXR1cm4gdm9pZCByKGkrXCIgbm90IGluaXRpYWxpemVkLiBDYW5ub3QgY2FsbCBtZXRob2RzLCBpLmUuIFwiK3MpO3ZhciBkPWhbZV07aWYoIWR8fFwiX1wiPT1lLmNoYXJBdCgwKSlyZXR1cm4gdm9pZCByKHMrXCIgaXMgbm90IGEgdmFsaWQgbWV0aG9kXCIpO3ZhciBsPWQuYXBwbHkoaCxvKTtuPXZvaWQgMD09PW4/bDpufSksdm9pZCAwIT09bj9uOnR9ZnVuY3Rpb24gaCh0LGUpe3QuZWFjaChmdW5jdGlvbih0LG8pe3ZhciBuPWEuZGF0YShvLGkpO24/KG4ub3B0aW9uKGUpLG4uX2luaXQoKSk6KG49bmV3IHMobyxlKSxhLmRhdGEobyxpLG4pKX0pfWE9YXx8ZXx8dC5qUXVlcnksYSYmKHMucHJvdG90eXBlLm9wdGlvbnx8KHMucHJvdG90eXBlLm9wdGlvbj1mdW5jdGlvbih0KXthLmlzUGxhaW5PYmplY3QodCkmJih0aGlzLm9wdGlvbnM9YS5leHRlbmQoITAsdGhpcy5vcHRpb25zLHQpKX0pLGEuZm5baV09ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe3ZhciBlPW4uY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIHUodGhpcyx0LGUpfXJldHVybiBoKHRoaXMsdCksdGhpc30sbyhhKSl9ZnVuY3Rpb24gbyh0KXshdHx8dCYmdC5icmlkZ2V0fHwodC5icmlkZ2V0PWkpfXZhciBuPUFycmF5LnByb3RvdHlwZS5zbGljZSxzPXQuY29uc29sZSxyPVwidW5kZWZpbmVkXCI9PXR5cGVvZiBzP2Z1bmN0aW9uKCl7fTpmdW5jdGlvbih0KXtzLmVycm9yKHQpfTtyZXR1cm4gbyhlfHx0LmpRdWVyeSksaX0pLGZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImV2LWVtaXR0ZXIvZXYtZW1pdHRlclwiLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUoKTp0LkV2RW1pdHRlcj1lKCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXZhciBlPXQucHJvdG90eXBlO3JldHVybiBlLm9uPWZ1bmN0aW9uKHQsZSl7aWYodCYmZSl7dmFyIGk9dGhpcy5fZXZlbnRzPXRoaXMuX2V2ZW50c3x8e30sbz1pW3RdPWlbdF18fFtdO3JldHVybiBvLmluZGV4T2YoZSk9PS0xJiZvLnB1c2goZSksdGhpc319LGUub25jZT1mdW5jdGlvbih0LGUpe2lmKHQmJmUpe3RoaXMub24odCxlKTt2YXIgaT10aGlzLl9vbmNlRXZlbnRzPXRoaXMuX29uY2VFdmVudHN8fHt9LG89aVt0XT1pW3RdfHx7fTtyZXR1cm4gb1tlXT0hMCx0aGlzfX0sZS5vZmY9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1t0XTtpZihpJiZpLmxlbmd0aCl7dmFyIG89aS5pbmRleE9mKGUpO3JldHVybiBvIT0tMSYmaS5zcGxpY2UobywxKSx0aGlzfX0sZS5lbWl0RXZlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50c1t0XTtpZihpJiZpLmxlbmd0aCl7aT1pLnNsaWNlKDApLGU9ZXx8W107Zm9yKHZhciBvPXRoaXMuX29uY2VFdmVudHMmJnRoaXMuX29uY2VFdmVudHNbdF0sbj0wO248aS5sZW5ndGg7bisrKXt2YXIgcz1pW25dLHI9byYmb1tzXTtyJiYodGhpcy5vZmYodCxzKSxkZWxldGUgb1tzXSkscy5hcHBseSh0aGlzLGUpfXJldHVybiB0aGlzfX0sZS5hbGxPZmY9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5fZXZlbnRzLGRlbGV0ZSB0aGlzLl9vbmNlRXZlbnRzfSx0fSksZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZ2V0LXNpemUvZ2V0LXNpemVcIixlKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKCk6dC5nZXRTaXplPWUoKX0od2luZG93LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0KXt2YXIgZT1wYXJzZUZsb2F0KHQpLGk9dC5pbmRleE9mKFwiJVwiKT09LTEmJiFpc05hTihlKTtyZXR1cm4gaSYmZX1mdW5jdGlvbiBlKCl7fWZ1bmN0aW9uIGkoKXtmb3IodmFyIHQ9e3dpZHRoOjAsaGVpZ2h0OjAsaW5uZXJXaWR0aDowLGlubmVySGVpZ2h0OjAsb3V0ZXJXaWR0aDowLG91dGVySGVpZ2h0OjB9LGU9MDtlPGg7ZSsrKXt2YXIgaT11W2VdO3RbaV09MH1yZXR1cm4gdH1mdW5jdGlvbiBvKHQpe3ZhciBlPWdldENvbXB1dGVkU3R5bGUodCk7cmV0dXJuIGV8fGEoXCJTdHlsZSByZXR1cm5lZCBcIitlK1wiLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyBTZWUgaHR0cHM6Ly9iaXQubHkvZ2V0c2l6ZWJ1ZzFcIiksZX1mdW5jdGlvbiBuKCl7aWYoIWQpe2Q9ITA7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLnN0eWxlLndpZHRoPVwiMjAwcHhcIixlLnN0eWxlLnBhZGRpbmc9XCIxcHggMnB4IDNweCA0cHhcIixlLnN0eWxlLmJvcmRlclN0eWxlPVwic29saWRcIixlLnN0eWxlLmJvcmRlcldpZHRoPVwiMXB4IDJweCAzcHggNHB4XCIsZS5zdHlsZS5ib3hTaXppbmc9XCJib3JkZXItYm94XCI7dmFyIGk9ZG9jdW1lbnQuYm9keXx8ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O2kuYXBwZW5kQ2hpbGQoZSk7dmFyIG49byhlKTtyPTIwMD09TWF0aC5yb3VuZCh0KG4ud2lkdGgpKSxzLmlzQm94U2l6ZU91dGVyPXIsaS5yZW1vdmVDaGlsZChlKX19ZnVuY3Rpb24gcyhlKXtpZihuKCksXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSkpLGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLm5vZGVUeXBlKXt2YXIgcz1vKGUpO2lmKFwibm9uZVwiPT1zLmRpc3BsYXkpcmV0dXJuIGkoKTt2YXIgYT17fTthLndpZHRoPWUub2Zmc2V0V2lkdGgsYS5oZWlnaHQ9ZS5vZmZzZXRIZWlnaHQ7Zm9yKHZhciBkPWEuaXNCb3JkZXJCb3g9XCJib3JkZXItYm94XCI9PXMuYm94U2l6aW5nLGw9MDtsPGg7bCsrKXt2YXIgZj11W2xdLGM9c1tmXSxtPXBhcnNlRmxvYXQoYyk7YVtmXT1pc05hTihtKT8wOm19dmFyIHA9YS5wYWRkaW5nTGVmdCthLnBhZGRpbmdSaWdodCx5PWEucGFkZGluZ1RvcCthLnBhZGRpbmdCb3R0b20sZz1hLm1hcmdpbkxlZnQrYS5tYXJnaW5SaWdodCx2PWEubWFyZ2luVG9wK2EubWFyZ2luQm90dG9tLF89YS5ib3JkZXJMZWZ0V2lkdGgrYS5ib3JkZXJSaWdodFdpZHRoLHo9YS5ib3JkZXJUb3BXaWR0aCthLmJvcmRlckJvdHRvbVdpZHRoLEk9ZCYmcix4PXQocy53aWR0aCk7eCE9PSExJiYoYS53aWR0aD14KyhJPzA6cCtfKSk7dmFyIFM9dChzLmhlaWdodCk7cmV0dXJuIFMhPT0hMSYmKGEuaGVpZ2h0PVMrKEk/MDp5K3opKSxhLmlubmVyV2lkdGg9YS53aWR0aC0ocCtfKSxhLmlubmVySGVpZ2h0PWEuaGVpZ2h0LSh5K3opLGEub3V0ZXJXaWR0aD1hLndpZHRoK2csYS5vdXRlckhlaWdodD1hLmhlaWdodCt2LGF9fXZhciByLGE9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGU/ZTpmdW5jdGlvbih0KXtjb25zb2xlLmVycm9yKHQpfSx1PVtcInBhZGRpbmdMZWZ0XCIsXCJwYWRkaW5nUmlnaHRcIixcInBhZGRpbmdUb3BcIixcInBhZGRpbmdCb3R0b21cIixcIm1hcmdpbkxlZnRcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpbkJvdHRvbVwiLFwiYm9yZGVyTGVmdFdpZHRoXCIsXCJib3JkZXJSaWdodFdpZHRoXCIsXCJib3JkZXJUb3BXaWR0aFwiLFwiYm9yZGVyQm90dG9tV2lkdGhcIl0saD11Lmxlbmd0aCxkPSExO3JldHVybiBzfSksZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yXCIsZSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZSgpOnQubWF0Y2hlc1NlbGVjdG9yPWUoKX0od2luZG93LGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cuRWxlbWVudC5wcm90b3R5cGU7aWYodC5tYXRjaGVzKXJldHVyblwibWF0Y2hlc1wiO2lmKHQubWF0Y2hlc1NlbGVjdG9yKXJldHVyblwibWF0Y2hlc1NlbGVjdG9yXCI7Zm9yKHZhciBlPVtcIndlYmtpdFwiLFwibW96XCIsXCJtc1wiLFwib1wiXSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBvPWVbaV0sbj1vK1wiTWF0Y2hlc1NlbGVjdG9yXCI7aWYodFtuXSlyZXR1cm4gbn19KCk7cmV0dXJuIGZ1bmN0aW9uKGUsaSl7cmV0dXJuIGVbdF0oaSl9fSksZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZml6enktdWktdXRpbHMvdXRpbHNcIixbXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3JcIl0sZnVuY3Rpb24oaSl7cmV0dXJuIGUodCxpKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUodCxyZXF1aXJlKFwiZGVzYW5kcm8tbWF0Y2hlcy1zZWxlY3RvclwiKSk6dC5maXp6eVVJVXRpbHM9ZSh0LHQubWF0Y2hlc1NlbGVjdG9yKX0od2luZG93LGZ1bmN0aW9uKHQsZSl7dmFyIGk9e307aS5leHRlbmQ9ZnVuY3Rpb24odCxlKXtmb3IodmFyIGkgaW4gZSl0W2ldPWVbaV07cmV0dXJuIHR9LGkubW9kdWxvPWZ1bmN0aW9uKHQsZSl7cmV0dXJuKHQlZStlKSVlfTt2YXIgbz1BcnJheS5wcm90b3R5cGUuc2xpY2U7aS5tYWtlQXJyYXk9ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdDtpZihudWxsPT09dHx8dm9pZCAwPT09dClyZXR1cm5bXTt2YXIgZT1cIm9iamVjdFwiPT10eXBlb2YgdCYmXCJudW1iZXJcIj09dHlwZW9mIHQubGVuZ3RoO3JldHVybiBlP28uY2FsbCh0KTpbdF19LGkucmVtb3ZlRnJvbT1mdW5jdGlvbih0LGUpe3ZhciBpPXQuaW5kZXhPZihlKTtpIT0tMSYmdC5zcGxpY2UoaSwxKX0saS5nZXRQYXJlbnQ9ZnVuY3Rpb24odCxpKXtmb3IoO3QucGFyZW50Tm9kZSYmdCE9ZG9jdW1lbnQuYm9keTspaWYodD10LnBhcmVudE5vZGUsZSh0LGkpKXJldHVybiB0fSxpLmdldFF1ZXJ5RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpOnR9LGkuaGFuZGxlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGU9XCJvblwiK3QudHlwZTt0aGlzW2VdJiZ0aGlzW2VdKHQpfSxpLmZpbHRlckZpbmRFbGVtZW50cz1mdW5jdGlvbih0LG8pe3Q9aS5tYWtlQXJyYXkodCk7dmFyIG49W107cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtpZih0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe2lmKCFvKXJldHVybiB2b2lkIG4ucHVzaCh0KTtlKHQsbykmJm4ucHVzaCh0KTtmb3IodmFyIGk9dC5xdWVyeVNlbGVjdG9yQWxsKG8pLHM9MDtzPGkubGVuZ3RoO3MrKyluLnB1c2goaVtzXSl9fSksbn0saS5kZWJvdW5jZU1ldGhvZD1mdW5jdGlvbih0LGUsaSl7aT1pfHwxMDA7dmFyIG89dC5wcm90b3R5cGVbZV0sbj1lK1wiVGltZW91dFwiO3QucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tuXTtjbGVhclRpbWVvdXQodCk7dmFyIGU9YXJndW1lbnRzLHM9dGhpczt0aGlzW25dPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLmFwcGx5KHMsZSksZGVsZXRlIHNbbl19LGkpfX0saS5kb2NSZWFkeT1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5yZWFkeVN0YXRlO1wiY29tcGxldGVcIj09ZXx8XCJpbnRlcmFjdGl2ZVwiPT1lP3NldFRpbWVvdXQodCk6ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIix0KX0saS50b0Rhc2hlZD1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC8oLikoW0EtWl0pL2csZnVuY3Rpb24odCxlLGkpe3JldHVybiBlK1wiLVwiK2l9KS50b0xvd2VyQ2FzZSgpfTt2YXIgbj10LmNvbnNvbGU7cmV0dXJuIGkuaHRtbEluaXQ9ZnVuY3Rpb24oZSxvKXtpLmRvY1JlYWR5KGZ1bmN0aW9uKCl7dmFyIHM9aS50b0Rhc2hlZChvKSxyPVwiZGF0YS1cIitzLGE9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltcIityK1wiXVwiKSx1PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtXCIrcyksaD1pLm1ha2VBcnJheShhKS5jb25jYXQoaS5tYWtlQXJyYXkodSkpLGQ9citcIi1vcHRpb25zXCIsbD10LmpRdWVyeTtoLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGkscz10LmdldEF0dHJpYnV0ZShyKXx8dC5nZXRBdHRyaWJ1dGUoZCk7dHJ5e2k9cyYmSlNPTi5wYXJzZShzKX1jYXRjaChhKXtyZXR1cm4gdm9pZChuJiZuLmVycm9yKFwiRXJyb3IgcGFyc2luZyBcIityK1wiIG9uIFwiK3QuY2xhc3NOYW1lK1wiOiBcIithKSl9dmFyIHU9bmV3IGUodCxpKTtsJiZsLmRhdGEodCxvLHUpfSl9KX0saX0pLGZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIm91dGxheWVyL2l0ZW1cIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIixcImdldC1zaXplL2dldC1zaXplXCJdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcImV2LWVtaXR0ZXJcIikscmVxdWlyZShcImdldC1zaXplXCIpKToodC5PdXRsYXllcj17fSx0Lk91dGxheWVyLkl0ZW09ZSh0LkV2RW1pdHRlcix0LmdldFNpemUpKX0od2luZG93LGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtmb3IodmFyIGUgaW4gdClyZXR1cm4hMTtyZXR1cm4gZT1udWxsLCEwfWZ1bmN0aW9uIG8odCxlKXt0JiYodGhpcy5lbGVtZW50PXQsdGhpcy5sYXlvdXQ9ZSx0aGlzLnBvc2l0aW9uPXt4OjAseTowfSx0aGlzLl9jcmVhdGUoKSl9ZnVuY3Rpb24gbih0KXtyZXR1cm4gdC5yZXBsYWNlKC8oW0EtWl0pL2csZnVuY3Rpb24odCl7cmV0dXJuXCItXCIrdC50b0xvd2VyQ2FzZSgpfSl9dmFyIHM9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLHI9XCJzdHJpbmdcIj09dHlwZW9mIHMudHJhbnNpdGlvbj9cInRyYW5zaXRpb25cIjpcIldlYmtpdFRyYW5zaXRpb25cIixhPVwic3RyaW5nXCI9PXR5cGVvZiBzLnRyYW5zZm9ybT9cInRyYW5zZm9ybVwiOlwiV2Via2l0VHJhbnNmb3JtXCIsdT17V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifVtyXSxoPXt0cmFuc2Zvcm06YSx0cmFuc2l0aW9uOnIsdHJhbnNpdGlvbkR1cmF0aW9uOnIrXCJEdXJhdGlvblwiLHRyYW5zaXRpb25Qcm9wZXJ0eTpyK1wiUHJvcGVydHlcIix0cmFuc2l0aW9uRGVsYXk6citcIkRlbGF5XCJ9LGQ9by5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSk7ZC5jb25zdHJ1Y3Rvcj1vLGQuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuX3RyYW5zbj17aW5nUHJvcGVydGllczp7fSxjbGVhbjp7fSxvbkVuZDp7fX0sdGhpcy5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0pfSxkLmhhbmRsZUV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPVwib25cIit0LnR5cGU7dGhpc1tlXSYmdGhpc1tlXSh0KX0sZC5nZXRTaXplPWZ1bmN0aW9uKCl7dGhpcy5zaXplPWUodGhpcy5lbGVtZW50KX0sZC5jc3M9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lbGVtZW50LnN0eWxlO2Zvcih2YXIgaSBpbiB0KXt2YXIgbz1oW2ldfHxpO2Vbb109dFtpXX19LGQuZ2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgdD1nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudCksZT10aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwib3JpZ2luTGVmdFwiKSxpPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5Ub3BcIiksbz10W2U/XCJsZWZ0XCI6XCJyaWdodFwiXSxuPXRbaT9cInRvcFwiOlwiYm90dG9tXCJdLHM9cGFyc2VGbG9hdChvKSxyPXBhcnNlRmxvYXQobiksYT10aGlzLmxheW91dC5zaXplO28uaW5kZXhPZihcIiVcIikhPS0xJiYocz1zLzEwMCphLndpZHRoKSxuLmluZGV4T2YoXCIlXCIpIT0tMSYmKHI9ci8xMDAqYS5oZWlnaHQpLHM9aXNOYU4ocyk/MDpzLHI9aXNOYU4ocik/MDpyLHMtPWU/YS5wYWRkaW5nTGVmdDphLnBhZGRpbmdSaWdodCxyLT1pP2EucGFkZGluZ1RvcDphLnBhZGRpbmdCb3R0b20sdGhpcy5wb3NpdGlvbi54PXMsdGhpcy5wb3NpdGlvbi55PXJ9LGQubGF5b3V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxheW91dC5zaXplLGU9e30saT10aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwib3JpZ2luTGVmdFwiKSxvPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5Ub3BcIiksbj1pP1wicGFkZGluZ0xlZnRcIjpcInBhZGRpbmdSaWdodFwiLHM9aT9cImxlZnRcIjpcInJpZ2h0XCIscj1pP1wicmlnaHRcIjpcImxlZnRcIixhPXRoaXMucG9zaXRpb24ueCt0W25dO2Vbc109dGhpcy5nZXRYVmFsdWUoYSksZVtyXT1cIlwiO3ZhciB1PW8/XCJwYWRkaW5nVG9wXCI6XCJwYWRkaW5nQm90dG9tXCIsaD1vP1widG9wXCI6XCJib3R0b21cIixkPW8/XCJib3R0b21cIjpcInRvcFwiLGw9dGhpcy5wb3NpdGlvbi55K3RbdV07ZVtoXT10aGlzLmdldFlWYWx1ZShsKSxlW2RdPVwiXCIsdGhpcy5jc3MoZSksdGhpcy5lbWl0RXZlbnQoXCJsYXlvdXRcIixbdGhpc10pfSxkLmdldFhWYWx1ZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwiaG9yaXpvbnRhbFwiKTtyZXR1cm4gdGhpcy5sYXlvdXQub3B0aW9ucy5wZXJjZW50UG9zaXRpb24mJiFlP3QvdGhpcy5sYXlvdXQuc2l6ZS53aWR0aCoxMDArXCIlXCI6dCtcInB4XCJ9LGQuZ2V0WVZhbHVlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJob3Jpem9udGFsXCIpO3JldHVybiB0aGlzLmxheW91dC5vcHRpb25zLnBlcmNlbnRQb3NpdGlvbiYmZT90L3RoaXMubGF5b3V0LnNpemUuaGVpZ2h0KjEwMCtcIiVcIjp0K1wicHhcIn0sZC5fdHJhbnNpdGlvblRvPWZ1bmN0aW9uKHQsZSl7dGhpcy5nZXRQb3NpdGlvbigpO3ZhciBpPXRoaXMucG9zaXRpb24ueCxvPXRoaXMucG9zaXRpb24ueSxuPXQ9PXRoaXMucG9zaXRpb24ueCYmZT09dGhpcy5wb3NpdGlvbi55O2lmKHRoaXMuc2V0UG9zaXRpb24odCxlKSxuJiYhdGhpcy5pc1RyYW5zaXRpb25pbmcpcmV0dXJuIHZvaWQgdGhpcy5sYXlvdXRQb3NpdGlvbigpO3ZhciBzPXQtaSxyPWUtbyxhPXt9O2EudHJhbnNmb3JtPXRoaXMuZ2V0VHJhbnNsYXRlKHMsciksdGhpcy50cmFuc2l0aW9uKHt0bzphLG9uVHJhbnNpdGlvbkVuZDp7dHJhbnNmb3JtOnRoaXMubGF5b3V0UG9zaXRpb259LGlzQ2xlYW5pbmc6ITB9KX0sZC5nZXRUcmFuc2xhdGU9ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLmxheW91dC5fZ2V0T3B0aW9uKFwib3JpZ2luTGVmdFwiKSxvPXRoaXMubGF5b3V0Ll9nZXRPcHRpb24oXCJvcmlnaW5Ub3BcIik7cmV0dXJuIHQ9aT90Oi10LGU9bz9lOi1lLFwidHJhbnNsYXRlM2QoXCIrdCtcInB4LCBcIitlK1wicHgsIDApXCJ9LGQuZ29Ubz1mdW5jdGlvbih0LGUpe3RoaXMuc2V0UG9zaXRpb24odCxlKSx0aGlzLmxheW91dFBvc2l0aW9uKCl9LGQubW92ZVRvPWQuX3RyYW5zaXRpb25UbyxkLnNldFBvc2l0aW9uPWZ1bmN0aW9uKHQsZSl7dGhpcy5wb3NpdGlvbi54PXBhcnNlRmxvYXQodCksdGhpcy5wb3NpdGlvbi55PXBhcnNlRmxvYXQoZSl9LGQuX25vblRyYW5zaXRpb249ZnVuY3Rpb24odCl7dGhpcy5jc3ModC50byksdC5pc0NsZWFuaW5nJiZ0aGlzLl9yZW1vdmVTdHlsZXModC50byk7Zm9yKHZhciBlIGluIHQub25UcmFuc2l0aW9uRW5kKXQub25UcmFuc2l0aW9uRW5kW2VdLmNhbGwodGhpcyl9LGQudHJhbnNpdGlvbj1mdW5jdGlvbih0KXtpZighcGFyc2VGbG9hdCh0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbikpcmV0dXJuIHZvaWQgdGhpcy5fbm9uVHJhbnNpdGlvbih0KTt2YXIgZT10aGlzLl90cmFuc247Zm9yKHZhciBpIGluIHQub25UcmFuc2l0aW9uRW5kKWUub25FbmRbaV09dC5vblRyYW5zaXRpb25FbmRbaV07Zm9yKGkgaW4gdC50byllLmluZ1Byb3BlcnRpZXNbaV09ITAsdC5pc0NsZWFuaW5nJiYoZS5jbGVhbltpXT0hMCk7aWYodC5mcm9tKXt0aGlzLmNzcyh0LmZyb20pO3ZhciBvPXRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7bz1udWxsfXRoaXMuZW5hYmxlVHJhbnNpdGlvbih0LnRvKSx0aGlzLmNzcyh0LnRvKSx0aGlzLmlzVHJhbnNpdGlvbmluZz0hMH07dmFyIGw9XCJvcGFjaXR5LFwiK24oYSk7ZC5lbmFibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7aWYoIXRoaXMuaXNUcmFuc2l0aW9uaW5nKXt2YXIgdD10aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjt0PVwibnVtYmVyXCI9PXR5cGVvZiB0P3QrXCJtc1wiOnQsdGhpcy5jc3Moe3RyYW5zaXRpb25Qcm9wZXJ0eTpsLHRyYW5zaXRpb25EdXJhdGlvbjp0LHRyYW5zaXRpb25EZWxheTp0aGlzLnN0YWdnZXJEZWxheXx8MH0pLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHUsdGhpcywhMSl9fSxkLm9ud2Via2l0VHJhbnNpdGlvbkVuZD1mdW5jdGlvbih0KXt0aGlzLm9udHJhbnNpdGlvbmVuZCh0KX0sZC5vbm90cmFuc2l0aW9uZW5kPWZ1bmN0aW9uKHQpe3RoaXMub250cmFuc2l0aW9uZW5kKHQpfTt2YXIgZj17XCItd2Via2l0LXRyYW5zZm9ybVwiOlwidHJhbnNmb3JtXCJ9O2Qub250cmFuc2l0aW9uZW5kPWZ1bmN0aW9uKHQpe2lmKHQudGFyZ2V0PT09dGhpcy5lbGVtZW50KXt2YXIgZT10aGlzLl90cmFuc24sbz1mW3QucHJvcGVydHlOYW1lXXx8dC5wcm9wZXJ0eU5hbWU7aWYoZGVsZXRlIGUuaW5nUHJvcGVydGllc1tvXSxpKGUuaW5nUHJvcGVydGllcykmJnRoaXMuZGlzYWJsZVRyYW5zaXRpb24oKSxvIGluIGUuY2xlYW4mJih0aGlzLmVsZW1lbnQuc3R5bGVbdC5wcm9wZXJ0eU5hbWVdPVwiXCIsZGVsZXRlIGUuY2xlYW5bb10pLG8gaW4gZS5vbkVuZCl7dmFyIG49ZS5vbkVuZFtvXTtuLmNhbGwodGhpcyksZGVsZXRlIGUub25FbmRbb119dGhpcy5lbWl0RXZlbnQoXCJ0cmFuc2l0aW9uRW5kXCIsW3RoaXNdKX19LGQuZGlzYWJsZVRyYW5zaXRpb249ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZVRyYW5zaXRpb25TdHlsZXMoKSx0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih1LHRoaXMsITEpLHRoaXMuaXNUcmFuc2l0aW9uaW5nPSExfSxkLl9yZW1vdmVTdHlsZXM9ZnVuY3Rpb24odCl7dmFyIGU9e307Zm9yKHZhciBpIGluIHQpZVtpXT1cIlwiO3RoaXMuY3NzKGUpfTt2YXIgYz17dHJhbnNpdGlvblByb3BlcnR5OlwiXCIsdHJhbnNpdGlvbkR1cmF0aW9uOlwiXCIsdHJhbnNpdGlvbkRlbGF5OlwiXCJ9O3JldHVybiBkLnJlbW92ZVRyYW5zaXRpb25TdHlsZXM9ZnVuY3Rpb24oKXt0aGlzLmNzcyhjKX0sZC5zdGFnZ2VyPWZ1bmN0aW9uKHQpe3Q9aXNOYU4odCk/MDp0LHRoaXMuc3RhZ2dlckRlbGF5PXQrXCJtc1wifSxkLnJlbW92ZUVsZW09ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpLHRoaXMuY3NzKHtkaXNwbGF5OlwiXCJ9KSx0aGlzLmVtaXRFdmVudChcInJlbW92ZVwiLFt0aGlzXSl9LGQucmVtb3ZlPWZ1bmN0aW9uKCl7cmV0dXJuIHImJnBhcnNlRmxvYXQodGhpcy5sYXlvdXQub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb24pPyh0aGlzLm9uY2UoXCJ0cmFuc2l0aW9uRW5kXCIsZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUVsZW0oKX0pLHZvaWQgdGhpcy5oaWRlKCkpOnZvaWQgdGhpcy5yZW1vdmVFbGVtKCl9LGQucmV2ZWFsPWZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuaXNIaWRkZW4sdGhpcy5jc3Moe2Rpc3BsYXk6XCJcIn0pO3ZhciB0PXRoaXMubGF5b3V0Lm9wdGlvbnMsZT17fSxpPXRoaXMuZ2V0SGlkZVJldmVhbFRyYW5zaXRpb25FbmRQcm9wZXJ0eShcInZpc2libGVTdHlsZVwiKTtlW2ldPXRoaXMub25SZXZlYWxUcmFuc2l0aW9uRW5kLHRoaXMudHJhbnNpdGlvbih7ZnJvbTp0LmhpZGRlblN0eWxlLHRvOnQudmlzaWJsZVN0eWxlLGlzQ2xlYW5pbmc6ITAsb25UcmFuc2l0aW9uRW5kOmV9KX0sZC5vblJldmVhbFRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVufHx0aGlzLmVtaXRFdmVudChcInJldmVhbFwiKX0sZC5nZXRIaWRlUmV2ZWFsVHJhbnNpdGlvbkVuZFByb3BlcnR5PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubGF5b3V0Lm9wdGlvbnNbdF07aWYoZS5vcGFjaXR5KXJldHVyblwib3BhY2l0eVwiO2Zvcih2YXIgaSBpbiBlKXJldHVybiBpfSxkLmhpZGU9ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVuPSEwLHRoaXMuY3NzKHtkaXNwbGF5OlwiXCJ9KTt2YXIgdD10aGlzLmxheW91dC5vcHRpb25zLGU9e30saT10aGlzLmdldEhpZGVSZXZlYWxUcmFuc2l0aW9uRW5kUHJvcGVydHkoXCJoaWRkZW5TdHlsZVwiKTtlW2ldPXRoaXMub25IaWRlVHJhbnNpdGlvbkVuZCx0aGlzLnRyYW5zaXRpb24oe2Zyb206dC52aXNpYmxlU3R5bGUsdG86dC5oaWRkZW5TdHlsZSxpc0NsZWFuaW5nOiEwLG9uVHJhbnNpdGlvbkVuZDplfSl9LGQub25IaWRlVHJhbnNpdGlvbkVuZD1mdW5jdGlvbigpe3RoaXMuaXNIaWRkZW4mJih0aGlzLmNzcyh7ZGlzcGxheTpcIm5vbmVcIn0pLHRoaXMuZW1pdEV2ZW50KFwiaGlkZVwiKSl9LGQuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuY3NzKHtwb3NpdGlvbjpcIlwiLGxlZnQ6XCJcIixyaWdodDpcIlwiLHRvcDpcIlwiLGJvdHRvbTpcIlwiLHRyYW5zaXRpb246XCJcIix0cmFuc2Zvcm06XCJcIn0pfSxvfSksZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwib3V0bGF5ZXIvb3V0bGF5ZXJcIixbXCJldi1lbWl0dGVyL2V2LWVtaXR0ZXJcIixcImdldC1zaXplL2dldC1zaXplXCIsXCJmaXp6eS11aS11dGlscy91dGlsc1wiLFwiLi9pdGVtXCJdLGZ1bmN0aW9uKGksbyxuLHMpe3JldHVybiBlKHQsaSxvLG4scyl9KTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHQscmVxdWlyZShcImV2LWVtaXR0ZXJcIikscmVxdWlyZShcImdldC1zaXplXCIpLHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSxyZXF1aXJlKFwiLi9pdGVtXCIpKTp0Lk91dGxheWVyPWUodCx0LkV2RW1pdHRlcix0LmdldFNpemUsdC5maXp6eVVJVXRpbHMsdC5PdXRsYXllci5JdGVtKX0od2luZG93LGZ1bmN0aW9uKHQsZSxpLG8sbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcyh0LGUpe3ZhciBpPW8uZ2V0UXVlcnlFbGVtZW50KHQpO2lmKCFpKXJldHVybiB2b2lkKHUmJnUuZXJyb3IoXCJCYWQgZWxlbWVudCBmb3IgXCIrdGhpcy5jb25zdHJ1Y3Rvci5uYW1lc3BhY2UrXCI6IFwiKyhpfHx0KSkpO3RoaXMuZWxlbWVudD1pLGgmJih0aGlzLiRlbGVtZW50PWgodGhpcy5lbGVtZW50KSksdGhpcy5vcHRpb25zPW8uZXh0ZW5kKHt9LHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMpLHRoaXMub3B0aW9uKGUpO3ZhciBuPSsrbDt0aGlzLmVsZW1lbnQub3V0bGF5ZXJHVUlEPW4sZltuXT10aGlzLHRoaXMuX2NyZWF0ZSgpO3ZhciBzPXRoaXMuX2dldE9wdGlvbihcImluaXRMYXlvdXRcIik7cyYmdGhpcy5sYXlvdXQoKX1mdW5jdGlvbiByKHQpe2Z1bmN0aW9uIGUoKXt0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0LnByb3RvdHlwZSksZS5wcm90b3R5cGUuY29uc3RydWN0b3I9ZSxlfWZ1bmN0aW9uIGEodCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpcmV0dXJuIHQ7dmFyIGU9dC5tYXRjaCgvKF5cXGQqXFwuP1xcZCopKFxcdyopLyksaT1lJiZlWzFdLG89ZSYmZVsyXTtpZighaS5sZW5ndGgpcmV0dXJuIDA7aT1wYXJzZUZsb2F0KGkpO3ZhciBuPW1bb118fDE7cmV0dXJuIGkqbn12YXIgdT10LmNvbnNvbGUsaD10LmpRdWVyeSxkPWZ1bmN0aW9uKCl7fSxsPTAsZj17fTtzLm5hbWVzcGFjZT1cIm91dGxheWVyXCIscy5JdGVtPW4scy5kZWZhdWx0cz17Y29udGFpbmVyU3R5bGU6e3Bvc2l0aW9uOlwicmVsYXRpdmVcIn0saW5pdExheW91dDohMCxvcmlnaW5MZWZ0OiEwLG9yaWdpblRvcDohMCxyZXNpemU6ITAscmVzaXplQ29udGFpbmVyOiEwLHRyYW5zaXRpb25EdXJhdGlvbjpcIjAuNHNcIixoaWRkZW5TdHlsZTp7b3BhY2l0eTowLHRyYW5zZm9ybTpcInNjYWxlKDAuMDAxKVwifSx2aXNpYmxlU3R5bGU6e29wYWNpdHk6MSx0cmFuc2Zvcm06XCJzY2FsZSgxKVwifX07dmFyIGM9cy5wcm90b3R5cGU7by5leHRlbmQoYyxlLnByb3RvdHlwZSksYy5vcHRpb249ZnVuY3Rpb24odCl7by5leHRlbmQodGhpcy5vcHRpb25zLHQpfSxjLl9nZXRPcHRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5jb25zdHJ1Y3Rvci5jb21wYXRPcHRpb25zW3RdO3JldHVybiBlJiZ2b2lkIDAhPT10aGlzLm9wdGlvbnNbZV0/dGhpcy5vcHRpb25zW2VdOnRoaXMub3B0aW9uc1t0XX0scy5jb21wYXRPcHRpb25zPXtpbml0TGF5b3V0OlwiaXNJbml0TGF5b3V0XCIsaG9yaXpvbnRhbDpcImlzSG9yaXpvbnRhbFwiLGxheW91dEluc3RhbnQ6XCJpc0xheW91dEluc3RhbnRcIixvcmlnaW5MZWZ0OlwiaXNPcmlnaW5MZWZ0XCIsb3JpZ2luVG9wOlwiaXNPcmlnaW5Ub3BcIixyZXNpemU6XCJpc1Jlc2l6ZUJvdW5kXCIscmVzaXplQ29udGFpbmVyOlwiaXNSZXNpemluZ0NvbnRhaW5lclwifSxjLl9jcmVhdGU9ZnVuY3Rpb24oKXt0aGlzLnJlbG9hZEl0ZW1zKCksdGhpcy5zdGFtcHM9W10sdGhpcy5zdGFtcCh0aGlzLm9wdGlvbnMuc3RhbXApLG8uZXh0ZW5kKHRoaXMuZWxlbWVudC5zdHlsZSx0aGlzLm9wdGlvbnMuY29udGFpbmVyU3R5bGUpO3ZhciB0PXRoaXMuX2dldE9wdGlvbihcInJlc2l6ZVwiKTt0JiZ0aGlzLmJpbmRSZXNpemUoKX0sYy5yZWxvYWRJdGVtcz1mdW5jdGlvbigpe3RoaXMuaXRlbXM9dGhpcy5faXRlbWl6ZSh0aGlzLmVsZW1lbnQuY2hpbGRyZW4pfSxjLl9pdGVtaXplPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzKHQpLGk9dGhpcy5jb25zdHJ1Y3Rvci5JdGVtLG89W10sbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcz1lW25dLHI9bmV3IGkocyx0aGlzKTtvLnB1c2gocil9cmV0dXJuIG99LGMuX2ZpbHRlckZpbmRJdGVtRWxlbWVudHM9ZnVuY3Rpb24odCl7cmV0dXJuIG8uZmlsdGVyRmluZEVsZW1lbnRzKHQsdGhpcy5vcHRpb25zLml0ZW1TZWxlY3Rvcil9LGMuZ2V0SXRlbUVsZW1lbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXRlbXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmVsZW1lbnR9KX0sYy5sYXlvdXQ9ZnVuY3Rpb24oKXt0aGlzLl9yZXNldExheW91dCgpLHRoaXMuX21hbmFnZVN0YW1wcygpO3ZhciB0PXRoaXMuX2dldE9wdGlvbihcImxheW91dEluc3RhbnRcIiksZT12b2lkIDAhPT10P3Q6IXRoaXMuX2lzTGF5b3V0SW5pdGVkO3RoaXMubGF5b3V0SXRlbXModGhpcy5pdGVtcyxlKSx0aGlzLl9pc0xheW91dEluaXRlZD0hMH0sYy5faW5pdD1jLmxheW91dCxjLl9yZXNldExheW91dD1mdW5jdGlvbigpe3RoaXMuZ2V0U2l6ZSgpfSxjLmdldFNpemU9ZnVuY3Rpb24oKXt0aGlzLnNpemU9aSh0aGlzLmVsZW1lbnQpfSxjLl9nZXRNZWFzdXJlbWVudD1mdW5jdGlvbih0LGUpe3ZhciBvLG49dGhpcy5vcHRpb25zW3RdO24/KFwic3RyaW5nXCI9PXR5cGVvZiBuP289dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Iobik6biBpbnN0YW5jZW9mIEhUTUxFbGVtZW50JiYobz1uKSx0aGlzW3RdPW8/aShvKVtlXTpuKTp0aGlzW3RdPTB9LGMubGF5b3V0SXRlbXM9ZnVuY3Rpb24odCxlKXt0PXRoaXMuX2dldEl0ZW1zRm9yTGF5b3V0KHQpLHRoaXMuX2xheW91dEl0ZW1zKHQsZSksdGhpcy5fcG9zdExheW91dCgpfSxjLl9nZXRJdGVtc0ZvckxheW91dD1mdW5jdGlvbih0KXtyZXR1cm4gdC5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIXQuaXNJZ25vcmVkfSl9LGMuX2xheW91dEl0ZW1zPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fZW1pdENvbXBsZXRlT25JdGVtcyhcImxheW91dFwiLHQpLHQmJnQubGVuZ3RoKXt2YXIgaT1bXTt0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG89dGhpcy5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKHQpO28uaXRlbT10LG8uaXNJbnN0YW50PWV8fHQuaXNMYXlvdXRJbnN0YW50LGkucHVzaChvKX0sdGhpcyksdGhpcy5fcHJvY2Vzc0xheW91dFF1ZXVlKGkpfX0sYy5fZ2V0SXRlbUxheW91dFBvc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJue3g6MCx5OjB9fSxjLl9wcm9jZXNzTGF5b3V0UXVldWU9ZnVuY3Rpb24odCl7dGhpcy51cGRhdGVTdGFnZ2VyKCksdC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7dGhpcy5fcG9zaXRpb25JdGVtKHQuaXRlbSx0LngsdC55LHQuaXNJbnN0YW50LGUpfSx0aGlzKX0sYy51cGRhdGVTdGFnZ2VyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLnN0YWdnZXI7cmV0dXJuIG51bGw9PT10fHx2b2lkIDA9PT10P3ZvaWQodGhpcy5zdGFnZ2VyPTApOih0aGlzLnN0YWdnZXI9YSh0KSx0aGlzLnN0YWdnZXIpfSxjLl9wb3NpdGlvbkl0ZW09ZnVuY3Rpb24odCxlLGksbyxuKXtvP3QuZ29UbyhlLGkpOih0LnN0YWdnZXIobip0aGlzLnN0YWdnZXIpLHQubW92ZVRvKGUsaSkpfSxjLl9wb3N0TGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy5yZXNpemVDb250YWluZXIoKX0sYy5yZXNpemVDb250YWluZXI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9nZXRPcHRpb24oXCJyZXNpemVDb250YWluZXJcIik7aWYodCl7dmFyIGU9dGhpcy5fZ2V0Q29udGFpbmVyU2l6ZSgpO2UmJih0aGlzLl9zZXRDb250YWluZXJNZWFzdXJlKGUud2lkdGgsITApLHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUoZS5oZWlnaHQsITEpKX19LGMuX2dldENvbnRhaW5lclNpemU9ZCxjLl9zZXRDb250YWluZXJNZWFzdXJlPWZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwIT09dCl7dmFyIGk9dGhpcy5zaXplO2kuaXNCb3JkZXJCb3gmJih0Kz1lP2kucGFkZGluZ0xlZnQraS5wYWRkaW5nUmlnaHQraS5ib3JkZXJMZWZ0V2lkdGgraS5ib3JkZXJSaWdodFdpZHRoOmkucGFkZGluZ0JvdHRvbStpLnBhZGRpbmdUb3AraS5ib3JkZXJUb3BXaWR0aCtpLmJvcmRlckJvdHRvbVdpZHRoKSx0PU1hdGgubWF4KHQsMCksdGhpcy5lbGVtZW50LnN0eWxlW2U/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJdPXQrXCJweFwifX0sYy5fZW1pdENvbXBsZXRlT25JdGVtcz1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIGkoKXtuLmRpc3BhdGNoRXZlbnQodCtcIkNvbXBsZXRlXCIsbnVsbCxbZV0pfWZ1bmN0aW9uIG8oKXtyKysscj09cyYmaSgpfXZhciBuPXRoaXMscz1lLmxlbmd0aDtpZighZXx8IXMpcmV0dXJuIHZvaWQgaSgpO3ZhciByPTA7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uub25jZSh0LG8pfSl9LGMuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbih0LGUsaSl7dmFyIG89ZT9bZV0uY29uY2F0KGkpOmk7aWYodGhpcy5lbWl0RXZlbnQodCxvKSxoKWlmKHRoaXMuJGVsZW1lbnQ9dGhpcy4kZWxlbWVudHx8aCh0aGlzLmVsZW1lbnQpLGUpe3ZhciBuPWguRXZlbnQoZSk7bi50eXBlPXQsdGhpcy4kZWxlbWVudC50cmlnZ2VyKG4saSl9ZWxzZSB0aGlzLiRlbGVtZW50LnRyaWdnZXIodCxpKX0sYy5pZ25vcmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJdGVtKHQpO2UmJihlLmlzSWdub3JlZD0hMCl9LGMudW5pZ25vcmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJdGVtKHQpO2UmJmRlbGV0ZSBlLmlzSWdub3JlZH0sYy5zdGFtcD1mdW5jdGlvbih0KXt0PXRoaXMuX2ZpbmQodCksdCYmKHRoaXMuc3RhbXBzPXRoaXMuc3RhbXBzLmNvbmNhdCh0KSx0LmZvckVhY2godGhpcy5pZ25vcmUsdGhpcykpfSxjLnVuc3RhbXA9ZnVuY3Rpb24odCl7dD10aGlzLl9maW5kKHQpLHQmJnQuZm9yRWFjaChmdW5jdGlvbih0KXtvLnJlbW92ZUZyb20odGhpcy5zdGFtcHMsdCksdGhpcy51bmlnbm9yZSh0KX0sdGhpcyl9LGMuX2ZpbmQ9ZnVuY3Rpb24odCl7aWYodClyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCkpLHQ9by5tYWtlQXJyYXkodCl9LGMuX21hbmFnZVN0YW1wcz1mdW5jdGlvbigpe3RoaXMuc3RhbXBzJiZ0aGlzLnN0YW1wcy5sZW5ndGgmJih0aGlzLl9nZXRCb3VuZGluZ1JlY3QoKSx0aGlzLnN0YW1wcy5mb3JFYWNoKHRoaXMuX21hbmFnZVN0YW1wLHRoaXMpKX0sYy5fZ2V0Qm91bmRpbmdSZWN0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGU9dGhpcy5zaXplO3RoaXMuX2JvdW5kaW5nUmVjdD17bGVmdDp0LmxlZnQrZS5wYWRkaW5nTGVmdCtlLmJvcmRlckxlZnRXaWR0aCx0b3A6dC50b3ArZS5wYWRkaW5nVG9wK2UuYm9yZGVyVG9wV2lkdGgscmlnaHQ6dC5yaWdodC0oZS5wYWRkaW5nUmlnaHQrZS5ib3JkZXJSaWdodFdpZHRoKSxib3R0b206dC5ib3R0b20tKGUucGFkZGluZ0JvdHRvbStlLmJvcmRlckJvdHRvbVdpZHRoKX19LGMuX21hbmFnZVN0YW1wPWQsYy5fZ2V0RWxlbWVudE9mZnNldD1mdW5jdGlvbih0KXt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89dGhpcy5fYm91bmRpbmdSZWN0LG49aSh0KSxzPXtsZWZ0OmUubGVmdC1vLmxlZnQtbi5tYXJnaW5MZWZ0LHRvcDplLnRvcC1vLnRvcC1uLm1hcmdpblRvcCxyaWdodDpvLnJpZ2h0LWUucmlnaHQtbi5tYXJnaW5SaWdodCxib3R0b206by5ib3R0b20tZS5ib3R0b20tbi5tYXJnaW5Cb3R0b219O3JldHVybiBzfSxjLmhhbmRsZUV2ZW50PW8uaGFuZGxlRXZlbnQsYy5iaW5kUmVzaXplPWZ1bmN0aW9uKCl7dC5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcyksdGhpcy5pc1Jlc2l6ZUJvdW5kPSEwfSxjLnVuYmluZFJlc2l6ZT1mdW5jdGlvbigpe3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMpLHRoaXMuaXNSZXNpemVCb3VuZD0hMX0sYy5vbnJlc2l6ZT1mdW5jdGlvbigpe3RoaXMucmVzaXplKCl9LG8uZGVib3VuY2VNZXRob2QocyxcIm9ucmVzaXplXCIsMTAwKSxjLnJlc2l6ZT1mdW5jdGlvbigpe3RoaXMuaXNSZXNpemVCb3VuZCYmdGhpcy5uZWVkc1Jlc2l6ZUxheW91dCgpJiZ0aGlzLmxheW91dCgpfSxjLm5lZWRzUmVzaXplTGF5b3V0PWZ1bmN0aW9uKCl7dmFyIHQ9aSh0aGlzLmVsZW1lbnQpLGU9dGhpcy5zaXplJiZ0O3JldHVybiBlJiZ0LmlubmVyV2lkdGghPT10aGlzLnNpemUuaW5uZXJXaWR0aH0sYy5hZGRJdGVtcz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pdGVtaXplKHQpO3JldHVybiBlLmxlbmd0aCYmKHRoaXMuaXRlbXM9dGhpcy5pdGVtcy5jb25jYXQoZSkpLGV9LGMuYXBwZW5kZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hZGRJdGVtcyh0KTtlLmxlbmd0aCYmKHRoaXMubGF5b3V0SXRlbXMoZSwhMCksdGhpcy5yZXZlYWwoZSkpfSxjLnByZXBlbmRlZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pdGVtaXplKHQpO2lmKGUubGVuZ3RoKXt2YXIgaT10aGlzLml0ZW1zLnNsaWNlKDApO3RoaXMuaXRlbXM9ZS5jb25jYXQoaSksdGhpcy5fcmVzZXRMYXlvdXQoKSx0aGlzLl9tYW5hZ2VTdGFtcHMoKSx0aGlzLmxheW91dEl0ZW1zKGUsITApLHRoaXMucmV2ZWFsKGUpLHRoaXMubGF5b3V0SXRlbXMoaSl9fSxjLnJldmVhbD1mdW5jdGlvbih0KXtpZih0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKFwicmV2ZWFsXCIsdCksdCYmdC5sZW5ndGgpe3ZhciBlPXRoaXMudXBkYXRlU3RhZ2dlcigpO3QuZm9yRWFjaChmdW5jdGlvbih0LGkpe3Quc3RhZ2dlcihpKmUpLHQucmV2ZWFsKCl9KX19LGMuaGlkZT1mdW5jdGlvbih0KXtpZih0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKFwiaGlkZVwiLHQpLHQmJnQubGVuZ3RoKXt2YXIgZT10aGlzLnVwZGF0ZVN0YWdnZXIoKTt0LmZvckVhY2goZnVuY3Rpb24odCxpKXt0LnN0YWdnZXIoaSplKSx0LmhpZGUoKX0pfX0sYy5yZXZlYWxJdGVtRWxlbWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJdGVtcyh0KTt0aGlzLnJldmVhbChlKX0sYy5oaWRlSXRlbUVsZW1lbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SXRlbXModCk7dGhpcy5oaWRlKGUpfSxjLmdldEl0ZW09ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0aGlzLml0ZW1zLmxlbmd0aDtlKyspe3ZhciBpPXRoaXMuaXRlbXNbZV07aWYoaS5lbGVtZW50PT10KXJldHVybiBpfX0sYy5nZXRJdGVtcz1mdW5jdGlvbih0KXt0PW8ubWFrZUFycmF5KHQpO3ZhciBlPVtdO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5nZXRJdGVtKHQpO2kmJmUucHVzaChpKX0sdGhpcyksZX0sYy5yZW1vdmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRJdGVtcyh0KTt0aGlzLl9lbWl0Q29tcGxldGVPbkl0ZW1zKFwicmVtb3ZlXCIsZSksZSYmZS5sZW5ndGgmJmUuZm9yRWFjaChmdW5jdGlvbih0KXt0LnJlbW92ZSgpLG8ucmVtb3ZlRnJvbSh0aGlzLml0ZW1zLHQpfSx0aGlzKX0sYy5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbGVtZW50LnN0eWxlO3QuaGVpZ2h0PVwiXCIsdC5wb3NpdGlvbj1cIlwiLHQud2lkdGg9XCJcIix0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24odCl7dC5kZXN0cm95KCl9KSx0aGlzLnVuYmluZFJlc2l6ZSgpO3ZhciBlPXRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7ZGVsZXRlIGZbZV0sZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQsaCYmaC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSl9LHMuZGF0YT1mdW5jdGlvbih0KXt0PW8uZ2V0UXVlcnlFbGVtZW50KHQpO3ZhciBlPXQmJnQub3V0bGF5ZXJHVUlEO3JldHVybiBlJiZmW2VdfSxzLmNyZWF0ZT1mdW5jdGlvbih0LGUpe3ZhciBpPXIocyk7cmV0dXJuIGkuZGVmYXVsdHM9by5leHRlbmQoe30scy5kZWZhdWx0cyksby5leHRlbmQoaS5kZWZhdWx0cyxlKSxpLmNvbXBhdE9wdGlvbnM9by5leHRlbmQoe30scy5jb21wYXRPcHRpb25zKSxpLm5hbWVzcGFjZT10LGkuZGF0YT1zLmRhdGEsaS5JdGVtPXIobiksby5odG1sSW5pdChpLHQpLGgmJmguYnJpZGdldCYmaC5icmlkZ2V0KHQsaSksaX07dmFyIG09e21zOjEsczoxZTN9O3JldHVybiBzLkl0ZW09bixzfSksZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvaXRlbVwiLFtcIm91dGxheWVyL291dGxheWVyXCJdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcIm91dGxheWVyXCIpKToodC5Jc290b3BlPXQuSXNvdG9wZXx8e30sdC5Jc290b3BlLkl0ZW09ZSh0Lk91dGxheWVyKSl9KHdpbmRvdyxmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKCl7dC5JdGVtLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgaT1lLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQuSXRlbS5wcm90b3R5cGUpLG89aS5fY3JlYXRlO2kuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuaWQ9dGhpcy5sYXlvdXQuaXRlbUdVSUQrKyxvLmNhbGwodGhpcyksdGhpcy5zb3J0RGF0YT17fX0saS51cGRhdGVTb3J0RGF0YT1mdW5jdGlvbigpe2lmKCF0aGlzLmlzSWdub3JlZCl7dGhpcy5zb3J0RGF0YS5pZD10aGlzLmlkLHRoaXMuc29ydERhdGFbXCJvcmlnaW5hbC1vcmRlclwiXT10aGlzLmlkLHRoaXMuc29ydERhdGEucmFuZG9tPU1hdGgucmFuZG9tKCk7dmFyIHQ9dGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YSxlPXRoaXMubGF5b3V0Ll9zb3J0ZXJzO2Zvcih2YXIgaSBpbiB0KXt2YXIgbz1lW2ldO3RoaXMuc29ydERhdGFbaV09byh0aGlzLmVsZW1lbnQsdGhpcyl9fX07dmFyIG49aS5kZXN0cm95O3JldHVybiBpLmRlc3Ryb3k9ZnVuY3Rpb24oKXtuLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLmNzcyh7ZGlzcGxheTpcIlwifSl9LGV9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZVwiLFtcImdldC1zaXplL2dldC1zaXplXCIsXCJvdXRsYXllci9vdXRsYXllclwiXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSxyZXF1aXJlKFwib3V0bGF5ZXJcIikpOih0Lklzb3RvcGU9dC5Jc290b3BlfHx7fSx0Lklzb3RvcGUuTGF5b3V0TW9kZT1lKHQuZ2V0U2l6ZSx0Lk91dGxheWVyKSl9KHdpbmRvdyxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7dGhpcy5pc290b3BlPXQsdCYmKHRoaXMub3B0aW9ucz10Lm9wdGlvbnNbdGhpcy5uYW1lc3BhY2VdLHRoaXMuZWxlbWVudD10LmVsZW1lbnQsdGhpcy5pdGVtcz10LmZpbHRlcmVkSXRlbXMsdGhpcy5zaXplPXQuc2l6ZSl9dmFyIG89aS5wcm90b3R5cGUsbj1bXCJfcmVzZXRMYXlvdXRcIixcIl9nZXRJdGVtTGF5b3V0UG9zaXRpb25cIixcIl9tYW5hZ2VTdGFtcFwiLFwiX2dldENvbnRhaW5lclNpemVcIixcIl9nZXRFbGVtZW50T2Zmc2V0XCIsXCJuZWVkc1Jlc2l6ZUxheW91dFwiLFwiX2dldE9wdGlvblwiXTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe29bdF09ZnVuY3Rpb24oKXtyZXR1cm4gZS5wcm90b3R5cGVbdF0uYXBwbHkodGhpcy5pc290b3BlLGFyZ3VtZW50cyl9fSksby5uZWVkc1ZlcnRpY2FsUmVzaXplTGF5b3V0PWZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzLmlzb3RvcGUuZWxlbWVudCksaT10aGlzLmlzb3RvcGUuc2l6ZSYmZTtyZXR1cm4gaSYmZS5pbm5lckhlaWdodCE9dGhpcy5pc290b3BlLnNpemUuaW5uZXJIZWlnaHR9LG8uX2dldE1lYXN1cmVtZW50PWZ1bmN0aW9uKCl7dGhpcy5pc290b3BlLl9nZXRNZWFzdXJlbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG8uZ2V0Q29sdW1uV2lkdGg9ZnVuY3Rpb24oKXt0aGlzLmdldFNlZ21lbnRTaXplKFwiY29sdW1uXCIsXCJXaWR0aFwiKX0sby5nZXRSb3dIZWlnaHQ9ZnVuY3Rpb24oKXt0aGlzLmdldFNlZ21lbnRTaXplKFwicm93XCIsXCJIZWlnaHRcIil9LG8uZ2V0U2VnbWVudFNpemU9ZnVuY3Rpb24odCxlKXt2YXIgaT10K2Usbz1cIm91dGVyXCIrZTtpZih0aGlzLl9nZXRNZWFzdXJlbWVudChpLG8pLCF0aGlzW2ldKXt2YXIgbj10aGlzLmdldEZpcnN0SXRlbVNpemUoKTt0aGlzW2ldPW4mJm5bb118fHRoaXMuaXNvdG9wZS5zaXplW1wiaW5uZXJcIitlXX19LG8uZ2V0Rmlyc3RJdGVtU2l6ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXMuaXNvdG9wZS5maWx0ZXJlZEl0ZW1zWzBdO3JldHVybiBlJiZlLmVsZW1lbnQmJnQoZS5lbGVtZW50KX0sby5sYXlvdXQ9ZnVuY3Rpb24oKXt0aGlzLmlzb3RvcGUubGF5b3V0LmFwcGx5KHRoaXMuaXNvdG9wZSxhcmd1bWVudHMpfSxvLmdldFNpemU9ZnVuY3Rpb24oKXt0aGlzLmlzb3RvcGUuZ2V0U2l6ZSgpLHRoaXMuc2l6ZT10aGlzLmlzb3RvcGUuc2l6ZX0saS5tb2Rlcz17fSxpLmNyZWF0ZT1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXtpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gbi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShvKSxuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1uLGUmJihuLm9wdGlvbnM9ZSksbi5wcm90b3R5cGUubmFtZXNwYWNlPXQsaS5tb2Rlc1t0XT1uLG59LGl9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJtYXNvbnJ5LWxheW91dC9tYXNvbnJ5XCIsW1wib3V0bGF5ZXIvb3V0bGF5ZXJcIixcImdldC1zaXplL2dldC1zaXplXCJdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcIm91dGxheWVyXCIpLHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSk6dC5NYXNvbnJ5PWUodC5PdXRsYXllcix0LmdldFNpemUpfSh3aW5kb3csZnVuY3Rpb24odCxlKXt2YXIgaT10LmNyZWF0ZShcIm1hc29ucnlcIik7aS5jb21wYXRPcHRpb25zLmZpdFdpZHRoPVwiaXNGaXRXaWR0aFwiO3ZhciBvPWkucHJvdG90eXBlO3JldHVybiBvLl9yZXNldExheW91dD1mdW5jdGlvbigpe3RoaXMuZ2V0U2l6ZSgpLHRoaXMuX2dldE1lYXN1cmVtZW50KFwiY29sdW1uV2lkdGhcIixcIm91dGVyV2lkdGhcIiksdGhpcy5fZ2V0TWVhc3VyZW1lbnQoXCJndXR0ZXJcIixcIm91dGVyV2lkdGhcIiksdGhpcy5tZWFzdXJlQ29sdW1ucygpLHRoaXMuY29sWXM9W107Zm9yKHZhciB0PTA7dDx0aGlzLmNvbHM7dCsrKXRoaXMuY29sWXMucHVzaCgwKTt0aGlzLm1heFk9MCx0aGlzLmhvcml6b250YWxDb2xJbmRleD0wfSxvLm1lYXN1cmVDb2x1bW5zPWZ1bmN0aW9uKCl7aWYodGhpcy5nZXRDb250YWluZXJXaWR0aCgpLCF0aGlzLmNvbHVtbldpZHRoKXt2YXIgdD10aGlzLml0ZW1zWzBdLGk9dCYmdC5lbGVtZW50O3RoaXMuY29sdW1uV2lkdGg9aSYmZShpKS5vdXRlcldpZHRofHx0aGlzLmNvbnRhaW5lcldpZHRofXZhciBvPXRoaXMuY29sdW1uV2lkdGgrPXRoaXMuZ3V0dGVyLG49dGhpcy5jb250YWluZXJXaWR0aCt0aGlzLmd1dHRlcixzPW4vbyxyPW8tbiVvLGE9ciYmcjwxP1wicm91bmRcIjpcImZsb29yXCI7cz1NYXRoW2FdKHMpLHRoaXMuY29scz1NYXRoLm1heChzLDEpfSxvLmdldENvbnRhaW5lcldpZHRoPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0T3B0aW9uKFwiZml0V2lkdGhcIiksaT10P3RoaXMuZWxlbWVudC5wYXJlbnROb2RlOnRoaXMuZWxlbWVudCxvPWUoaSk7dGhpcy5jb250YWluZXJXaWR0aD1vJiZvLmlubmVyV2lkdGh9LG8uX2dldEl0ZW1MYXlvdXRQb3NpdGlvbj1mdW5jdGlvbih0KXt0LmdldFNpemUoKTt2YXIgZT10LnNpemUub3V0ZXJXaWR0aCV0aGlzLmNvbHVtbldpZHRoLGk9ZSYmZTwxP1wicm91bmRcIjpcImNlaWxcIixvPU1hdGhbaV0odC5zaXplLm91dGVyV2lkdGgvdGhpcy5jb2x1bW5XaWR0aCk7bz1NYXRoLm1pbihvLHRoaXMuY29scyk7Zm9yKHZhciBuPXRoaXMub3B0aW9ucy5ob3Jpem9udGFsT3JkZXI/XCJfZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uXCI6XCJfZ2V0VG9wQ29sUG9zaXRpb25cIixzPXRoaXNbbl0obyx0KSxyPXt4OnRoaXMuY29sdW1uV2lkdGgqcy5jb2wseTpzLnl9LGE9cy55K3Quc2l6ZS5vdXRlckhlaWdodCx1PW8rcy5jb2wsaD1zLmNvbDtoPHU7aCsrKXRoaXMuY29sWXNbaF09YTtyZXR1cm4gcn0sby5fZ2V0VG9wQ29sUG9zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZ2V0VG9wQ29sR3JvdXAodCksaT1NYXRoLm1pbi5hcHBseShNYXRoLGUpO3JldHVybntjb2w6ZS5pbmRleE9mKGkpLHk6aX19LG8uX2dldFRvcENvbEdyb3VwPWZ1bmN0aW9uKHQpe2lmKHQ8MilyZXR1cm4gdGhpcy5jb2xZcztmb3IodmFyIGU9W10saT10aGlzLmNvbHMrMS10LG89MDtvPGk7bysrKWVbb109dGhpcy5fZ2V0Q29sR3JvdXBZKG8sdCk7cmV0dXJuIGV9LG8uX2dldENvbEdyb3VwWT1mdW5jdGlvbih0LGUpe2lmKGU8MilyZXR1cm4gdGhpcy5jb2xZc1t0XTt2YXIgaT10aGlzLmNvbFlzLnNsaWNlKHQsdCtlKTtyZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCxpKX0sby5fZ2V0SG9yaXpvbnRhbENvbFBvc2l0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIGk9dGhpcy5ob3Jpem9udGFsQ29sSW5kZXgldGhpcy5jb2xzLG89dD4xJiZpK3Q+dGhpcy5jb2xzO2k9bz8wOmk7dmFyIG49ZS5zaXplLm91dGVyV2lkdGgmJmUuc2l6ZS5vdXRlckhlaWdodDtyZXR1cm4gdGhpcy5ob3Jpem9udGFsQ29sSW5kZXg9bj9pK3Q6dGhpcy5ob3Jpem9udGFsQ29sSW5kZXgse2NvbDppLHk6dGhpcy5fZ2V0Q29sR3JvdXBZKGksdCl9fSxvLl9tYW5hZ2VTdGFtcD1mdW5jdGlvbih0KXt2YXIgaT1lKHQpLG89dGhpcy5fZ2V0RWxlbWVudE9mZnNldCh0KSxuPXRoaXMuX2dldE9wdGlvbihcIm9yaWdpbkxlZnRcIikscz1uP28ubGVmdDpvLnJpZ2h0LHI9cytpLm91dGVyV2lkdGgsYT1NYXRoLmZsb29yKHMvdGhpcy5jb2x1bW5XaWR0aCk7YT1NYXRoLm1heCgwLGEpO3ZhciB1PU1hdGguZmxvb3Ioci90aGlzLmNvbHVtbldpZHRoKTt1LT1yJXRoaXMuY29sdW1uV2lkdGg/MDoxLHU9TWF0aC5taW4odGhpcy5jb2xzLTEsdSk7Zm9yKHZhciBoPXRoaXMuX2dldE9wdGlvbihcIm9yaWdpblRvcFwiKSxkPShoP28udG9wOm8uYm90dG9tKStpLm91dGVySGVpZ2h0LGw9YTtsPD11O2wrKyl0aGlzLmNvbFlzW2xdPU1hdGgubWF4KGQsdGhpcy5jb2xZc1tsXSl9LG8uX2dldENvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXt0aGlzLm1heFk9TWF0aC5tYXguYXBwbHkoTWF0aCx0aGlzLmNvbFlzKTt2YXIgdD17aGVpZ2h0OnRoaXMubWF4WX07cmV0dXJuIHRoaXMuX2dldE9wdGlvbihcImZpdFdpZHRoXCIpJiYodC53aWR0aD10aGlzLl9nZXRDb250YWluZXJGaXRXaWR0aCgpKSx0fSxvLl9nZXRDb250YWluZXJGaXRXaWR0aD1mdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9dGhpcy5jb2xzOy0tZSYmMD09PXRoaXMuY29sWXNbZV07KXQrKztyZXR1cm4odGhpcy5jb2xzLXQpKnRoaXMuY29sdW1uV2lkdGgtdGhpcy5ndXR0ZXJ9LG8ubmVlZHNSZXNpemVMYXlvdXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvbnRhaW5lcldpZHRoO3JldHVybiB0aGlzLmdldENvbnRhaW5lcldpZHRoKCksdCE9dGhpcy5jb250YWluZXJXaWR0aH0saX0pLGZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIsW1wiLi4vbGF5b3V0LW1vZGVcIixcIm1hc29ucnktbGF5b3V0L21hc29ucnlcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwiLi4vbGF5b3V0LW1vZGVcIikscmVxdWlyZShcIm1hc29ucnktbGF5b3V0XCIpKTplKHQuSXNvdG9wZS5MYXlvdXRNb2RlLHQuTWFzb25yeSl9KHdpbmRvdyxmdW5jdGlvbih0LGUpe1widXNlIHN0cmljdFwiO3ZhciBpPXQuY3JlYXRlKFwibWFzb25yeVwiKSxvPWkucHJvdG90eXBlLG49e19nZXRFbGVtZW50T2Zmc2V0OiEwLGxheW91dDohMCxfZ2V0TWVhc3VyZW1lbnQ6ITB9O2Zvcih2YXIgcyBpbiBlLnByb3RvdHlwZSluW3NdfHwob1tzXT1lLnByb3RvdHlwZVtzXSk7dmFyIHI9by5tZWFzdXJlQ29sdW1ucztvLm1lYXN1cmVDb2x1bW5zPWZ1bmN0aW9uKCl7dGhpcy5pdGVtcz10aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtcyxyLmNhbGwodGhpcyl9O3ZhciBhPW8uX2dldE9wdGlvbjtyZXR1cm4gby5fZ2V0T3B0aW9uPWZ1bmN0aW9uKHQpe3JldHVyblwiZml0V2lkdGhcIj09dD92b2lkIDAhPT10aGlzLm9wdGlvbnMuaXNGaXRXaWR0aD90aGlzLm9wdGlvbnMuaXNGaXRXaWR0aDp0aGlzLm9wdGlvbnMuZml0V2lkdGg6YS5hcHBseSh0aGlzLmlzb3RvcGUsYXJndW1lbnRzKX0saX0pLGZ1bmN0aW9uKHQsZSl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9maXQtcm93c1wiLFtcIi4uL2xheW91dC1tb2RlXCJdLGUpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcIi4uL2xheW91dC1tb2RlXCIpKTplKHQuSXNvdG9wZS5MYXlvdXRNb2RlKX0od2luZG93LGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBlPXQuY3JlYXRlKFwiZml0Um93c1wiKSxpPWUucHJvdG90eXBlO3JldHVybiBpLl9yZXNldExheW91dD1mdW5jdGlvbigpe3RoaXMueD0wLHRoaXMueT0wLHRoaXMubWF4WT0wLHRoaXMuX2dldE1lYXN1cmVtZW50KFwiZ3V0dGVyXCIsXCJvdXRlcldpZHRoXCIpfSxpLl9nZXRJdGVtTGF5b3V0UG9zaXRpb249ZnVuY3Rpb24odCl7dC5nZXRTaXplKCk7dmFyIGU9dC5zaXplLm91dGVyV2lkdGgrdGhpcy5ndXR0ZXIsaT10aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoK3RoaXMuZ3V0dGVyOzAhPT10aGlzLngmJmUrdGhpcy54PmkmJih0aGlzLng9MCx0aGlzLnk9dGhpcy5tYXhZKTt2YXIgbz17eDp0aGlzLngseTp0aGlzLnl9O3JldHVybiB0aGlzLm1heFk9TWF0aC5tYXgodGhpcy5tYXhZLHRoaXMueSt0LnNpemUub3V0ZXJIZWlnaHQpLHRoaXMueCs9ZSxvfSxpLl9nZXRDb250YWluZXJTaXplPWZ1bmN0aW9uKCl7cmV0dXJue2hlaWdodDp0aGlzLm1heFl9fSxlfSksZnVuY3Rpb24odCxlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCIsW1wiLi4vbGF5b3V0LW1vZGVcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwiLi4vbGF5b3V0LW1vZGVcIikpOmUodC5Jc290b3BlLkxheW91dE1vZGUpfSh3aW5kb3csZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9dC5jcmVhdGUoXCJ2ZXJ0aWNhbFwiLHtob3Jpem9udGFsQWxpZ25tZW50OjB9KSxpPWUucHJvdG90eXBlO3JldHVybiBpLl9yZXNldExheW91dD1mdW5jdGlvbigpe3RoaXMueT0wfSxpLl9nZXRJdGVtTGF5b3V0UG9zaXRpb249ZnVuY3Rpb24odCl7dC5nZXRTaXplKCk7dmFyIGU9KHRoaXMuaXNvdG9wZS5zaXplLmlubmVyV2lkdGgtdC5zaXplLm91dGVyV2lkdGgpKnRoaXMub3B0aW9ucy5ob3Jpem9udGFsQWxpZ25tZW50LGk9dGhpcy55O3JldHVybiB0aGlzLnkrPXQuc2l6ZS5vdXRlckhlaWdodCx7eDplLHk6aX19LGkuX2dldENvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXtyZXR1cm57aGVpZ2h0OnRoaXMueX19LGV9KSxmdW5jdGlvbih0LGUpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wib3V0bGF5ZXIvb3V0bGF5ZXJcIixcImdldC1zaXplL2dldC1zaXplXCIsXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yL21hdGNoZXMtc2VsZWN0b3JcIixcImZpenp5LXVpLXV0aWxzL3V0aWxzXCIsXCJpc290b3BlLWxheW91dC9qcy9pdGVtXCIsXCJpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZVwiLFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL21hc29ucnlcIixcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9maXQtcm93c1wiLFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCJdLGZ1bmN0aW9uKGksbyxuLHMscixhKXtyZXR1cm4gZSh0LGksbyxuLHMscixhKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWUodCxyZXF1aXJlKFwib3V0bGF5ZXJcIikscmVxdWlyZShcImdldC1zaXplXCIpLHJlcXVpcmUoXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yXCIpLHJlcXVpcmUoXCJmaXp6eS11aS11dGlsc1wiKSxyZXF1aXJlKFwiaXNvdG9wZS1sYXlvdXQvanMvaXRlbVwiKSxyZXF1aXJlKFwiaXNvdG9wZS1sYXlvdXQvanMvbGF5b3V0LW1vZGVcIikscmVxdWlyZShcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIpLHJlcXVpcmUoXCJpc290b3BlLWxheW91dC9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3NcIikscmVxdWlyZShcImlzb3RvcGUtbGF5b3V0L2pzL2xheW91dC1tb2Rlcy92ZXJ0aWNhbFwiKSk6dC5Jc290b3BlPWUodCx0Lk91dGxheWVyLHQuZ2V0U2l6ZSx0Lm1hdGNoZXNTZWxlY3Rvcix0LmZpenp5VUlVdGlscyx0Lklzb3RvcGUuSXRlbSx0Lklzb3RvcGUuTGF5b3V0TW9kZSl9KHdpbmRvdyxmdW5jdGlvbih0LGUsaSxvLG4scyxyKXtmdW5jdGlvbiBhKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKGksbyl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBzPXRbbl0scj1pLnNvcnREYXRhW3NdLGE9by5zb3J0RGF0YVtzXTtpZihyPmF8fHI8YSl7dmFyIHU9dm9pZCAwIT09ZVtzXT9lW3NdOmUsaD11PzE6LTE7cmV0dXJuKHI+YT8xOi0xKSpofX1yZXR1cm4gMH19dmFyIHU9dC5qUXVlcnksaD1TdHJpbmcucHJvdG90eXBlLnRyaW0/ZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbSgpfTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfSxkPWUuY3JlYXRlKFwiaXNvdG9wZVwiLHtsYXlvdXRNb2RlOlwibWFzb25yeVwiLGlzSlF1ZXJ5RmlsdGVyaW5nOiEwLHNvcnRBc2NlbmRpbmc6ITB9KTtkLkl0ZW09cyxkLkxheW91dE1vZGU9cjt2YXIgbD1kLnByb3RvdHlwZTtsLl9jcmVhdGU9ZnVuY3Rpb24oKXt0aGlzLml0ZW1HVUlEPTAsdGhpcy5fc29ydGVycz17fSx0aGlzLl9nZXRTb3J0ZXJzKCksZS5wcm90b3R5cGUuX2NyZWF0ZS5jYWxsKHRoaXMpLHRoaXMubW9kZXM9e30sdGhpcy5maWx0ZXJlZEl0ZW1zPXRoaXMuaXRlbXMsdGhpcy5zb3J0SGlzdG9yeT1bXCJvcmlnaW5hbC1vcmRlclwiXTtmb3IodmFyIHQgaW4gci5tb2Rlcyl0aGlzLl9pbml0TGF5b3V0TW9kZSh0KX0sbC5yZWxvYWRJdGVtcz1mdW5jdGlvbigpe3RoaXMuaXRlbUdVSUQ9MCxlLnByb3RvdHlwZS5yZWxvYWRJdGVtcy5jYWxsKHRoaXMpfSxsLl9pdGVtaXplPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWUucHJvdG90eXBlLl9pdGVtaXplLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBvPXRbaV07by5pZD10aGlzLml0ZW1HVUlEKyt9cmV0dXJuIHRoaXMuX3VwZGF0ZUl0ZW1zU29ydERhdGEodCksdH0sbC5faW5pdExheW91dE1vZGU9ZnVuY3Rpb24odCl7dmFyIGU9ci5tb2Rlc1t0XSxpPXRoaXMub3B0aW9uc1t0XXx8e307dGhpcy5vcHRpb25zW3RdPWUub3B0aW9ucz9uLmV4dGVuZChlLm9wdGlvbnMsaSk6aSx0aGlzLm1vZGVzW3RdPW5ldyBlKHRoaXMpfSxsLmxheW91dD1mdW5jdGlvbigpe3JldHVybiF0aGlzLl9pc0xheW91dEluaXRlZCYmdGhpcy5fZ2V0T3B0aW9uKFwiaW5pdExheW91dFwiKT92b2lkIHRoaXMuYXJyYW5nZSgpOnZvaWQgdGhpcy5fbGF5b3V0KCl9LGwuX2xheW91dD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldElzSW5zdGFudCgpO3RoaXMuX3Jlc2V0TGF5b3V0KCksdGhpcy5fbWFuYWdlU3RhbXBzKCksdGhpcy5sYXlvdXRJdGVtcyh0aGlzLmZpbHRlcmVkSXRlbXMsdCksdGhpcy5faXNMYXlvdXRJbml0ZWQ9ITB9LGwuYXJyYW5nZT1mdW5jdGlvbih0KXt0aGlzLm9wdGlvbih0KSx0aGlzLl9nZXRJc0luc3RhbnQoKTt2YXIgZT10aGlzLl9maWx0ZXIodGhpcy5pdGVtcyk7dGhpcy5maWx0ZXJlZEl0ZW1zPWUubWF0Y2hlcyx0aGlzLl9iaW5kQXJyYW5nZUNvbXBsZXRlKCksdGhpcy5faXNJbnN0YW50P3RoaXMuX25vVHJhbnNpdGlvbih0aGlzLl9oaWRlUmV2ZWFsLFtlXSk6dGhpcy5faGlkZVJldmVhbChlKSx0aGlzLl9zb3J0KCksdGhpcy5fbGF5b3V0KCl9LGwuX2luaXQ9bC5hcnJhbmdlLGwuX2hpZGVSZXZlYWw9ZnVuY3Rpb24odCl7dGhpcy5yZXZlYWwodC5uZWVkUmV2ZWFsKSx0aGlzLmhpZGUodC5uZWVkSGlkZSl9LGwuX2dldElzSW5zdGFudD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldE9wdGlvbihcImxheW91dEluc3RhbnRcIiksZT12b2lkIDAhPT10P3Q6IXRoaXMuX2lzTGF5b3V0SW5pdGVkO3JldHVybiB0aGlzLl9pc0luc3RhbnQ9ZSxlfSxsLl9iaW5kQXJyYW5nZUNvbXBsZXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2UmJmkmJm8mJm4uZGlzcGF0Y2hFdmVudChcImFycmFuZ2VDb21wbGV0ZVwiLG51bGwsW24uZmlsdGVyZWRJdGVtc10pfXZhciBlLGksbyxuPXRoaXM7dGhpcy5vbmNlKFwibGF5b3V0Q29tcGxldGVcIixmdW5jdGlvbigpe2U9ITAsdCgpfSksdGhpcy5vbmNlKFwiaGlkZUNvbXBsZXRlXCIsZnVuY3Rpb24oKXtpPSEwLHQoKX0pLHRoaXMub25jZShcInJldmVhbENvbXBsZXRlXCIsZnVuY3Rpb24oKXtvPSEwLHQoKX0pfSxsLl9maWx0ZXI9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcHRpb25zLmZpbHRlcjtlPWV8fFwiKlwiO2Zvcih2YXIgaT1bXSxvPVtdLG49W10scz10aGlzLl9nZXRGaWx0ZXJUZXN0KGUpLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGE9dFtyXTtpZighYS5pc0lnbm9yZWQpe3ZhciB1PXMoYSk7dSYmaS5wdXNoKGEpLHUmJmEuaXNIaWRkZW4/by5wdXNoKGEpOnV8fGEuaXNIaWRkZW58fG4ucHVzaChhKX19cmV0dXJue21hdGNoZXM6aSxuZWVkUmV2ZWFsOm8sbmVlZEhpZGU6bn19LGwuX2dldEZpbHRlclRlc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHUmJnRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZz9mdW5jdGlvbihlKXtyZXR1cm4gdShlLmVsZW1lbnQpLmlzKHQpO1xyXG59OlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/ZnVuY3Rpb24oZSl7cmV0dXJuIHQoZS5lbGVtZW50KX06ZnVuY3Rpb24oZSl7cmV0dXJuIG8oZS5lbGVtZW50LHQpfX0sbC51cGRhdGVTb3J0RGF0YT1mdW5jdGlvbih0KXt2YXIgZTt0Pyh0PW4ubWFrZUFycmF5KHQpLGU9dGhpcy5nZXRJdGVtcyh0KSk6ZT10aGlzLml0ZW1zLHRoaXMuX2dldFNvcnRlcnMoKSx0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKGUpfSxsLl9nZXRTb3J0ZXJzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLmdldFNvcnREYXRhO2Zvcih2YXIgZSBpbiB0KXt2YXIgaT10W2VdO3RoaXMuX3NvcnRlcnNbZV09ZihpKX19LGwuX3VwZGF0ZUl0ZW1zU29ydERhdGE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQmJnQubGVuZ3RoLGk9MDtlJiZpPGU7aSsrKXt2YXIgbz10W2ldO28udXBkYXRlU29ydERhdGEoKX19O3ZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4gdDt2YXIgaT1oKHQpLnNwbGl0KFwiIFwiKSxvPWlbMF0sbj1vLm1hdGNoKC9eXFxbKC4rKVxcXSQvKSxzPW4mJm5bMV0scj1lKHMsbyksYT1kLnNvcnREYXRhUGFyc2Vyc1tpWzFdXTtyZXR1cm4gdD1hP2Z1bmN0aW9uKHQpe3JldHVybiB0JiZhKHIodCkpfTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmcih0KX19ZnVuY3Rpb24gZSh0LGUpe3JldHVybiB0P2Z1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSh0KX06ZnVuY3Rpb24odCl7dmFyIGk9dC5xdWVyeVNlbGVjdG9yKGUpO3JldHVybiBpJiZpLnRleHRDb250ZW50fX1yZXR1cm4gdH0oKTtkLnNvcnREYXRhUGFyc2Vycz17cGFyc2VJbnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHBhcnNlSW50KHQsMTApfSxwYXJzZUZsb2F0OmZ1bmN0aW9uKHQpe3JldHVybiBwYXJzZUZsb2F0KHQpfX0sbC5fc29ydD1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5zb3J0Qnkpe3ZhciB0PW4ubWFrZUFycmF5KHRoaXMub3B0aW9ucy5zb3J0QnkpO3RoaXMuX2dldElzU2FtZVNvcnRCeSh0KXx8KHRoaXMuc29ydEhpc3Rvcnk9dC5jb25jYXQodGhpcy5zb3J0SGlzdG9yeSkpO3ZhciBlPWEodGhpcy5zb3J0SGlzdG9yeSx0aGlzLm9wdGlvbnMuc29ydEFzY2VuZGluZyk7dGhpcy5maWx0ZXJlZEl0ZW1zLnNvcnQoZSl9fSxsLl9nZXRJc1NhbWVTb3J0Qnk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYodFtlXSE9dGhpcy5zb3J0SGlzdG9yeVtlXSlyZXR1cm4hMTtyZXR1cm4hMH0sbC5fbW9kZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5sYXlvdXRNb2RlLGU9dGhpcy5tb2Rlc1t0XTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBsYXlvdXQgbW9kZTogXCIrdCk7cmV0dXJuIGUub3B0aW9ucz10aGlzLm9wdGlvbnNbdF0sZX0sbC5fcmVzZXRMYXlvdXQ9ZnVuY3Rpb24oKXtlLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQuY2FsbCh0aGlzKSx0aGlzLl9tb2RlKCkuX3Jlc2V0TGF5b3V0KCl9LGwuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24odCl9LGwuX21hbmFnZVN0YW1wPWZ1bmN0aW9uKHQpe3RoaXMuX21vZGUoKS5fbWFuYWdlU3RhbXAodCl9LGwuX2dldENvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRDb250YWluZXJTaXplKCl9LGwubmVlZHNSZXNpemVMYXlvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW9kZSgpLm5lZWRzUmVzaXplTGF5b3V0KCl9LGwuYXBwZW5kZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hZGRJdGVtcyh0KTtpZihlLmxlbmd0aCl7dmFyIGk9dGhpcy5fZmlsdGVyUmV2ZWFsQWRkZWQoZSk7dGhpcy5maWx0ZXJlZEl0ZW1zPXRoaXMuZmlsdGVyZWRJdGVtcy5jb25jYXQoaSl9fSxsLnByZXBlbmRlZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pdGVtaXplKHQpO2lmKGUubGVuZ3RoKXt0aGlzLl9yZXNldExheW91dCgpLHRoaXMuX21hbmFnZVN0YW1wcygpO3ZhciBpPXRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKGUpO3RoaXMubGF5b3V0SXRlbXModGhpcy5maWx0ZXJlZEl0ZW1zKSx0aGlzLmZpbHRlcmVkSXRlbXM9aS5jb25jYXQodGhpcy5maWx0ZXJlZEl0ZW1zKSx0aGlzLml0ZW1zPWUuY29uY2F0KHRoaXMuaXRlbXMpfX0sbC5fZmlsdGVyUmV2ZWFsQWRkZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZmlsdGVyKHQpO3JldHVybiB0aGlzLmhpZGUoZS5uZWVkSGlkZSksdGhpcy5yZXZlYWwoZS5tYXRjaGVzKSx0aGlzLmxheW91dEl0ZW1zKGUubWF0Y2hlcywhMCksZS5tYXRjaGVzfSxsLmluc2VydD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmFkZEl0ZW1zKHQpO2lmKGUubGVuZ3RoKXt2YXIgaSxvLG49ZS5sZW5ndGg7Zm9yKGk9MDtpPG47aSsrKW89ZVtpXSx0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoby5lbGVtZW50KTt2YXIgcz10aGlzLl9maWx0ZXIoZSkubWF0Y2hlcztmb3IoaT0wO2k8bjtpKyspZVtpXS5pc0xheW91dEluc3RhbnQ9ITA7Zm9yKHRoaXMuYXJyYW5nZSgpLGk9MDtpPG47aSsrKWRlbGV0ZSBlW2ldLmlzTGF5b3V0SW5zdGFudDt0aGlzLnJldmVhbChzKX19O3ZhciBjPWwucmVtb3ZlO3JldHVybiBsLnJlbW92ZT1mdW5jdGlvbih0KXt0PW4ubWFrZUFycmF5KHQpO3ZhciBlPXRoaXMuZ2V0SXRlbXModCk7Yy5jYWxsKHRoaXMsdCk7Zm9yKHZhciBpPWUmJmUubGVuZ3RoLG89MDtpJiZvPGk7bysrKXt2YXIgcz1lW29dO24ucmVtb3ZlRnJvbSh0aGlzLmZpbHRlcmVkSXRlbXMscyl9fSxsLnNodWZmbGU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MDt0PHRoaXMuaXRlbXMubGVuZ3RoO3QrKyl7dmFyIGU9dGhpcy5pdGVtc1t0XTtlLnNvcnREYXRhLnJhbmRvbT1NYXRoLnJhbmRvbSgpfXRoaXMub3B0aW9ucy5zb3J0Qnk9XCJyYW5kb21cIix0aGlzLl9zb3J0KCksdGhpcy5fbGF5b3V0KCl9LGwuX25vVHJhbnNpdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMub3B0aW9ucy50cmFuc2l0aW9uRHVyYXRpb247dGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbj0wO3ZhciBvPXQuYXBwbHkodGhpcyxlKTtyZXR1cm4gdGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbj1pLG99LGwuZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWx0ZXJlZEl0ZW1zLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5lbGVtZW50fSl9LGR9KTtcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcclxuXHR2YXIgaXNvdG9wZSA9ICQoJy5pbWFnZXMsIG1hc29ucnknKS5pc290b3BlKHtcclxuXHRcdFx0XHRpdGVtU2VsZWN0b3I6ICcuaW1hZ2UsIG1hc29ucnktaXRlbScsXHJcblx0XHRcdFx0cGVyY2VudFBvc2l0aW9uOiB0cnVlLFxyXG5cdFx0XHRcdG1hc29ucnk6IHtcclxuXHRcdFx0XHRcdGNvbHVtbldpZHRoOiAnLmNvbC1sZy00JyxcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0dmFyIGlzb3RvcGUyID0gJCgnLm1hc29ucnknKS5pc290b3BlKHtcclxuXHRcdFx0XHRpdGVtU2VsZWN0b3I6ICcubWFzb25yeS1pdGVtJyxcclxuXHRcdFx0XHRwZXJjZW50UG9zaXRpb246IHRydWUsXHJcblx0XHRcdFx0bWFzb25yeToge1xyXG5cdFx0XHRcdFx0Y29sdW1uV2lkdGg6ICcuY29sLWxnLTYnLFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcdFxyXG5cdCQoJy5zd2l0Y2hlcnMgYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHQkKCcuc3dpdGNoZXJzIGxpJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdCQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHR2YXIgZmlsdGVyID0gJCh0aGlzKS5hdHRyKCdkYXRhLWZpbHRlcicpO1xyXG5cdFx0XHRcdGZpbHRlciA9IGZpbHRlciA9PSAnKicgPyBmaWx0ZXIgOiAnLicgKyBmaWx0ZXI7XHJcblx0XHRcdFx0aXNvdG9wZS5pc290b3BlKHsgZmlsdGVyIDogZmlsdGVyfSk7XHJcblx0XHRcdH0pO1xyXG5cdC8vIEZhbmN5Ym94XHJcblx0JCgnLmltYWdlLWJveCcpLmZhbmN5Ym94KCk7XHJcblx0Ly8gIGxhenktbG9hZCBcclxuXHQvLyAkKCcubGF6eS1sb2FkJykuYWRkQ2xhc3MoJ25vdC1sb2FkJyk7XHJcblx0IHZhciB0ZXN0ID0gJCgnLmxhenktbG9hZC5ub3QtbG9hZCcpLnNsaWNlKDAsIDEwKS5yZW1vdmVDbGFzcygnbm90LWxvYWQnKTtcclxuXHQgaXNvdG9wZS5pc290b3BlKCk7XHJcblx0XHJcblx0ICQoJyNidG4tbG9hZCcpLm9uKCdjbGljaycsZnVuY3Rpb24oZSl7XHJcblx0IFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdCBcdCQoJy5sYXp5LWxvYWQubm90LWxvYWQnKS5zbGljZSgwLCA0KS5yZW1vdmVDbGFzcygnbm90LWxvYWQnKTtcclxuXHQgXHRpc290b3BlLmlzb3RvcGUoKVxyXG5cdCB9KVxyXG5cdCBcclxuXHRcclxuXHQgJCgnI2J0bi1sb2FkLWJsb2cnKS5vbignY2xpY2snLGZ1bmN0aW9uKGUpe1xyXG5cdCBcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHQgXHQkKCcubGF6eS1sb2FkLWJsb2cubm90LWxvYWQnKS5zbGljZSgwLCA0KS5yZW1vdmVDbGFzcygnbm90LWxvYWQnKTtcclxuXHQgXHRpc290b3BlMi5pc290b3BlKClcclxuXHQgfSlcclxuXHJcblx0IC8vIHNlYXJjaFxyXG5cdCAkKFwiI2ZhLXNlYXJjaFwiKS5jbGljayhmdW5jdGlvbigpe1xyXG5cclxuICAgICQoXCIud3JhcCwgLmlucHV0XCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgJChcImlucHV0W3R5cGU9J3RleHQnXVwiKS5mb2N1cygpO1xyXG4gIFx0fSk7XHJcblx0IFxyXG59KVxyXG4vLyBtYXBcclxuXHQgdmFyIG1hcCwgbWFya2VyLCBpbmZvV2luZG93LFxyXG5cdFx0XHRjZW50ZXIgPSB7XHJcblx0XHRcdFx0XHRsYXQ6IDQ3LjEyNTI0NCwgXHJcblx0XHRcdFx0XHRsbmc6IDM3LjUxNTE4N1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdGZ1bmN0aW9uIGluaXRNYXAoKSB7XHJcblx0XHRcdFx0bWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuXHRcdFx0XHRjZW50ZXI6IGNlbnRlcixcclxuXHRcdFx0XHR6b29tOiAxNixcclxuXHRcdFx0XHRzdHlsZXM6W1xyXG4gIHtcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxyXG4gICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY29sb3JcIjogXCIjZjVmNWY1XCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy5pY29uXCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IFwib2ZmXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiIzYxNjE2MVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5zdHJva2VcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiI2Y1ZjVmNVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbFwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiI2JkYmRiZFwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2lcIixcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxyXG4gICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY29sb3JcIjogXCIjZWVlZWVlXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJmZWF0dXJlVHlwZVwiOiBcInBvaVwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiIzc1NzU3NVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiNlNWU1ZTVcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIixcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiM5ZTllOWVcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZFwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiNmZmZmZmZcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5hcnRlcmlhbFwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiIzc1NzU3NVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmhpZ2h3YXlcIixcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxyXG4gICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY29sb3JcIjogXCIjZGFkYWRhXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheVwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiIzYxNjE2MVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsXHJcbiAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuZmlsbFwiLFxyXG4gICAgXCJzdHlsZXJzXCI6IFtcclxuICAgICAge1xyXG4gICAgICAgIFwiY29sb3JcIjogXCIjOWU5ZTllXCJcclxuICAgICAgfVxyXG4gICAgXVxyXG4gIH0sXHJcbiAge1xyXG4gICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiNlNWU1ZTVcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImZlYXR1cmVUeXBlXCI6IFwidHJhbnNpdC5zdGF0aW9uXCIsXHJcbiAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcclxuICAgIFwic3R5bGVyc1wiOiBbXHJcbiAgICAgIHtcclxuICAgICAgICBcImNvbG9yXCI6IFwiI2VlZWVlZVwiXHJcbiAgICAgIH1cclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLFxyXG4gICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiNjOWM5YzlcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIixcclxuICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXHJcbiAgICBcInN0eWxlcnNcIjogW1xyXG4gICAgICB7XHJcbiAgICAgICAgXCJjb2xvclwiOiBcIiM5ZTllOWVcIlxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfVxyXG5dXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHRtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuXHRcdFx0XHRwb3NpdGlvbjogY2VudGVyLFxyXG5cdFx0XHRcdG1hcCA6IG1hcCxcclxuXHRcdFx0XHR0aXRsZTogJ9Cc0LDQs9Cw0LfQuNC9INCc0LXQsdC10LvRjNCe0L/RgicsXHJcblx0XHRcdFx0aWNvbjogJ2Zhdmljb24ucG5nJ1xyXG5cdFx0XHR9KVxyXG5cclxuXHRcdFx0aW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHtcclxuXHRcdFx0XHRjb250ZW50OiAnPGgzIHNseWxlPVwiY29sb3I6IzAwMFwiPtCW0LTRkdC8INCy0LDRgSE8L2gzPjxicj48c3Bhbj7Qk9GA0YPRiNC10LLRgdGM0LrQvtCz0L4sIDMxPC9zcGFuPjxicj48YnI+PHNwYW4+0JzQsNGA0LjRg9C/0L7Qu9GMLCDQo9C60YDQsNC40L3QsDwvc3Bhbj4nXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0bWFya2VyLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGluZm9XaW5kb3cub3BlbihtYXAsIG1hcmtlcik7XHJcblx0XHRcdH0pXHJcblx0XHR9XHJcblx0IC8vID09PT09PT09PT09PSJdfQ==
